(function (prweb, $) {
    $.widget('prweb.datwebappmain', {
        //#region Create and Options
        options: {
            myopts: [],
            acctresourceurl: false,
            id: 0
        },
        xevent: "click.datwebappmain",
        //#region Create
        _create: function () {
            try {
                var self = this;
                var myclass = "datwebappmain";
                prweb.setUpKOImageBinding();
                var reziseWithinWordpress = function () {
                    try {
                        $("#main-header").css('display', 'none');//.css("visibility", "hidden");
                        $("#main-footer").css('display', 'none');//.css("visibility", "hidden");
                        $("#page-container").css('padding-top', '0').css("margin-top", "-1px");
                        $(".et_pb_section, #page-container").css('padding', '0');
                        $(".et_pb_row, #page-container").css('padding', '0');
                        $("body").css("padding", 0);
                        $("#primary").addClass('col-lg-4').addClass('col-md-5').addClass('col-sm-8').css("margin-left", "-0.5em");
                        $("#primary").css("min-width", "88%");
                        
                        if (prweb.launchContext.isdatapp) {
                            $(".et_pb_column_0").css("display", "none");
                        }
                        //$(".et_pb_column_0").css("display", "none");
                        //$(".et_pb_column_1").css("width", "100%");
                    }
                    catch (ex) { }
                    try {
                        //setTimeout(function () {
                        //    $("#page-container").css("margin-top", "-1px");
                        //    var xh = $('#primary').offset().top;
                        //    var bh = $('body').offset().top || 0;
                        //    //window.scrollTo(0, 1);
                        //    //xh -= 16;
                        //    $('html').animate({ scrollTop: (xh + bh) }, 0);
                        //    $('body').animate({ scrollTop: (xh + bh) }, 0);
                        //    $("#page-container").css("margin-top", "-1px");
                        //}, 500);

                    }
                    catch (ex) {
                        var wtf = true;
                    }
                };
                reziseWithinWordpress();
                
                //$('head').append('<meta name="apple-mobile-web-app-capable" content="yes">');
                //$('html').attr('prefix', "og: http://ogp.me/ns#");
                //$('head').append('<meta content="website" property="og:type">');
                //$('head').append('<meta content="http://parseserver-cd7x4-env.us-east-1.elasticbeanstalk.com/parse/files/jyJ32DNIM2sNUN1uMJWa0LdWIRlXqntvF6SeEm2y/5a34eac3da8991634c8fde9686554a75_file.bin" property="og:image">');
                //$('head').append('<meta content="In JawJa... we call that a hen party boy...." property="og:title">');
                //$('head').append('<meta content="http://datmoments.com/dat-app/?datInvite1=7ZHU47M4C4" property="og:url">');

                //<meta name="apple-mobile-web-app-capable" content="yes">window.navigator.standalone
                //<meta name="apple-mobile-web-app-status-bar-style" content="black"> see apple-mobile-web-app-status-bar-style
                //LINK TO NATIVE APPS: <a href="tel:1-408-555-5555">Call me</a> see Apple URL Scheme Reference.
                //https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html
                if (prweb.hasParse) {
                    return self.separateSetUp().then(function (xr) {
                        var x1 = xr[0];
                        var x2 = xr[1];
                        var pnlMgr = self._setUpPanelTBindings();//these are custom bindings for each panel and component(s)...they do all the work...
                        self._bindViewModel();//this does the inital binding of the model for the app
                        self.appManager = self._newappManager();
                        self.appManager["pnlMgr"] = pnlMgr;
                        self.appManager.launchApp();//Tbindings takes over from here...
                    }).fail(function (ex) {
                        var y = ex;// this is the anonymous user case...
                    });
                } else { prweb.log("prweb.datwebappmain.create prweb.hasParse not true..."); }
            }
            catch (ex) {
                prweb.log("prweb.datwebappmain.create reports catch exception..." + ex.Message);
            }
        },
        //#endregion
        //#endregion

        wtf: function () {
            var xx = function () { };
        },
    

        separateSetUp: function () {
            var self = this;
            //Parse.User.logOut();
            
            var isuser = Parse.User.current() || false;
            if (isuser) {
                var proms = [];
                proms.push(prweb.parseManager.getResources());
                proms.push(prweb.parseManager.getResources({platformid:"WebIcon"}));
                proms.push(prweb.parseManager.getUserProfile(isuser.id));
                self["urlParms"] = self._getUrlVars();
                if (self.urlParms["datInvite1"]) {
                    var inviteObjid = self.urlParms["datInvite1"] || false;
                    if (inviteObjid) {
                        proms.push(prweb.parseManager.getInviteComplete(inviteObjid));
                    }
                }
                
                return Parse.Promise.when(proms).then(function (xr) {
                    Enumerable.From(xr[1]).ForEach(function (t) {
                        xr[0][t.Key] = t.Value;
                    });
                    var xrsrces = xr[0];
                    self["inviteObject"] = xr[3] || false;
                    self["userProfile"] = xr[2] || false;
                    prweb.populateResources(xrsrces);
                    var populateOGlinks = function (invitedata) {
                        try {
                            if (invitedata) {
                                var invimage = invitedata.inviteImage;
                                var datdata = invitedata.datFeedElement;
                                var ogurl = window.location.href;
                                var ogimagecontent;
                                var ximg = invimage.get('imageFile') || false;
                                if (ximg) {
                                    ogimagecontent = ximg.url();
                                } else {
                                    ogimagecontent = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile);
                                }
                                var ogtitlecontent = datdata.headerText;//datmodel.headerText();
                                $('head').append('<meta property="og:type" content="website">');
                                $('head').append('<meta property="og:url" content="' + ogurl + '">');
                                $('head').append('<meta property="og:image" content="' + ogimagecontent + '">');
                                $('head').append('<meta property="og:title" content="' + ogtitlecontent + '">');
                                document.title = ogtitlecontent;
                            }
                        }
                        catch (ex) {
                            var wtf = true;
                        }

                    };
                    populateOGlinks(self["inviteObject"]);
                    self.mydatappVmx.isuser = true;
                    self.mydatappVmx.parseuser(isuser);
                    return [xrsrces, isuser];
                }).fail(function (ex) {
                    return Parse.Promise.as(ex);
                });
            } else {
                var proms = [];
                proms.push(prweb.parseManager.getResources());
                proms.push(prweb.parseManager.getResources({ platformid: "WebIcon" }));
                self["urlParms"] = self._getUrlVars();
                if (self.urlParms["datInvite1"]) {
                    var inviteObjid = self.urlParms["datInvite1"] || false;
                    if (inviteObjid) {
                        //ox9vwmA152
                        proms.push(prweb.parseManager.getInviteComplete(inviteObjid));
                    }
                }
                return Parse.Promise.when(proms).then(function (xr) {
                    Enumerable.From(xr[1]).ForEach(function (t) {
                        xr[0][t.Key] = t.Value;
                    });
                    var xrsrces = xr[0];
                    prweb.populateResources(xrsrces);
                    var invitedata = xr[2] || false;
                    return self.setUpApp2(invitedata).then(function (xuser) {
                        return xuser;
                    }).fail(function (xex) {
                        self.mydatappVmx.isuser = false;
                        return self.mydatappVmx.parseuser();
                    });
                }).fail(function (ex) {
                    return Parse.Promise.as(self.mydatappVmx.parseuser());
                });
            }
        },
        setUpApp2: function (invitedata) {
            var self = this;
            try {
                if (invitedata) {
                    self["inviteObject"] = invitedata;
                    var populateOGlinks = function () {
                        try {
                            var invimage = invitedata.inviteImage;
                            var datdata = invitedata.datFeedElement;
                            var ogurl = window.location.href;
                            var ogimagecontent;
                            var ximg = invimage.get('imageFile') || false;
                            if (ximg) {
                                ogimagecontent = ximg.url();
                            } else {
                                ogimagecontent = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile);
                            }
                            var toOgTitleContent = function () {
                                var rslt = "";
                                try {
                                    rslt = datdata.headerText;
                                    if (datdata.datType == "11") {
                                        var countables = datdata.countables || false;
                                        if (countables) {
                                            rslt = countables[0].headerText || countables[0].titleText;
                                        }    
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                    rslt = datdata.headerText;
                                }
                                return rslt;
                            };
                            var ogtitlecontent = toOgTitleContent();//datdata.headerText;//datmodel.headerText();
                            $('head').append('<meta property="og:type" content="website">');
                            $('head').append('<meta property="og:url" content="' + ogurl + '">');
                            $('head').append('<meta property="og:image" content="' + ogimagecontent + '">');
                            $('head').append('<meta property="og:title" content="' + ogtitlecontent + '">');
                            document.title = ogtitlecontent;
                        }
                        catch (ex) {
                            var wtf = true;
                        }
                        
                    };
                    populateOGlinks();
                    var autoAnonSignUp = function () {
                        try {
                            var finishAutoSignup = function (xuser) {
                                //this calls cloud method for save the fbdata and newUser....
                                return prweb.parseManager.addAutoAnonUser({
                                    DatGroupID: invitedata['groupid'],
                                    groupId: invitedata['groupid'],
                                    updateType: "AutoAnonJoin",
                                    memberFirstName: "member " + invitedata['memberid']
                                }).then(function (xr) {
                                    self.mydatappVmx.isuser = true;
                                    self.mydatappVmx.parseuser(xuser);
                                    //should update Parse.User.currentuser() with user_photo and DatUserFilter
                                    return xuser;//is user...

                                }).fail(function (ex) {
                                    prweb.log("prweb.datwebappmain.updateUserwithFBGraph promise catch...");// + ex.message);
                                });
                            };
                            
                            var toAAcreds = function () {
                                var rslt = { lname: "", lpwd: "" };
                                //make lname and lpwd from the groupMetadata in the invite...is parms..
                                var statustags = invitedata['groupstatustags'];
                                rslt["IsAutoAnon"] = Enumerable.From(statustags).Contains("AUTOANON");
                                rslt.lname = invitedata['groupid'] + "." + invitedata['memberid'] + "@datmoments.com";
                                rslt.lpwd = invitedata['groupid'];
                                return rslt;
                            };
                            var c = toAAcreds();
                            if (c["IsAutoAnon"]) {
                                var isyes = true;
                            }
                            return Parse.User.signUp(c.lname, c.lpwd, null).then(function (sxr) {
                                return finishAutoSignup(sxr);
                            }).fail(function (user, error) {
                                self.mydatappVmx.isuser = false;
                                var un = user.getUsername();
                                self.mydatappVmx.parseuser(user);
                            });
                        }
                        catch (ex) {

                            prweb.log("prweb.datwebappmain.setUpApp2.autoAnonSignUp reports catch exception..." + ex.Message);
                        }
                    };
                    return autoAnonSignUp();
                } else {
                    var autoPublicSignup = function(){
                        try{
                            var finishAutoPublicSignup = function (user) {
                                return prweb.parseManager.addAnonPublicUser().then(function (xuser) {
                                    self.mydatappVmx.isuser = true;
                                    self.mydatappVmx.parseuser(user);
                                    //should update Parse.User.currentuser() with user_photo and DatUserFilter
                                    return xuser;//is user..
                                }).fail(function (ex) {
                                    prweb.log("prweb.datwebappmain.addAnonPublicUser promise catch...");// + ex.message);
                                });
                            }
                            var toAutoPublicCreds = function () {
                                var rslt = { lname: "", lpwd: "" };
                                var xlname = prweb.fourDigits() + prweb.fourDigits();
                                rslt.lname = xlname + "." + prweb.fourDigits() + "@datmoments.com";
                                rslt.lpwd = xlname;
                                return rslt;
                            };
                            var c = toAutoPublicCreds();
                            return Parse.User.signUp(c.lname, c.lpwd, null).then(function (sxr) {
                                return finishAutoPublicSignup(sxr);
                            }).fail(function (user, error) {
                                self.mydatappVmx.isuser = false;
                                var un = user.getUsername();
                                self.mydatappVmx.parseuser(user);
                            });
                        }
                        catch(ex){
                            var wtf = true;
                        }
                    };
                    return autoPublicSignup();
                    //return Parse.User.logIn("", "", {
                        
                    //    success: function (rs) {
                    //        return Parse.Promise.as(rs);
                    //    },
                    //    error: function (user) {
                    //        self.mydatappVmx.isuser = false;
                    //        var un = user.getUsername();
                    //        self.mydatappVmx.parseuser(user);
                    //        return Parse.Promise.as(user);
                    //    }
                    //});
                }
            }
            catch (ex) {
                var x = 2;
                return Parse.Promise.as(ex);
            }
        },
        //#region viewmodel for AppManager
        //this is the appManager model...
        mydatappVmx: {
            appcontext: {
                'state': ko.observable('init'),
                'user': ko.observable('guest'),
                'control': ko.observable(prweb.datControl3),
                'panel': ko.observable(prweb.datSignReg1),
                'urlparms': ko.observableArray()
            },
            establishUserContext: function () {
                var self = this;
                var isuser = Parse.User.current() || false;
                if (isuser) {
                    return Parse.Promise.as(isuser);
                } else {
                    return Parse.User.logIn("", "").then(function (ur) {
                        return ur;
                    }).fail(function (exuser) {
                        return exuser;
                    })
                }
            },
            invitation: false,
            isuser: false,
            parseuser: ko.observable(true),
            parseuserphotourl: function () {
                var self = this;
                var user = Parse.User.current() || false;
                if (user) {
                    var juser = user.toJSON();
                    if (juser.user_photo) {
                        var xurl = juser.user_photo.url;//tojson makes sure url is here...
                        return xurl;
                    } else {
                        var xnew = 2;
                    }
                } else {

                }
            },
            manageAnonymousUser: function (xuser) {
                var self = this;
                var rslt = false;
                try {
                Parse.User.logIn("","",{
                    success: function (rs) {
                        return rs;
                    },
                    error: function (user) {
                        var un = user.getUsername();
                        self.parseuser(user);
                        return user;
                    }
                });
                }
                catch (ex) {
                    var x = 2;
                }
            },
            appcontrolscolxn: ko.observableArray([]),
            apppanelcolxn: ko.observableArray([]),
            widgetizeAddedPanel: function (elem, model) {
                //this is the same for every foreach binding that encloses html binding
                var mymodel = ko.dataFor(elem[1]);
                var T = "." + mymodel.presenterT;
                var echild = $(T, $(elem[1]));
                ko.applyBindings(mymodel, echild[0]);
                return;
            },
            parseusersubscription: null, //see onparseuserchange in newAppManager
            appcontrolcontextsubscription: null,// see on controlcontextchange in newAppManager
            dispose: function () {
                this.parseusersubscription.dispose();
            }
        },

        _bindViewModel: function () {
            var konode = $("#primary");
            ko.applyBindings(this.mydatappVmx, konode[0]);
            konode = null;
            //retrieve feed data?
        },
        //#endregion

        //#region appManager
        appManager: null,
        vStateMgr: null,
        _newappManager: function () {
            var self = this;
            var that = {};
            that.appStoreUrl = "https://itunes.apple.com/us/app/dat/id1070868332?mt=8";
            that.datMomentsUrl = "http://datmoments.com";
            //#region PCDxnry for panel and controls
            that.PCDxnry = {
                "INVITE": {
                    panels: [prweb.datMenuInvite1, prweb.datInvite1, prweb.datSignReg1],
                    controls: [prweb.datControlsInvite1],
                    method: function () {
                        that.panels = [];
                        that.loadPanels(that.PCDxnry["INVITE"].panels);
                        that.loadControls(that.PCDxnry["INVITE"].controls);
                        that.pnlMgr.panel(prweb.datInvite1).controlT = prweb.datControlsInvite1;//default control with panel
                        that.pnlMgr.panel(prweb.datSignReg1).controlT = prweb.datControlsInviteSignUp1;
                        that.pnlMgr.panel(prweb.datMenuInvite1).controlT = prweb.datControlsInvite1;
                    }
                },
                "INVITEMEMBER": {
                    panels: [prweb.datMenu1, prweb.datSingle1, prweb.datInviteMember1, prweb.datUserProfile1, prweb.datRightMenu1, prweb.datShare1, prweb.datShareDetail1, prweb.datSingleEditor1, prweb.datNotify1, prweb.datSignReg1],
                    controls: [prweb.datControlsSingleDat1],
                    method: function () {
                        that.panels = [];
                        that.loadPanels(that.PCDxnry["INVITEMEMBER"].panels);
                        that.loadControls(that.PCDxnry["INVITEMEMBER"].controls);
                    }
                },
                "PROSPECT": {
                    panels: [prweb.datMenuInvite1, prweb.datSignReg1],
                    controls: [prweb.datControls3],
                    method: function () {
                        that.panels = [];
                        that.loadPanels(that.PCDxnry["PROSPECT"].panels);
                        that.loadControls(that.PCDxnry["PROSPECT"].controls);
                        that.pnlMgr.hide(200);
                        that.pnlMgr.show(0, prweb.datSignReg1);
                    }
                },
                "MEMBER": {
                    panels: [prweb.datMenu1, prweb.datFeed1, prweb.datSingle1, prweb.datUserProfile1, prweb.datRightMenu1, prweb.datShare1, prweb.datShareDetail1, prweb.datSingleEditor1, prweb.datNotify1, prweb.datSignReg1],
                    controls: [prweb.datControls2],
                    method: function () {
                        that.panels = [];
                        that.loadPanels(that.PCDxnry["MEMBER"].panels);
                        that.loadControls(that.PCDxnry["MEMBER"].controls);
                    }
                },
                dispose: false
            };
            //#endregion
            //#region onParseUserChange
            that.onparseuserchange = function (parseuser) {
                if (parseuser != false) {
                    self.mydatappVmx.isuser = true;
                } else {
                    self.mydatappVmx.isuser = false;
                }
                var PCDxnryKey = "INVITE";
                //var cntlnames = [prweb.datControls1];
                var isinvite = self.mydatappVmx.invitation;
                if (isinvite) {
                    PCDxnryKey = "INVITE";
                    //cntlnames = [prweb.datControlsInvite1];
                    if (self.mydatappVmx.isuser && Parse.User.current()) {
                        self.mydatappVmx.parseuser(parseuser);
                        PCDxnryKey = "INVITEMEMBER";
                        //cntlnames = [prweb.datControls2];
                    }
                } else if (self.mydatappVmx.isuser && Parse.User.current()) {
                    PCDxnryKey = "MEMBER";
                    self.mydatappVmx.parseuser(parseuser);
                    //cntlnames = [prweb.datControls2];
                } else {
                    if (true) {
                        PCDxnryKey = "PROSPECT";
                        //cntlnames = [prweb.datControls2];
                    } else {
                        PCDxnryKey = "PROSPECT";
                    }
                }
                
                that.PCDxnry[PCDxnryKey].method();
                if (parseuser == false) {
                    self.mydatappVmx.parseuser(false);
                }
                //else if (parseuser) {
                //    if (parseuser == prweb.datSignReg1) {
                //        cntlnames = [prweb.datControls3];
                //    } else {
                //        cntlnames = [prweb.datControls2];
                //    }
                //} else if (true) {
                //    var x = 2;
                //}
                //MAYBE:this should alter mydatappvmx.appcontrolcontext observable...that should trigger onappcontrolcontextchanged handler...
                //that.loadControls(cntlnames);
            };
            //#endregion
            //#region getIsSignedIn
            that.getIsSignedIn = function () {
                try {
                    //prweb.parseManager.getUser({
                    //    success: function (rslt) {
                    //        var username = "";
                    //        if (!(undefined == rslt)) {
                    //            username = rslt.getUsername();
                    //            self.mydatappVmx.parseuser(rslt);
                    //            self.mydatappVmx.appcontext.user(rslt);
                    //            self.mydatappVmx.isuser = true;
                    //            for (var n in that.panels) {
                    //                that.panels[n].panelprops()['isuser'](true);
                    //            }
                    //            for (var n in that.controls) {
                    //                that.controls[n].panelprops()['isuser'](true);
                    //                that.controls[n].panelprops()['username'](username);
                    //            };
                    //        } else {
                    //            var gstuser = self.mydatappVmx.manageAnonymousUser();
                    //            self.mydatappVmx.appcontext.user(gstuser);
                    //            self.mydatappVmx.parseuser(gstuser);
                    //            //self.mydatappVmx.parseuser(false);//triggers onParseUserChange...
                    //        }
                    //    },
                    //    error: function (e) {
                    //        var gstuser = self.mydatappVmx.manageAnonymousUser();
                    //        self.mydatappVmx.appcontext.user(gstuser);
                    //        self.mydatappVmx.parseuser(gstuser);//triggers onParseUserChange...
                    //        prweb.log("prweb.datwebappmain.getIsSignedIn parseManager.getUser.error callback" + ex.Message);
                    //    }
                    //});
                }
                catch (ex) {
                    prweb.log("prweb.datwebappmain.getIsSignedIn call to parseManager.getUser reports catch exception..." + ex.Message);
                }
            };
            //#endregion
            //#region LaunchApp
            that.launchApp = function () {
                $("#datsplash").hide(1500, function () {
                    //$(this).addClass('datdisplaynone');
                });
                that.toFullScreen();
                //var pnlnames = [prweb.datMenu1, prweb.datFeed1, prweb.datSingle1, prweb.datComment1, prweb.datSignReg1];
                if (that.urlParms[prweb.datInvite1]) {
                    //self.mydatappVmx.manageAnonymousUser(prweb.datInvite1);
                    self.mydatappVmx.invitation = true;
                    //pnlnames = [prweb.datMenu1, prweb.datInvite1, prweb.datSingle1, prweb.datComment1, prweb.datSignReg1];
                } else {
                    self.mydatappVmx.invitation = false;
                }
                $("#main").css('visibility', 'visible');
                //that.loadPanels(pnlnames);

                //self.mydatappVmx.parseusersubscription = self.mydatappVmx.parseuser.subscribe(that.onparseuserchange);
                self.mydatappVmx.appcontrolcontextsubscription = self.mydatappVmx.appcontext.control.subscribe(that.onappcontrolcontextchange);
                that.onparseuserchange(self.mydatappVmx.parseuser());
                //that.getIsSignedIn();
                return that;
            };
            
            that.urlParms = self._getUrlVars();
            //#endregion

            that.toFullScreen = function () {
                if (prweb.isMobile.any()) {
                    $('body').append($('#primary')).css("padding-top", "1em").css("padding-bottom", "1em").css("padding-left", "0.5em").css("padding-right", "0em");//.css("height", ($(window).height() - 145).toString() +'px');
                    $('#page-container').hide(200);
                    $("#primary").css("background-position-x", "0%").css("background-position-y", "0%");//.css("position", "absolute").css("top", "0").css("left", "0").css("right", "0").css("bottom", "0").css("height",($(window).height() - 5));

                }
            };
            //#region MenuNavigation
            that.navigateMenuClick = function ($el) {
                var x = 2;
            };
            //#endregion
            //#region SignInOut
            that.signOut = function () {
                Parse.User.logOut();
                that.onparseuserchange(false);
                //that.getIsSignedIn();
            };
            that.signIn = function (lname, lpwd) {
                //lname = lname;
                //lpwd = lpwd;
                try {
                    Parse.User.logIn(lname, lpwd, {
                        success: function (user) {
                            that.onparseuserchange(user);
                        },
                        error: function (user, error) {
                            that.onparseuserchange(user);
                        }
                    });
                }
                catch (ex) {

                    prweb.log("prweb.datwebappmain.appManager.signin reports catch exception..." + ex.Message);
                }
            };
            that.signUp = function (lname, lpwd) {

            };
            
            //#endregion
            //#region Controls
            that.onappcontrolcontextchange = function (cntl) {
            };
            that.controls = [];
            //#region controlEntry definition
            that.newcontrolentry = function (T) {
                var controlentry = {
                    presenterT: T,
                    panelelemId: ko.observable(T),
                    backtoTprop: false,
                    backtoT: function (T) {
                        if (T == undefined) {
                            return controlentry.backtoTprop;
                        } else {
                            controlentry.backtoTprop = T;
                            return controlentry;
                        }
                    },
                    panelprops: ko.observable({
                        "username": ko.observable(false),
                        "userphoto": ko.observable(),
                        "isuser": ko.observable(false),
                        "isvisible": ko.observable(false),
                        "elementImage": ko.observable(prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile)),
                        "background": ko.observable(),
                        "badgecount": ko.observable(0)
                    }),
                    dispose: function () { return;},
                    html: ko.observable(prweb.pCElemHtmlDxnry[T].resourceModel)//this is a T resource html
                };
                var basephoto = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile)
                controlentry.panelprops()["userphoto"](basephoto);
                return controlentry;
            };
            //#endregion
            //#region loadControls
            //controlnames is an array that is populated by onParseUserChange...that function calls loadControls
            that.loadControls = function (controlnames) {
                that.controls = [];
                for (var n in controlnames) {
                    that.controls.push(that.newcontrolentry(controlnames[n]));
                }
                self.mydatappVmx.appcontrolscolxn(that.controls);
                return;
            };
            //#endregion
            //#endregion
            //#region Panels
            that.panels = [];
            //#region PanelProps
            that.pnlpropsdxnryT = {
                datInvite1: ['invitedby', 'invitedby0', 'invitedby1', 'inviteename', 'invitemessage', 'invitetime'],
                datInviteMember1: ['invitedby', 'invitedby0', 'invitedby1', 'inviteename', 'invitemessage', 'invitetime'],
                datSignReg1: ['uporin', 'upvisibility', 'invisibility', 'inviteename']
            };
            //#endregion
            //#region NewPanelEntry
            that.newpanelentry = function (T) {
                //#region apppanelentry
                var apppanelentry = {
                    controlT: false,
                    datacontext: ko.observable(),
                    panelelemId: ko.observable(T),
                    presenterT: T,
                    iscurrent: true,
                    backtoTprop: false,
                    backtoT: function (T) {
                        if (T == undefined) {
                            return apppanelentry.backtoTprop;
                        } else {
                            apppanelentry.backtoTprop = T;
                            return apppanelentry;
                        }
                    },
                    panelprops: ko.observable({
                        "wheight": 0,
                        "maxheight": 492,
                        "minheight": 492,
                        "elementImage": ko.observable(prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile)),
                        "datblueimage": ko.observable(prweb.toImgUrl(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile)),
                        "isuser": ko.observable(false),
                        "isvisible": ko.observable(false),
                        "background": ko.observable(),
                        "responsiveheight": ko.observable(492)
                    }),
                    onShow: function () {
                        return;
                    },
                    onHide: function () {
                        return;
                    },
                    newcontentmodel: null,
                    contentmodelcolxn: ko.observableArray([]),//content models...colxn of model(Tcontent) the panel displays
                    html: ko.observable(prweb.pCElemHtmlDxnry[T].resourceModel),//this is a T resource html
                    panelpartscolxn: ko.observableArray(),//models for panel components(Tpanelcomponent), if any 
                    makepanelobject: null,//necessary when panelpartscolxn has members...modifies html:
                    widgetizeAddedContent: function (elem, model) {
                        return;
                    },
                    widgetizeCommentEntry: function (elem, model) {
                        var mymodel = ko.dataFor(elem[1]);
                        var T = "." + "datCommentEntry1";
                        var echild = $(T, $(elem[1]));
                        ko.applyBindings(mymodel, echild[0]);
                        return;
                    },
                    widgetizeResponseFeed: function (elem, model) {
                        var mymodel = ko.dataFor(elem[1]);
                        var T = "." + "datResponseFeed1";
                        var echild = $(T, $(elem[1]));
                        ko.applyBindings(mymodel, echild[0]);
                        return;
                    },
                    manageResponseScroll: function () {
                        
                        
                        var isr = apppanelentry.panelprops()['initScrollRoot'] || false;
                        $(isr).mCustomScrollbar('stop');
                        var xtarget = $("#tapdatresponsesbutton");// datsinglecontentmodel tapdatresponsesbutton
                        $(isr).mCustomScrollbar('scrollTo', xtarget, {
                            timeout: 400
                        });
                        
                        //alert("scrolled");
                    },
                    manageCommentScroll: function () {


                        var isr = apppanelentry.panelprops()['initScrollRoot'] || false;
                        $(isr).mCustomScrollbar('stop');
                        var xtarget = $("#datsinglecontentmodel");// datsinglecontentmodel tapdatresponsesbutton
                        $(isr).mCustomScrollbar('scrollTo', xtarget, {
                            timeout: 500
                        });

                        //alert("scrolled");
                    },
                    widgetizeResponseCountable: function (elem, model) {
                        var mymodel = ko.dataFor(elem[1]);
                        var T = "." + "datcountableitem";
                        var echild = $(T, $(elem[1]));
                        ko.applyBindings(mymodel, echild[0]);
                        return;
                    },
                    wigetizeSingleDatContent: function (elem, model) {
                        var mymodel = ko.dataFor(elem[1]);
                        var T = "." + mymodel.modelcore.presenterT;
                        var echild = $(T, $(elem[1]));
                        ko.applyBindings(mymodel, echild[0]);
                        return;
                    },
                    wigetizeSingleDatEditorContent: function (elem, model) {
                        //var editorTDxnry = {
                        //    "datRate1": "datRateEdit1",
                        //    "datSentiment1": "datSentimentEdit1",
                        //    "dat5": "dat5Edit1",
                        //    dispose: false
                        //};
                        var mymodel = ko.dataFor(elem[1]);
                        //var edT = editorTDxnry[mymodel.modelcore.presenterT];
                        //mymodel.modelcore.html(prweb.pCElemHtmlDxnry[mymodel.modelcore.presenterT].resourceModel)
                        var T = "." + mymodel.modelcore.presenterT;
                        var echild = $(T, $(elem[1]));
                        ko.applyBindings(mymodel, echild[0]);
                        //self._initiateMalihuScroll("#scrollrootdatSingleEditor1");
                        return;
                    }
                };
                //#endregion
                //this does url examination...puts it in every panel
                for (var k in that.urlParms) {
                    apppanelentry.panelprops()[k] = that.urlParms[k];
                };
                //we need certain panelprops for certain panels...adding them here...defined in that.panelPropsDxnryT
                //#region extendpnlprops
                var extendpnlprops = function () {
                    var makepanelprops = function (prop) {
                        apppanelentry.panelprops()[prop] = ko.observable();
                        return true;
                    };
                    Enumerable.From(that.pnlpropsdxnryT[T]).ForEach(function (p) { return makepanelprops(p) });
                };
                extendpnlprops();
                //#endregion
                apppanelentry.makepanelobject = function (Tcolxn) {
                    return;
                };
                return apppanelentry;
            };
            //#endregion
            //#region LoadPanels
            
            that.loadPanels = function (panelnames) {
                for (var n in panelnames) {
                    try {
                        that.panels.push(that.newpanelentry(panelnames[n]));
                    }
                    catch (ex) {
                        var pn = panelnames[n];
                        var wtf = true;
                    }
                    
                }
                try {
                    self.mydatappVmx.apppanelcolxn(that.panels);
                }
                catch (ex) {
                    var wtf = true;
                }
                
                return;
            };
            //#endregion
            //#endregion
            
            that.AppUnavailable = function () {

            };
            return that;
        },
        //#region getUrlVars
        _getUrlVars: function () {
            var vars = {};
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = value;
            });
            return vars;
        },
        //#endregion
        //#endregion appManager

        //#region Panel and Control T bindings
        _setUpPanelTBindings: function () {
            try {
                var sel = "#";
                var datpanelvisible = 'datpanelvisible';
                var datpanelhidden = 'datpanelhidden';
                var self = this;
                //#region navMgr
                var makenavMgr = function () {
                    var that = {
                        DxnryT: {},
                        toContext: function(cT){
                            return {
                                T:cT,
                                properties:false,
                            };
                        },
                        getT: function (T) {
                            var entry = that.DxnryT[T] || false;
                            if (entry == false) {
                                entry = {
                                    sources: [],
                                    targets: [],
                                    lastSource: function () {
                                        return Enumerable.From(entry.sources).LastOrDefault(false);
                                    },
                                    lastTarget: function () {
                                        return Enumerable.From(entry.targets).LastOrDefault(false);
                                    },
                                    to: function(TargetT, sourceproperties){
                                        entry.targets.push(that.toContext(TargetT));
                                        var context = that.toContext(T);
                                        var p = sourceproperties || false;
                                        if (p) {
                                            context.properties = p;
                                        }
                                        that.getT(TargetT).sources.push(context);
                                        return TargetT;
                                    },
                                    returnfromlast: function(withcontext){
                                        var xsource = entry.lastSource();
                                        var xsourceT = {};
                                        if(xsource){
                                            entry.sources = Enumerable.From(entry.sources).Except([xsource]).ToArray() || [];
                                            xsourceT = that.getT(xsource["T"])
                                            var xtarget = xsourceT.lastTarget();
                                            if(xtarget){
                                                xsourceT.targets = Enumerable.From(xsourceT.targets).Except([xtarget]).ToArray() || [];
                                            } 
                                        }
                                        var rslt = xsource["T"];
                                        var c = withcontext || false;
                                        if (c) {
                                            rslt = xsource;
                                        }
                                        return rslt;
                                    }
                                };
                                that.DxnryT[T] = entry;
                            }
                            return that.DxnryT[T];
                        },
                        me: function (T) {
                            return that.getT(T);
                        },
                        dispose: false
                    };
                    return that;
                };
                var navMgr = makenavMgr();
                //#endregion navMgr
                //#region pnlMgr
                var makepnlMgr = function () {
                    var that = {};
                    that.pulse = {
                        last: {
                            tmoid: false,
                            notifypnl: false
                        },
                        onheartbeat: function () {
                            try {
                                var isuser = Parse.User.current() || false;
                                if (isuser) {
                                    if (that.pulse.last.notifypnl) {
                                        return that.pulse.last.notifypnl["retrieveNotifications"]().then(function (xr) {
                                            return xr;
                                        });
                                    } else {
                                        that.pulse.last.notifypnl = pnlMgr.panel(prweb.datNotify1) || false;
                                        return Parse.Promise.as(false);
                                    }
                                } else {
                                    that.pulse.last.notifypnl = pnlMgr.panel(prweb.datNotify1) || false;
                                    return Parse.Promise.as(false);
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                                return Parse.Promise.as(false);
                            }
                        },
                        heartbeat: function (unconditional) {
                            if (unconditional) {
                                clearTimeout(that.pulse.last.tmoid);
                                that.pulse.last.tmoid = false;
                                return that.pulse.onheartbeat().then(function (xr) {
                                    that.pulse.last.tmoid = setTimeout(function () {
                                        return that.pulse.onheartbeat().then(function (xr) {
                                            return xr;
                                        });
                                    }, 15000);
                                    return xr;
                                });
                            } else {
                                clearTimeout(that.pulse.last.tmoid);
                                that.pulse.last.tmoid = setTimeout(function () {
                                    return that.pulse.onheartbeat().then(function (xr) {
                                        return xr;
                                    });
                                }, 15000);
                            }
                        }
                    };
                    that.dims = { wheight: 0 };
                    that.resizeWindowSvc = function () {
                        var me = {
                            resizeAllTextAreas: function (xkodata) {
                                try {
                                    //clear timeout is handled alread in me.enable --- window.resize handler below
                                    if (xkodata) {
                                        var $textarea = xkodata["EDITOBJtitleText"]()["$textarea"] || false;
                                        if ($textarea) {
                                            //var sh = $textarea.scrollHeight;
                                            $($textarea).height(0).height($textarea.scrollHeight);//forces resize in textare
                                        }
                                    } else {
                                        Enumerable.From($(".singleedittextareaeditable")).ForEach(function (elem) {
                                            try {
                                                var kodata = ko.dataFor(elem);
                                                var kotextarea = kodata.$textarea;
                                                var $textarea = elem;
                                                if (kotextarea) {
                                                    $($textarea).height(0).height($textarea.scrollHeight);//forces resize in textare
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        });
                                    }
                                }
                                catch (ex) {
                                    var wt = true;
                                }
                                
                                
                            },
                            onPanelShow: function (pnl, unconditional) {
                                //called from that.show()...
                                try {

                                    var xh = ko.unwrap(pnl.panelprops()['wheight']);
                                    var existingsize = that.dims.wheight;
                                    if (xh !== existingsize || unconditional) {
                                        me.xOnResizeHandler(pnl);
                                    }
                                    $("#page-container").css("margin-top", "-1px");
                                } catch (ex) {
                                    me.xOnResizeHandler(pnl);
                                }

                            },
                            bodyNoScroll: function () {
                                $('body').css('overflow', 'hidden');
                                document.ontouchmove = function (e) {
                                    try {
                                        e.preventDefault();
                                        e.cancelBubble();
                                    }
                                    catch (ex) {

                                    }

                                };
                            },
                            onResizeHandler: function () {
                                that.appPositionRefresh();
                            },
                            currentPanel: function (xpnl) {
                                var rslt = {
                                    T: prweb.datFeed1,
                                    panel: false
                                };
                                try {
                                    var rsltpnl = {};
                                    if (xpnl) {
                                        rsltpnl = xpnl;
                                    } else {
                                        if (navMgr.DxnryT["datMenu1Active"]) {
                                            rsltpnl = that.panel(prweb.datMenu1);
                                            var curpnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                                                return p.iscurrent == true;
                                            }).FirstOrDefault();
                                            if (curpnl) {
                                                if (curpnl.presenterT != prweb.datFeed1) {
                                                    rsltpnl = curpnl;
                                                }
                                            }
                                        }
                                        else {
                                            rsltpnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                                                return p.iscurrent == true;
                                            }).FirstOrDefault();
                                        }
                                    }
                                    rslt["panel"] = rsltpnl || that.panel(rslt["T"])
                                    rslt["T"] = rsltpnl.presenterT || rslt["T"];
                                    var T = rslt["T"];
                                    var $elem = $("." + T).first();
                                    $('.scrollroot' + T, $elem).hide();
                                    rslt["$elem"] = $elem;
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                return rslt;
                            },
                            xOnResizeHandler: function (xpnl) {

                                try {
                                    $("#page-container").css("margin-top", "-1px");
                                    var currentpnl = me.currentPanel(xpnl || false);
                                    var T = currentpnl["T"];
                                    //var $elem = $("." + T).first();
                                    // $('.scrollroot' + T, $elem).hide();
                                    var pnl = currentpnl["panel"] || pnlMgr.panel(T);
                                    //var xh = ko.unwrap(pnl.panelprops()["minheight"]);
                                    //var existingsize = that.useThisSize;
                                    var wh = 600;//non phone, its always 600...
                                    if (prweb.isMobile.any()) {
                                        wh = $(window).outerHeight();
                                        wh += 8;
                                    } else {
                                        wh = $(window).innerHeight();
                                        //wh -= 50;
                                    }
                                    that.dims.wheight = wh;
                                    pnl.panelprops()['wheight'] = wh;
                                    var cch = $('#datcontrolscontainer').outerHeight();

                                    var elemTh = currentpnl["$elem"].outerHeight() || 0;
                                    //pnl.panelprops()['minheight'] = (wh - cch - elemTh).toString() + 'px';
                                    pnl.panelprops()['minheight'] = (wh - cch - elemTh).toString() + 'px';
                                    pnl.panelprops()["responsiveheight"]((wh - cch - elemTh).toString() + 'px');

                                    //var hh = (wh - cch - elemTh);
                                    //$("#primary").css('height', (xh + cch + elemTh).toString() + 'px');
                                    //$("#primary").css('height', (wh + 28).toString() + 'px');
                                    $('.scrollroot' + T, currentpnl["$elem"]).show();
                                    that.appPositionRefresh();
                                    me.resizeAllTextAreas();
                                }
                                catch (ex) {
                                    var wtf = true;
                                    that.appPositionRefresh();
                                }
                                return that.pulse.heartbeat();
                            },
                            enable: function () {
                                me.bodyNoScroll();
                                //var tmoutid = false;
                                var xtmoutid = false;
                                $(window).resize(function () {
                                    //window.clearTimeout(tmoutid);
                                    //tmoutid = window.setTimeout(function () {
                                    //    me.onResizeHandler();
                                    //}, 200);

                                    window.clearTimeout(xtmoutid);
                                    xtmoutid = window.setTimeout(function () {
                                        me.xOnResizeHandler();
                                    }, 300);

                                });
                                return that.pulse.heartbeat(true);


                            },
                            disable: function () { },
                        };
                        return me;
                    };
                    that.appPositionRefresh = function () {
                        try {
                            $("#page-container").css('padding-top', '0').css("margin-top", "-1px");
                            setTimeout(function () {
                                $("#page-container").css("margin-top", "-1px");
                                var bh = $('body').offset().top || 0;
                                var xh = $('#primary').offset().top;
                                //window.scrollTo(0, 1);
                                xh += 24;
                                $('html').animate({ scrollTop: (xh + bh) }, 0);
                                $('body').animate({ scrollTop: (xh + bh) }, 0);
                                $("#page-container").css("margin-top", "-1px");
                            }, 0);
                            $("#page-container").css('padding-top', '0').css("margin-top", "-1px");
                        }
                        catch (ex) {
                            var wtf = true;
                        }
                    };
                    //#region initSize
                    that.useThisSize = 0;
                    that.initSize = function (T, elem) {
                        $('.scrollroot' + T, $(elem)).hide();
                        $("#page-container").css("margin-top", "-1px");
                        if (that.useThisSize == 0) {
                            var wh = 600;//non phone, its always 600...
                            if (prweb.isMobile.any()) {
                                wh = $(window).outerHeight();
                                wh -= 28;
                            } else {
                                wh = $(window).innerHeight();
                                wh -= 50;
                            }
                            that.dims.wheight = wh;
                            
                            var cch = $('#datcontrolscontainer').outerHeight();
                            var elemTh = $(elem).outerHeight();
                            var pnl = that.panel(T);
                            pnl.panelprops()['wheight'] = wh;
                            pnl.panelprops()['minheight'] = (wh - cch - elemTh).toString() + 'px';
                            var hh = (wh - cch - elemTh);//pnl.panelprops()['minheight'];
                            var xhh = pnl.panelprops()['minheight'];
                            that.useThisSize = xhh;//(wh - cch - elemTh).toString() + 'px';
                            if (T == prweb.datMenu1 || T== prweb.datMenuInvite1) {
                                //$("#primary").css('height', (xhh + cch + elemTh).toString() + 'px');//fix height of container once
                            }
                        } else {
                            var pnl = that.panel(T);
                            pnl.panelprops()['minheight'] = that.useThisSize;
                            pnl.panelprops()['wheight'] = that.dims.wheight;
                        }
                        
                        $('.scrollroot' + T, $(elem)).show();
                        that.appPositionRefresh();
                        return that;
                    };
                    //#endregion
                    //#region MenuNavigation
                    that.navigateMenuClick = function (method, T) {
                        var $datmenu = $(sel + T);
                        $datmenu.removeClass(datpanelvisible).addClass(datpanelhidden).hide(300);
                        var rslt = {
                            ofT: T,
                            isCurrent: false
                        }
                        method(rslt);
                    };
                    //#endregion
                    that.panel = function (T) {
                        var rslt;
                        rslt = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.presenterT == T }).FirstOrDefault();
                        return rslt;
                    };
                    that.defaultPanelT = function () {
                        var rslt = self.mydatappVmx.apppanelcolxn()[1].presenterT;
                        if (self.appManager.urlParms[prweb.datInvite1]) {
                            rlst = prweb.datInvite1;
                        } else {
                            rlst = prweb.datFeed1;
                        }
                        return rslt;
                    };
                    that.toggleMenuT = function (T) {
                        try {
                            var $datmenu = $(sel + T);
                            var vis = $datmenu.hasClass(datpanelvisible);
                            var hid = $datmenu.hasClass(datpanelhidden);
                            var rslt = {
                                ofT: T,
                                isCurrent: false
                            }
                            if (vis) {
                                
                                var pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.iscurrent == true }).FirstOrDefault();
                                if (pnl.presenterT == T) {
                                    rslt.isCurrent = true;
                                    navMgr.DxnryT["datMenu1Active"] = true;
                                } else {
                                    rslt.isCurrent = false;
                                    navMgr.DxnryT["datMenu1Active"] = false;
                                    $datmenu.removeClass(datpanelvisible).addClass(datpanelhidden).hide(300);
                                    if (pnl.presenterT == prweb.datFeed1) {
                                        $("#datcreateplusbutton").show();
                                        $("#datfeedfilterbutton").show();
                                        pnl["feedFilterUpdate"]();
                                    }
                                    $(sel + pnl.presenterT).show(200);
                                }
                            } else if (hid) {
                                var pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.iscurrent == true }).FirstOrDefault();
                                //if (pnl.presenterT == T) {
                                //    rslt.isCurrent = true;
                                //} else {
                                    if (that.panel(T).controlT != false) {
                                        cntrlMgr.showControl(that.panel(T).controlT);//panel T is the menu being toggled
                                    }
                                    rslt.isCurrent = true;
                                    $(sel + pnl.presenterT).hide(300);
                                    $datmenu.removeClass(datpanelhidden).addClass(datpanelvisible).show(200);
                                    $(".scrollroot" + T, $(sel + T)).show();
                                    if (T == prweb.datMenu1) {
                                        navMgr.DxnryT = { datMenu1Active: true };
                                        that.resizeWindowSvc().onPanelShow(pnlMgr.panel(T), true);
                                    }

                                //}
                                
                            }
                            
                            that.appPositionRefresh();
                            return rslt;
                        }
                        catch (ex) {
                            prweb.log("pnlMgr.toggleMenuT reports catch exception " + ex.Message);
                            return;
                        }

                    };
                    //that.showmenuslideRight = function () {
                    //    var pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.iscurrent == true }).FirstOrDefault();
                    //    $(sel + pnl.presenterT).hide(300);
                    //    $(sel + prweb.datMenu1).removeClass(datpanelhidden).addClass(datpanelvisible).show(200);
                    //};
                    that.closeMenu = function (T) {
                        $(sel + T).removeClass(datpanelvisible).addClass(datpanelhidden).hide(300);
                        var pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.iscurrent == true }).FirstOrDefault();
                        if (!(pnl == undefined)) {
                            $(sel + pnl.presenterT).show(200);
                        }
                    };
                    that.hide = function (animspeed, T) {
                        animspeed = animspeed || 0;
                        var xpnl = self.mydatappVmx.apppanelcolxn();
                        var pnl = false;
                        if (T == undefined) {
                            
                            pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.iscurrent == true }).FirstOrDefault();
                        } else {
                            pnl = Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) { return p.presenterT == T }).FirstOrDefault();
                        }
                        if (pnl) {
                            pnl.iscurrent = false;
                            $(sel + pnl.presenterT).addClass(datpanelhidden).hide(animspeed);
                            pnl.onHide();
                            return pnl;
                        } else {
                            return false;
                        }
                        
                    };
                    that.show = function (animspeed, T) {
                        try {
                            animspeed = animspeed || 200;
                            var xpnl = self.mydatappVmx.apppanelcolxn();
                            var pnl = that.panel(T) || false;
                            if (pnl == false && Parse.User.current()) {
                                pnl = that.addPanel(T, false);
                            }
                            pnl.iscurrent = true;
                            
                            if (pnl.controlT != false) {
                                cntrlMgr.showControl(pnl.controlT);
                            }
                            pnl.onShow();
                            $(sel + T).addClass(datpanelvisible).show(animspeed, function () {
                                var lastDFElem = pnl["lastNavFromDatFeedElem"] || false;
                                if (lastDFElem) {
                                    lastDFElem();
                                }
                                that.resizeWindowSvc().onPanelShow(pnl);
                                that.appPositionRefresh();
                            });
                            //var resetWindow = function () {
                            //    //var xh = $('body')[0].scrollHeight;
                            //    //$('html').animate({ scrollTop: ($('body')[0].scrollHeight) }, 'slow');
                            //    //$('body').animate({ scrollTop: ($('body')[0].scrollHeight) }, 'slow');
                            //    //var xh = $('#primary')[0].scrollHeight;
                            //    //$('body').animate({ scrollTop: (xh) }, 'slow');
                            //};
                            //resetWindow();
                           // $(".scrollroot" + T, $(sel + T)).show();
                        }
                        catch (ex) {
                            prweb.log("pnlMgr.show reports catch exception " + ex.Message);
                            return;
                        }
                        
                        return pnl;
                    };
                    that.addPanel = function (T, datacontext) {
                        var p = that.panel(T) || false;
                        if (p == false) {
                            p = self.appManager.newpanelentry(T);
                            p.datacontext(datacontext || false);
                            self.appManager.panels.push(p);
                            self.mydatappVmx.apppanelcolxn(self.appManager.panels);
                        }
                        return p;
                    };
                    that.removePanel = function (T) {
                        //var parray = self.mydatappVmx.apppanelcolxn();
                        var exArray = [that.panel(T)];
                        self.appManager.panels = Enumerable.From(self.appManager.panels).Except(exArray).ToArray();
                        self.mydatappVmx.apppanelcolxn(self.appManager.panels);
                        // this is ugly on the ui...
                        //self.mydatappVmx.apppanelcolxn.remove(function (p) { return p.presenterT == T });
                        var x = 2;
                    };
                    return that;
                };
                var pnlMgr = makepnlMgr();
                pnlMgr.resizeWindowSvc().enable();
                //#endregion
                //#region cntrlMgr
                var makecntrlMgr = function () {
                    var that = {};
                    that.backToDxnry = {};
                    that.control = function (T) {
                        var rslt;
                        rslt = Enumerable.From(self.mydatappVmx.appcontrolscolxn()).Where(function (p) { return p.presenterT == T }).FirstOrDefault();
                        return rslt;
                    };
                    that.showControl = function (T) {
                        var c = that.control(T) || false;
                        if (c == false) {
                            Enumerable.From(self.mydatappVmx.appcontrolscolxn()).ForEach(function (xc) {
                                $(sel + xc.presenterT).addClass("controlhide");
                                //xc.dispose();
                            });
                            c = self.appManager.newcontrolentry(T);
                            self.appManager.controls = self.mydatappVmx.appcontrolscolxn();//[];
                            self.appManager.controls.push(c);
                            self.mydatappVmx.appcontrolscolxn(self.appManager.controls);
                        } else {
                            Enumerable.From(self.mydatappVmx.appcontrolscolxn()).ForEach(function (xc) {
                                $(sel + xc.presenterT).addClass("controlhide");
                                //xc.dispose();
                            });
                            $(sel + c.presenterT).removeClass("controlhide")
                        }
                        return c;
                    };
                    return that;
                };
                var cntrlMgr = makecntrlMgr();
                //#endregion cntrlMgr

                //#region datSingleContextMgr
                var refreshedDfeDxnry = {};
                var makeDatSingleContextMgr = function (sourceT) {
                    var me = {
                        toDataContext: function (dfe) {
                            var rslt = dfe;
                            var yes = true;
                            var cmodel = function () {
                                var xdat = rslt;
                                var that = {
                                    dat: xdat,
                                    datcomplete: xdat,
                                    datId: xdat.objectId,
                                    datcountableitemVmx: false,
                                    btntext: ko.observable("Answer 'dat"),
                                    presenterT: "datFeedElem1",
                                    ownerPhoto: ko.observable(),//prweb.toImgUrl(datscolxn[n].datOwner)),
                                    userName: ko.observable(xdat.datUsername),
                                    elementImage: ko.observable(),
                                    responsePercent: ko.observable("0%"),
                                    totResponses: ko.observable(xdat.totalResponses + " respondents" || 0),
                                    timeago: ko.observable(),
                                    views: ko.observable(xdat.datMetadata.views + " views"),
                                    headerText: ko.observable(xdat.headerText),
                                    isresponsefeedvisible:false,
                                    updateSelected: null
                                };
                                that.toOwnerImage = function () {
                                    try {
                                        var rslt = prweb.toOwnerImgUrl(xdat.datOwner);
                                        that.ownerPhoto(rslt);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                that.toOwnerImage();
                                that.timeago("Updated " + prweb.timeAgoFromParseTime(xdat.updatedAt));
                                that.toElementImage = function () {
                                    var rslt = false;
                                    try {
                                        switch (true) {
                                            case (that.dat.datType == 1):
                                                var imgj = that.dat.winner.elementImage;//.toJSON();
                                                rslt = imgj.url() || imgj.url;
                                                break;
                                            case (that.dat.datType == 2):
                                                var imgj = that.dat.otherdcelems[0].elementImage//.toJSON();
                                                rslt = imgj.url() || imgj.url;
                                                break;
                                            case (that.dat.datType == 3):
                                                var imgj = that.dat.otherdcelems[0].elementImage//.toJSON();
                                                rslt = imgj.url() || imgj.url;
                                                break;
                                        }
                                    }
                                    catch (ex) {
                                        var yyy = that.dat.datOwner.toJSON();
                                        var imgj = yyy;
                                        rslt = imgj.url;
                                        var x = true;
                                    }

                                    that.elementImage(rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel);
                                };
                                that.updateSelected = function (updatetime) {
                                    try {
                                        var timeago = prweb.timeAgoFromParseTime(that.datcomplete.dat.updatedAt);
                                        if (!(undefined == updatetime)) { timeago = prweb.timeAgoFromParseTime(updatetime) }
                                        that.timeago("Updated " + timeago);
                                        var totResp = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).Sum(function (dce) { return dce.responseCount });
                                        that.totResponses(totResp + ' respondents');
                                        var maxRespdce = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).OrderByDescending(function (dce) { return dce.responseCount }).FirstOrDefault();
                                        if (maxRespdce) {
                                            var mypct = (maxRespdce.responseCount / totResp) * 100;
                                            var pctstr = ((Math.round(mypct * Math.pow(10, 1)) / Math.pow(10, 1)).toString() + '%');

                                            that.responsePercent(pctstr);
                                            if (maxRespdce.hasOwnProperty('elementImage')) {
                                                that.elementImage(maxRespdce.elementImage.imageFile.url);
                                            }
                                        }
                                    }
                                    catch (ex) {
                                        prweb.log("prweb.datwebappmain.datFeed1.updateSelected reports catch exception..." + ex.Message);
                                    }
                                };
                                //that.updateSelected();
                                //#region todatcountableitemVMx
                                that.todatcountableitemVMx = function () {
                                    var rslt = {};
                                    try {

                                    }
                                    catch (ex) {
                                        var no = true;
                                    }
                                    that.datcountableitemVmx = rslt;
                                };
                                that.todatcountableitemVMx();
                                //#endregion
                                that.toElementImage();
                                return that;
                            };
                            return cmodel();
                        },
                        navigateTo: function (dfe) {
                            try {
                                //#region Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                                var sourceCntrlDxnry = {
                                    "datUserProfile1": prweb.datControlsUserProfile,
                                    "datNotify1": prweb.datControlsNotify
                                };

                                var tocntrlT = navMgr.me(sourceCntrlDxnry[sourceT]).to(prweb.datControlsSingleDat1);
                                
                                //#region Navigate to datSingle1 uses pnlMgr
                                var hiddenpnl = pnlMgr.panel(sourceT);
                                var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                pnlMgr.hide(300);
                                hiddenpnl.datacontext(false);
                                var toT = navMgr.me(sourceT).to(prweb.datSingle1, sourceproperties);
                                cntrlMgr.showControl(tocntrlT);
                                var pnl = pnlMgr.show(200, toT);
                                pnl.datacontext(me.toDataContext(dfe));//invokes datSingle1 bindings update:()
                                //#endregion

                                //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        returnFrom: function () {
                            try {
                                var sourceCntrlDxnry = {
                                    "datRightMenu1": prweb.datControlsRightMenu1
                                };
                                var tocntrlT = navMgr.me(sourceCntrlDxnry[sourceT]).returnfromlast();
                                cntrlMgr.showControl(tocntrlT);
                                pnlMgr.hide(300, sourceT).datacontext(false);
                                var backToObj = navMgr.me(sourceT).returnfromlast(true);
                                var pnl = pnlMgr.show(200, prweb.datSingle1);
                                if (refreshedDfeDxnry[sourceT]) {
                                    var dfe = refreshedDfeDxnry[sourceT];
                                    refreshedDfeDxnry[sourceT] = false;
                                    pnl.datacontext(me.toDataContext(dfe));
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        refreshedDfe: function (dfe) {
                            refreshedDfeDxnry[sourceT] = dfe || false;
                        },
                        dispose: false
                    };
                    return me;
                };
                var datSingleContextMgr = function (sourceT) {
                    return makeDatSingleContextMgr(sourceT);
                };
                //#endregion
                

                //#region datMenu1
                if (!ko.bindingHandlers.datMenu1) {
                    ko.bindingHandlers.datMenu1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datMenu1, element).hide(0, prweb.datMenu1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatMenu1");
                            pnl["OnShow"] = function () {
                                navMgr.DxnryT = {};
                            };
                            $("#datbackmenubtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.closeMenu(prweb.datMenu1);
                            });
                            var cmodelarray = [];
                            var cmodel = function (m) {
                                var that = {
                                    presenterT: "datMenuElem1",
                                    elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                    menuTextA: ko.observable(m.labels[0]),
                                    menuTextB: ko.observable(m.labels[1]),
                                    menuTextC: ko.observable("this is menutextC"),
                                    stay: m["stay"] || false,
                                    method: m.method
                                };
                                return that;
                            };
                            var populatecontentmodelcolxn = function () {
                                //#region menuitems
                                var menuitems = {
                                    'mydats': {
                                        method: function (toggleObj) {
                                            cntrlMgr.control(prweb.datControls2)["toggledT"] = toggleObj || false;
                                            cntrlMgr.showControl(prweb.datControls2);
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            pnlMgr.show(0, prweb.datFeed1);
                                        },
                                        labels: ["My 'Dats", "See your 'dats"],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url(),
                                    },
                                    'groups': {
                                        method: function () {
                                            //cntrlMgr.showControl(prweb.datControlsGroups1);
                                            pnlMgr.addPanel(prweb.datGroups1);
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            pnlMgr.show(0, prweb.datGroups1);
                                        },
                                        labels: ["Groups", "Interact with groups"],
                                        iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                    },
                                    'settings': {
                                        method: function () {
                                            //var tocntrlT = navMgr.me(prweb.datMenu1).to(prweb.datControlsSettings1);
                                            //cntrlMgr.showControl(tocntrlT);//(prweb.datControlsUserProfile);
                                            pnlMgr.addPanel(prweb.datSettings1);
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            pnlMgr.show(0, prweb.datSettings1);
                                        },
                                        labels: ["Settings", "Update what you do with 'dat"],
                                        iconurl: prweb.pCElemHtmlDxnry["datSettingsIcon1"].resourceFile.url()
                                    },
                                    'appstoredat': {
                                        method: function () {
                                            window.open(self.appManager.appStoreUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["App Store 'Dat", "See 'Dat on the App Store"],
                                        iconurl: prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()
                                    },
                                    'faqs': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["FAQs", "Answers to common questions, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datFAQ1"].resourceFile.url()
                                    },
                                    'privacy': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["Privacy", "How we protect your data, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datPrivacy1"].resourceFile.url()
                                    },
                                    'termsofuse': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["Terms of Use", "How to use and not abuse 'dat, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datTermsofUse1"].resourceFile.url()
                                    },
                                    'signout': {
                                        method: function () {
                                            pnlMgr.hide(300);
                                            var dfltpnlT = pnlMgr.defaultPanelT();
                                            pnlMgr.show(200, dfltpnlT);
                                            self.appManager.signOut();
                                        },
                                        labels: ["Sign out from 'Dat", "This will end your session."],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                    },
                                    'signin': {
                                        method: function () {
                                            var signupbacktoT = pnlMgr.hide(300).presenterT;
                                            pnlMgr.show(200, prweb.datSignReg1).backtoT(signupbacktoT).panelprops()["uporin"] = "in";
                                        },
                                        labels: ["Sign In to 'Dat", "This will take to Sign In. "],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                    }
                                };
                                //#endregion menuitems
                                var makemenuelem = function (xm) {
                                    var xcm = cmodel(xm.Value);
                                    cmodelarray.push(xcm);
                                    return true;
                                };
                                Enumerable.From(menuitems).ForEach(function (m) { return makemenuelem(m) });
                                pnl.contentmodelcolxn(cmodelarray);
                            };
                            populatecontentmodelcolxn();
                            //self._initiateMalihuScroll("scrollrootdatMenu1");
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                if (!ko.bindingHandlers.datMenuElem1) {
                    ko.bindingHandlers.datMenuElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            $elem.bind(self.xevent, function () {
                                if (bindingContext.$data["stay"]) {
                                    bindingContext.$data.method();
                                } else {
                                    pnlMgr.navigateMenuClick(bindingContext.$data.method, prweb.datMenu1);
                                    self.appManager.navigateMenuClick($elem);
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datMenu1
                //#region datMenuInvite1
                if (!ko.bindingHandlers.datMenuInvite1) {
                    ko.bindingHandlers.datMenuInvite1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datMenuInvite1, element).hide(0, prweb.datMenuInvite1);
                            $("#datbackmenubtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.closeMenu(prweb.datMenuInvite1);
                            });
                            var cmodelarray = [];
                            var cmodel = function (m) {
                                var that = {
                                    presenterT: "datMenuInviteElem1",
                                    elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                    menuTextA: ko.observable(m.labels[0]),
                                    menuTextB: ko.observable(m.labels[1]),
                                    menuTextC: ko.observable("this is menutextC"),
                                    stay: m["stay"] || false,
                                    method: m.method
                                };
                                return that;
                            };
                            var populatecontentmodelcolxn = function () {
                                var menuitems = {
                                    //'signin': {
                                    //    method: function () {
                                    //        //var signupbacktoT = pnlMgr.hide(300).presenterT;
                                    //        pnlMgr.show(200, prweb.datSignReg1).backtoT(prweb.datMenuInvite1).panelprops()["uporin"] = "in";
                                    //    },
                                    //    labels: ["Sign In to 'Dat", "This will take to Sign In. "],
                                    //    iconurl: "prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()"
                                    //},
                                    'launchdatapp': {
                                        method: function () {
                                            prweb.toApp();
                                        },
                                        stay: true,
                                        labels: ["Open'Dat", "Use 'Dat(if installed)"],
                                        iconurl: prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()
                                    },
                                    'appstoredat': {
                                        method: function () {
                                            window.open(self.appManager.appStoreUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["App Store 'Dat", "See 'Dat on the App Store"],
                                        iconurl: prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()
                                    },
                                    'faqs': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["FAQs", "Answers to common questions, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datFAQ1"].resourceFile.url()
                                    },
                                    'privacy': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["Privacy", "How we protect your data, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datPrivacy1"].resourceFile.url()
                                    },
                                    'termsofuse': {
                                        method: function () {
                                            window.open(self.appManager.datMomentsUrl, "_blank");
                                        },
                                        stay: true,
                                        labels: ["Terms of Use", "How to use and not abuse 'dat, @datmoments.com"],
                                        iconurl: prweb.pCElemHtmlDxnry["datTermsofUse1"].resourceFile.url()
                                    }
                                };
                                var makemenuelem = function (xm) {
                                    var xcm = cmodel(xm.Value);
                                    cmodelarray.push(xcm);
                                    return true;
                                };
                                Enumerable.From(menuitems).ForEach(function (m) { return makemenuelem(m) });
                                pnl.contentmodelcolxn(cmodelarray);
                            };
                            populatecontentmodelcolxn();
                            self._initiateMalihuScroll("scrollrootdatMenuInvite1");
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                if (!ko.bindingHandlers.datMenuInviteElem1) {
                    ko.bindingHandlers.datMenuInviteElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            $elem.bind(self.xevent, function () {
                                if (bindingContext.$data["stay"]) {
                                    bindingContext.$data.method();
                                } else {
                                    pnlMgr.navigateMenuClick(bindingContext.$data.method, prweb.datMenuInvite1);
                                    self.appManager.navigateMenuClick($elem);
                                }
                                
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datMenuInvite1
                //#region datControls1
                if (!ko.bindingHandlers.datControls1) {
                    ko.bindingHandlers.datControls1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            $("#datcontrolinbtn").hide(0);//do this if invititation use case
                            $("#datcontrolmenubtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.toggleMenuT(prweb.datMenu1);

                            });
                            $("#datcontrolupbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                self.mydatappVmx.parseuser(prweb.datSignReg1);//changes the appcontrol that is displayed 
                                var signupbacktoT = pnlMgr.hide(300).presenterT;
                                pnlMgr.closeMenu(prweb.datMenu1);
                                pnlMgr.show(200, prweb.datSignReg1).backtoT(signupbacktoT).panelprops()["uporin"]("up");
                            });
                            
                            $("#datcontrolinbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                self.mydatappVmx.parseuser(prweb.datSignReg1);//changes the appcontrol that is displayed 
                                var signupbacktoT = pnlMgr.hide(300).presenterT;
                                pnlMgr.show(200, prweb.datSignReg1).backtoT(signupbacktoT).panelprops()["uporin"]("in");
                            });
                            
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControls1
                //#region datControls2
                if (!ko.bindingHandlers.datControls2) {
                    ko.bindingHandlers.datControls2 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControls2).panelprops()['username'](username);
                            var url = prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile.url() || prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile.url;
                            cntrlMgr.control(prweb.datControls2).panelprops()['elementImage'](url);
                            $("#datcontrolmenubtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                $("#datcreateplusbutton").hide();
                                $("#datfeedfilterbutton").hide();
                                var cannavigate = true;
                                var toggleT = cntrlMgr.control(prweb.datControls2)["toggledT"] || false;
                                if (toggleT) {
                                    if (toggleT["isCurrent"]) {
                                        cannavigate = false;
                                        //cntrlMgr.control(prweb.datControls2)["toggledT"]["isCurrent"] = false;
                                        //toggleT["isCurrent"] = false;
                                        //.control(prweb.datControls2)["toggledT"] = toggleT;
                                    }
                                }
                                //if (cannavigate) {
                                var toggleObj = pnlMgr.toggleMenuT(prweb.datMenu1);
                                cntrlMgr.control(prweb.datControls2)["toggledT"] = toggleObj;
                                //} 
                                pnlMgr.pulse.heartbeat();
                            });
                            $("#datcontrolsignedinarea").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var cannavigate = true;
                                var toggleT = cntrlMgr.control(prweb.datControls2)["toggledT"] || false;
                                if (toggleT) {
                                    if (toggleT["isCurrent"]) {
                                        cannavigate = false;
                                    }
                                }
                                if (cannavigate) {
                                    var tocntrlT = navMgr.me(prweb.datControls2).to(prweb.datControlsUserProfile);
                                    cntrlMgr.showControl(tocntrlT);//(prweb.datControlsUserProfile);
                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    var user = Parse.User.current();//or some other user_id we have!!!! gotta get user_id in dataContext somehow!!!
                                    var userid = user.id || false;
                                    //pnlMgr.addPanel(prweb.datUserProfile1, userid);

                                    var fromT = pnlMgr.hide(300)["presenterT"];
                                    var sourceproperties = { datacontext: userid };
                                    var toT = navMgr.me(fromT).to(prweb.datUserProfile1, sourceproperties);
                                    pnlMgr.show(0, prweb.datUserProfile1).datacontext(userid);
                                }
                                //#endregion
                            });
                            $("#datcontrolnotifybutton").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var cannavigate = true;
                                var toggleT = cntrlMgr.control(prweb.datControls2)["toggledT"] || false;
                                if (toggleT) {
                                    if (toggleT["isCurrent"]) {
                                        cannavigate = false;
                                    }
                                }
                                if (cannavigate) {
                                    var tocntrlT = navMgr.me(prweb.datControls2).to(prweb.datControlsNotify);
                                    cntrlMgr.showControl(tocntrlT);
                                    //#region Navigate to datNotify1 uses pnlMgr
                                    var hiddenT = pnlMgr.hide(300)["presenterT"];
                                    var toT = navMgr.me(hiddenT).to(prweb.datNotify1);
                                    pnlMgr.addPanel(toT);

                                    pnlMgr.show(200, toT);//.backtoT();

                                    //#endregion
                                }
                                
                            });
                            $("#datfeedfilterbutton").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var cannavigate = true;
                                var toggleT = cntrlMgr.control(prweb.datControls2)["toggledT"] || false;
                                if (toggleT) {
                                    if (toggleT["isCurrent"]) {
                                        cannavigate = false;
                                    }
                                }
                                if (cannavigate) {
                                    try {
                                        pnlMgr.panel(prweb.datFeed1)["lastNavFromDatFeedElem"] = false;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    
                                    cntrlMgr.showControl(prweb.datControlsFeedFilter);
                                    //#region Navigate to datFeedFilter1 uses pnlMgr
                                    pnlMgr.addPanel(prweb.datFeedFilter1);
                                    pnlMgr.hide(300);
                                    var pnl = pnlMgr.show(200, prweb.datFeedFilter1).backtoT();

                                    //#endregion
                                }
                                
                            });
                            $("#datcreateplusbutton").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                //#region Navigate to datSingleEditor1 uses pnlMgr
                                try {
                                    navMgr.me(prweb.datControls2).to(prweb.datControlsSingleEditor1);
                                    navMgr.me(prweb.datFeed1).to(prweb.datSingleEditor1);
                                    var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                    if (pnl) {
                                        var sourcedc = { addNew: true, resetUniverse: true};
                                        //pnl.datacontext(sourcedc);
                                        cntrlMgr.showControl(prweb.datControlsSingleEditor1);
                                        pnlMgr.hide(300);//.datacontext(false);
                                        pnlMgr.show(300, prweb.datSingleEditor1)
                                        pnl.datacontext(sourcedc);

                                    } else {
                                        try {
                                            cntrlMgr.showControl(prweb.datControlsSingleEditor1);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }

                                //#endregion
                            });
                            //var userid = self.mydatappVmx.parseuser().id;
                            var user = self.mydatappVmx.parseuser();
                            //var juser = user.toJSON();
                            var userphoto = user.get('user_photo') || false;
                            if (userphoto) {
                                var xurl = userphoto.url() || userphoto.url;
                                    //juser.user_photo.url;//tojson makes sure url is here...
                                cntrlMgr.control(prweb.datControls2).panelprops()['userphoto'](xurl);
                            } else {
                                var xr = self["userProfile"] || false;
                                if (xr) {
                                    var xurl = prweb.toOwnerImgUrl(xr.userOwner.owner);
                                    cntrlMgr.control(prweb.datControls2).panelprops()['userphoto'](xurl);
                                }
                            }
                            bindingContext.$data.dispose = function () {
                                $("#datcontrolmenubtn").off(self.xevent);
                                $("#datcontrolsignedinarea").off(self.xevent);
                                $("#datcontrolnotifybutton").off(self.xevent);
                                $("#datfeedfilterbutton").off(self.xevent);
                            };
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControls2
                //#region datControls3
                if (!ko.bindingHandlers.datControls3) {
                    ko.bindingHandlers.datControls3 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var x = 2;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControls3
                
                
                //#region datImageViewPopup1
                if (!ko.bindingHandlers.datImageViewPopup1) {
                    ko.bindingHandlers.datImageViewPopup1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            $("#userprofileimghost").magnificPopup({
                                type: 'image'
                                // other options
                            });
                            $("#sentimentimageholder").magnificPopup({
                                type: 'image'
                                // other options
                            });
                            $("#rateimageholder").magnificPopup({
                                type: 'image'
                                // other options
                            });
                            $(".dat5imageholder").magnificPopup({
                                type: 'image'
                                // other options
                            });
                            $(".datSingleEditQestion1imageholder").magnificPopup({
                                type: 'image'
                                // other options
                            });
                            //$("#xxsentimenteditimageholder").magnificPopup({
                            //    type: 'image'
                            //    // other options
                            //});
                            //$("#xxrateeditimageholder").magnificPopup({
                            //    type: 'image'
                            //    // other options
                            //});
                            
                            //$(".xxdatFiveEdit1imghost").magnificPopup({
                            //    type: 'image'
                            //    // other options
                            //});
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext){}
                    };
                };
                //#endregion datImageviewPopup1
              
                //#region datUserProfileEditor
                var makeDatUserProfileEditor = function () {

                };
                var datUserProfileEditor = function (xdc) {
                    var me = {
                        init: function () {
                            //adds a bunch of handlers for editable elements...
                            $("#userprofileimghost").off('click');//'magnificPopup'
                            //$("#userprofileimghost").removeData('magnificPopup');
                            $("#userprofileimghost").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                $("#userprofileimagesopener").trigger("click");
                                return false;
                            });
                            $("#userprofileimagesopener").on("change", function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var updateBoundImages = function (newfxr) {
                                    try {
                                        var url = newfxr.url();
                                        var feed = pnlMgr.panel(prweb.datFeed1).contentmodelcolxn();
                                        Enumerable.From(feed).Where(function (r) {
                                            var pu = Parse.User.current();
                                            var parseuserid = pu.id;
                                            return r.dat.userId == parseuserid;
                                        }).ForEach(function (ur) {
                                            ur.ownerPhoto(url);
                                            return true;
                                        });
                                        cntrlMgr.control(prweb.datControls2).panelprops()['userphoto'](url);
                                        var cool = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    
                                };
                                var saveDatImageParse = function (ximg) {
                                    try {
                                        var userrow = Parse.User.current();
                                        var userphoto = userrow.get('user_photo');
                                        var parseFile = new Parse.File('userprof', ximg);
                                        return parseFile.save().then(function (fxr) {
                                            userrow.set('user_photo', fxr);
                                            updateBoundImages(fxr);
                                            return userrow.save().then(function (xr) {
                                                var excellent = true;
                                            }).fail(function (ex) {
                                                var wtf = true;
                                            });
                                        }).catch(function (ex) { var wtf = true; })
                                        
                                        //var newdatimagerow = new Parse.Object('DatImages');
                                        var cool = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    
                                };

                                try {
                                    var ximage = this.files[0] || false;
                                    if (ximage) {
                                        var url = window.URL ? window.URL : window.webkitURL;
                                        var newsrc = url.createObjectURL(ximage);
                                        var xrslt = xdc["contentmodelcolxn"]()[0];
                                        xrslt.userphoto(newsrc);

                                        saveDatImageParse(ximage);
                                        var cool = true;
                                    }
                                    
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                
                            });
                            $(".edituserprofileglyph").removeClass("edithosthide").parent().on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var $elem = $(e.currentTarget);
                                var mynode = $elem.children()[1];
                                var kodata = ko.contextFor(mynode);
                                $("#datuserprofileedithost").addClass("datnomarpad, text-center").show(10, function () {
                                    $("#datuserprofileedithost").removeClass("edithosthide");
                                }).animate({ left: ["+=1", "swing"] }).animate({ left: ["-=1", "swing"] });
                                $(".edituserprofileglyph").parent().removeClass("edithostfieldnameediting");
                                $elem.addClass("edithostfieldnameediting");
                                var currenteditfield = kodata.$data["fieldName"];
                                kodata.$parent["showTextArea"](true);
                                $("#userprofileedittextarea").val(kodata.$data[currenteditfield]());
                                xdc["contentmodelcolxn"]()[0]["showTextArea"](true);
                                var editvmx = xdc["contentmodelcolxn"]()[0]["editorVmx"];//is the observable...set it ()
                                editvmx(kodata.$data);//puts the current field stuff in the editor binding...
                                var cool = true;
                                pnlMgr.appPositionRefresh();
                                //$("#datuserprofileeditform").on("submit", function (ev) {
                                //    alert("is done");
                                //    $(".edituserprofileglyph").parent().removeClass("edithostfieldnameediting");

                                //});
                                //.animate({ height: ["-=3", "swing"] }).animate({ height: ["+=3", "swing"] })
                            });
                        },
                        hide: function () {
                            $("#userprofileimghost").off(self.xevent);
                            $("#userprofileimagesopener").off("change");
                            $(".edituserprofileglyph").addClass("edithosthide").parent().off(self.xevent).removeClass("edithostfieldnameediting");
                            //$("#datuserprofileeditform").off("submit");

                            $("#datuserprofileedithost").addClass("edithosthide");
                            xdc["contentmodelcolxn"]()[0]["showTextArea"](false);
                            xdc["contentmodelcolxn"]()[0]["editorVmx"](false);
                            $("#userprofileimghost").magnificPopup({
                                type: 'image'
                            });//restore magnificpopup
                            pnlMgr.appPositionRefresh();
                            return me;
                        },

                        save: function () {
                            var toInfoDxnry = function () {
                                var toUserProfileDescription = function () {
                                    //#region fieldDxnry
                                    var fieldDxnry = {
                                        "user_address_city": {
                                            placeholdertext: "City/Location...",
                                            "default": "anywhere..."
                                        },
                                        "user_loves": {
                                            placeholdertext: "what do you love?...",
                                            "default": "Loves..."
                                        },
                                        "user_recommends": {
                                            placeholdertext: "what do you recommend?...",
                                            "default": "Recommends..."
                                        },
                                        "user_nickname": {
                                            placeholdertext: "your nickname?...",
                                            "default": "Nickname..."
                                        },
                                        "user_work": {
                                            placeholdertext: "your work?...",
                                            "default": "Work..."
                                        },
                                        "user_team": {
                                            placeholdertext: "your team?...",
                                            "default": "Team..."
                                        },
                                        "user_school": {
                                            placeholdertext: "your school?...",
                                            "default": "School..."
                                        },
                                        "user_relationship": {
                                            placeholdertext: "your relationship status?...",
                                            "default": "Relationship..."
                                        }
                                    };
                                    //#endregion fieldDxnry
                                    var changedfieldsDxnry = {};
                                    try {
                                        var xrslt = xdc["contentmodelcolxn"]()[0];
                                        Enumerable.From(fieldDxnry).Where(function (xp) {
                                            return xrslt["EDITOBJ" + xp.Key] || false;
                                        }).ForEach(function (p) {
                                            var xeditobj = xrslt["EDITOBJ" + p.Key]();
                                            var toIsChanged = function () {
                                                var rslt = true;
                                                try {
                                                    rslt = !(xeditobj["fieldValue"] == xeditobj["vanillaValue"]());
                                                }
                                                catch (ex) { }
                                                return rslt;
                                            };
                                            if (toIsChanged()) {
                                                changedfieldsDxnry[p.Key] = xeditobj["vanillaValue"]();
                                            }
                                        });
                                        return changedfieldsDxnry;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        return false;
                                    }
                                };
                                return toUserProfileDescription();
                            };
                            var params = {
                                userInfoDict: toInfoDxnry()
                            };
                            var changes = Enumerable.From(params.userInfoDict).Count() || 0;
                            if (changes > 0) {
                                var the$box = $("#datcontroluserprofileeditbtn > div");
                                the$box.text("Saving...");
                                return prweb.parseManager.userProfileUpdate(params).then(function (xr) {
                                    //xdc["contentmodelcolxn"]()[0]["controlusername"];
                                    //cntrlMgr.control(prweb.datControlsUserProfile).panelprops()['username']("");
                                    var userprofilestuff = xdc;
                                    var xrslt = xdc["contentmodelcolxn"]()[0];
                                    Enumerable.From(params.userInfoDict).ForEach(function (p) {
                                        var xeditobj = xrslt["EDITOBJ" + p.Key]();
                                        xeditobj["fieldValue"] = xeditobj["vanillaValue"]()
                                    });
                                    pnlMgr.appPositionRefresh();
                                    return xr;
                                });
                            } else {
                                pnlMgr.appPositionRefresh();
                                return Parse.Promise.as(false);
                            }
                            
                        },
                        dispose: false
                    };
                    return me;
                };
                //#endregion datUserProfileEditor
                //#region datControlsUserProfile
                if (!ko.bindingHandlers.datControlsUserProfile) {
                    ko.bindingHandlers.datControlsUserProfile = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsUserProfile).panelprops()['username']("");
                            $("#datcontroluserprofilebackbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    var hiddenpnl = pnlMgr.hide(300).datacontext(false);
                                    //hiddenpnl.datacontext(false);
                                    var backtocntrlT = navMgr.me(prweb.datControlsUserProfile).returnfromlast();
                                    var btoTObj = navMgr.me(prweb.datUserProfile1).returnfromlast(true);
                                    cntrlMgr.showControl(backtocntrlT);//(prweb.datControls2);
                                    var toPnl = pnlMgr.show(200, btoTObj["T"]);
                                    toPnl.datacontext(btoTObj["properties"]["datacontext"]);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                            $("#datcontroluserprofileeditbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    var the$box = $("#datcontroluserprofileeditbtn > div");
                                    var hasdonealready = the$box.hasClass("datdoneuserprofile");
                                    var hassavedalready = the$box.hasClass("datsaveduserprofile");
                                    if (hassavedalready) {
                                        the$box.removeClass("datsaveduserprofile").text("Edit");
                                    } else {
                                        if (hasdonealready) {
                                            var pnl = pnlMgr.panel(prweb.datUserProfile1);
                                            //the$box.text("Saving...");
                                            return datUserProfileEditor(pnl).hide().save().then(function (xr) {
                                                if (xr) {
                                                    the$box.addClass("datsaveduserprofile").removeClass("datdoneuserprofile").text("Saved");
                                                } else {
                                                    the$box.removeClass("datsaveduserprofile").removeClass("datdoneuserprofile").text("Edit");
                                                }
                                                pnlMgr.appPositionRefresh();
                                            });
                                        } else {
                                            the$box.addClass("datdoneuserprofile").text("Done");
                                            var pnl = pnlMgr.panel(prweb.datUserProfile1);
                                            datUserProfileEditor(pnl).init();
                                        }
                                    }  
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsUserProfile
                //#region datUserProfile1
                if (!ko.bindingHandlers.datUserProfile1) {
                    ko.bindingHandlers.datUserProfile1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datUserProfile1, element).hide(0, prweb.datUserProfile1);
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"](minheight);
                                self._initiateMalihuScroll("scrollrootdatUserProfile1");
                                bindingContext.$data["pnl"] = pnl;
                                var url = prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile.url();
                                pnl.panelprops()['elementImage'](url);
                                var iscreateed = false;
                                var isfollowing = false;
                                pnl["createdfollowingtoggle"] = function (x1, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var dc = bindingContext.$data.contentmodelcolxn()[0];
                                    var rslt = false;
                                    var $e = $(e.currentTarget);
                                    iscreateed = $e.hasClass('datuserprofilecreatedbtn');
                                    isfollowing = $e.hasClass('datuserprofilefollowingbtn');
                                    if (iscreateed) {
                                        rslt = dc["dfeDxnry"]["CREATE"]();
                                        //$e.addClass('dattextwhite').removeClass('dattextgold');
                                    }
                                    if (isfollowing) {
                                        rslt = dc["dfeDxnry"]["FOLLOWING"]();
                                        //$e.addClass('dattextwhite').removeClass('dattextgold');
                                    }
                                    dc["datFeedElements"]([]);
                                    dc["datFeedElements"](rslt);
                                    //var scroptionshoriz = {
                                    //    axis: "x",
                                    //    theme: "minimal-dark"
                                    //};
                                    //self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1", scroptionshoriz);
                                };
                                //var scroptions = {
                                //    theme: "minimal-dark"
                                //};

                                //self._initiateMalihuScroll("scrollrootdatUserProfile1", scroptions);
                                
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datFeedFilter1.init reports catch exception... " + ex.Message);
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            if (dc != false) {
                                //#region populatecontentModelColxn - This does Cloud.loadMyDats
                                $("#datcontroluserprofileeditbtn").addClass("dathide");
                                //#region toObservableModel
                                var toUserProfileDescription = function (xrslt, xjcp) {
                                    //#region fieldDxnry
                                    var fieldDxnry = {
                                        "user_address_city": {
                                            placeholdertext: "City/Location...",
                                            "default": "anywhere..."
                                        },
                                        "user_loves": {
                                            placeholdertext: "what do you love?...",
                                            "default": "Loves..."
                                        },
                                        "user_recommends": {
                                            placeholdertext: "what do you recommend?...",
                                            "default": "Recommends..."
                                        },
                                        "user_nickname": {
                                            placeholdertext: "your nickname?...",
                                            "default": "Nickname..."
                                        },
                                        "user_work": {
                                            placeholdertext: "your work?...",
                                            "default": "Work..."
                                        },
                                        "user_team": {
                                            placeholdertext: "your team?...",
                                            "default": "Team..."
                                        },
                                        "user_school": {
                                            placeholdertext: "your school?...",
                                            "default": "School..."
                                        },
                                        "user_relationship": {
                                            placeholdertext: "your relationship status?...",
                                            "default": "Relationship..."
                                        }
                                    };
                                    //#endregion fieldDxnry
                                    try {
                                        Enumerable.From(xjcp).Where(function (xp) {
                                            return fieldDxnry[xp.Key] || false;
                                        }).ForEach(function (p) {
                                            var xdeflt = fieldDxnry[p.Key][p.Value] || false;
                                            var valordflt = xdeflt || p.Value;
                                            xrslt[p.Key] = ko.observable(valordflt);

                                            var xeditobj = {
                                                fieldName: p.Key,
                                                fieldValue: p.Value
                                            };
                                            xeditobj[p.Key] = ko.observable(valordflt);
                                            xeditobj["vanillaValue"] = xeditobj[p.Key];
                                            xeditobj["submitHandler"] = function (x, y, e) {
                                                alert("Submit YES");
                                            };
                                            Enumerable.From(fieldDxnry[p.Key]).ForEach(function (frow) {
                                                xeditobj[frow.Key] = frow.Value;
                                            });
                                            xrslt["EDITOBJ" + p.Key] = ko.observable(xeditobj);
                                        });
                                        xrslt["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        xrslt["showTextArea"] = ko.observable(false);
                                        xrslt["editorVmx"] = ko.observable();

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                };
                                var toObservableModel = function (xr) {
                                    var rslt = {};
                                    var jcp = xr.consumerprofile.toJSON();
                                    toUserProfileDescription(rslt, jcp);
                                    rslt["profile"] = ko.observable(jcp);
                                    rslt["datprofile"] = ko.observable(xr.datprofile);
                                    rslt["datFeedElements"] = ko.observableArray(xr.datprofile.datsColxn.datFeedElements);
                                    rslt["dfecolxnshared"] = ko.observableArray();
                                    rslt["dfeDxnry"] = {
                                        CREATE: ko.observableArray(xr.datprofile.datsColxn.datFeedElements),
                                        FOLLOWING: ko.observableArray(),
                                        SHARED: ko.observableArray()
                                    };

                                    rslt["usermetadata"] = ko.observable(xr.usermetadata);
                                    //var xuserurl = xr.datprofile.datsColxn.datFeedElements[0].datOwner.url();
                                    var xuserurl = prweb.toOwnerImgUrl(xr.userOwner.owner);
                                    //var xup = xuser.fetch();//get('user_photo');
                                    rslt["userphoto"] = ko.observable(xuserurl);
                                    //rslt["user_address_city"] = ko.observable(jcp["user_address_city"]);
                                    //rslt["user_loves"] = ko.observable(jcp["user_loves"]);
                                    //rslt["user_recommends"] = ko.observable(jcp["user_recommends"]);
                                    //rslt["user_nickname"] = ko.observable(jcp["user_nickname"]);
                                    //rslt["user_work"] = ko.observable(jcp["user_work"]);
                                    //rslt["user_team"] = ko.observable(jcp["user_team"]);
                                    //rslt["user_school"] = ko.observable(jcp["user_school"]);
                                    //rslt["user_relationship"] = ko.observable(jcp["user_relationship"]);
                                    rslt["datscreated"] = ko.observable("'dats Created: " + xr.usermetadata.datscreated);
                                    rslt["datsshared"] = ko.observable("'dats Shared: " + xr.usermetadata.datsshared);
                                    rslt["followers"] = ko.observable("followers: " + xr.usermetadata.followers);
                                    rslt["follows"] = ko.observable("follows: " + 0);
                                    var username = xr.userOwner.userName || "";
                                    rslt["controlusername"] = username;
                                    //cntrlMgr.control(prweb.datControlsUserProfile).panelprops()['username'](username);
                                    return rslt;
                                };
                                //#endregion
                                //#region Cloude.getUserProfile 
                                var datacontext = bindingContext.$data.datacontext();//established by the method that adds this panel...see backbtn on controlsuserprofile...or datfeedelem datowner icon button tap handler...
                                var toUserId = function () {
                                    var rslt = false;
                                    var userid = datacontext;
                                    try {
                                        if (datacontext.hasOwnProperty("profile")) {
                                            self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                            self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                            var username = datacontext["controlusername"] || "";
                                            var cntrl = cntrlMgr.control(prweb.datControlsUserProfile) || false;
                                            if (cntrl) {
                                                cntrl.panelprops()['username'](username);
                                                var xuserid = bindingContext.$data["userprofile"]["userOwner"]["userId"] || false;
                                                var yuserid = Parse.User.current()["id"] || false;
                                                if (xuserid == yuserid) {
                                                    $("#datcontroluserprofileeditbtn").removeClass("dathide");
                                                } else {
                                                    $("#datcontroluserprofileeditbtn").addClass("dathide");
                                                }
                                            } else {
                                                var dunno = true;
                                            }
                                            //userid = datacontext["profile"]["userPointer"]["objectId"] || false;
                                        } else {
                                            rslt = userid;
                                            return prweb.parseManager.getUserProfile(userid).then(function (xr) {
                                                var xrslt = xr || false;
                                                var cmodel = {};
                                                if (xr) {
                                                    bindingContext.$data["userprofile"] = xr;
                                                    cmodel = toObservableModel(xr);
                                                    try{
                                                        bindingContext.$data.contentmodelcolxn([cmodel]);
                                                    }
                                                    catch(ex){
                                                        var wtf = true;
                                                    }

                                                    self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                                    self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                                    var username = cmodel["controlusername"] || "";
                                                    var cntrl = cntrlMgr.control(prweb.datControlsUserProfile) || false;
                                                    if (cntrl) {
                                                        $("#datcontroluserprofileeditbtn").addClass("dathide");
                                                        cntrl.panelprops()['username'](username);
                                                        //var xuserid = bindingContext.$data["userprofile"]["userOwner"]["userId"] || false;
                                                        //var yuserid = Parse.User.current()["id"] || false;
                                                        //if (xuserid == yuserid) {
                                                        //    $("#datcontroluserprofileeditbtn").removeClass("dathide");
                                                        //}
                                                    } else {
                                                        var dunno = true;
                                                    }
                                                } else {
                                                    //bindingContext.$data.datacontext({});
                                                }

                                                var fltrproms = [];
                                                fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "FOLLOWING"));
                                                fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "SHARED"));
                                                //fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "CREATED"));
                                                return Parse.Promise.when(fltrproms).then(function (rslt) {
                                                    try {
                                                        if (rslt[1]) {
                                                            var dfe1 = rslt[1].datsColxn || false;
                                                            if (dfe1) {
                                                                var f1 = [];
                                                                f1 = dfe1.datFeedElements || [];
                                                                cmodel["dfecolxnshared"](f1);
                                                            } else {
                                                                cmodel["dfecolxnshared"]([]);
                                                                cmodel["dfeDxnry"]["SHARED"]([]);
                                                            }
                                                        }//I think this order of encountering rslt and populating dfeDxnry is required...don't change it...
                                                        if (rslt[0]) {
                                                            var dfe0 = rslt[0].datsColxn || false;
                                                            if (dfe0) {
                                                                var f0 = [];
                                                                f0 = dfe0.datFeedElements || [];
                                                                cmodel["dfeDxnry"]["FOLLOWING"](f0);
                                                            } else {
                                                                cmodel["dfeDxnry"]["FOLLOWING"]([]);
                                                            }
                                                        }
                                                        //var username = cmodel["controlusername"] || "";
                                                        var cntrl = cntrlMgr.control(prweb.datControlsUserProfile) || false;
                                                        if (cntrl) {
                                                            //cntrl.panelprops()['username'](username);
                                                            var xuserid = bindingContext.$data["userprofile"]["userOwner"]["userId"] || false;
                                                            var yuserid = Parse.User.current()["id"] || false;
                                                            if (xuserid == yuserid) {
                                                                $("#datcontroluserprofileeditbtn").removeClass("dathide");
                                                            }
                                                        } else {
                                                            var dunno = true;
                                                        }
                                                        //bindingContext.$data.contentmodelcolxn([cmodel]);
                                                        //bindingContext.$data.datacontext(cmodel);
                                                        //self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                                        //self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                        self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                                        self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                                    }

                                                    //bindingContext.$data.datacontext()["dfeDxnry"]["CREATE"](f2);

                                                    return true;

                                                }).fail(function (ex) {
                                                    var oops = true;
                                                    self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                                    self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                                });

                                            }).fail(function (ex) {
                                                var oops = true;
                                                self._initiateMalihuScrollhoriz("scrollrootdatuserprofile1");
                                                self._initiateMalihuScrollhoriz("scrollrootdatuserprofile2");
                                            });
                                        }
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }



                                    //return rslt;
                                };
                                toUserId();

                                //#endregion
                                //#endregions
                            }
                            else {
                                bindingContext.$data.contentmodelcolxn([]);
                            }
                        }
                    };
                };
                if (!ko.bindingHandlers.datUserProfileDescript1) {
                    ko.bindingHandlers.datUserProfileDescript1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var x = bindingContext.$data;
                            var yes = true;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {

                        }
                    };
                };
                //#region datUserProfileElem1
                if (!ko.bindingHandlers.datUserProfileElem1) {
                    ko.bindingHandlers.datUserProfileElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {

                            var toElementImage = function (dat) {
                                var rslt = false;
                                try {
                                    switch (true) {
                                        case (dat.datType == 1 || dat.datType == 11 || dat.datType == 12):
                                            var imgj = dat.winner.elementImage;//.toJSON();
                                            rslt = imgj.url() || img.url;
                                            break;
                                        case (dat.datType == 2):
                                            var imgj = dat.otherdcelems[0].elementImage;//.toJSON();
                                            rslt = imgj.url() || img.url;
                                            break;
                                        case (dat.datType == 3):
                                            var imgj = dat.otherdcelems[0].elementImage;//.toJSON();
                                            rslt = imgj.url() || img.url;
                                            break;
                                    }
                                }
                                catch (ex) {
                                    var yyy = dat.datOwner.toJSON();
                                    var imgj = yyy;
                                    rslt = imgj.url;
                                    var x = true;
                                }

                                return rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;

                            };
                            bindingContext.$data["datpictureurl"] = toElementImage(bindingContext.$data);
                            var dfe = bindingContext.$data;
                            
                            //bindingContext should have a property .datcountableitemVmx
                            //lets make it observable...
                            bindingContext.$data["datcountableitemVmx"] = ko.observable();
                            //now lets populate it...
                            //pageplayer gives us the content...same as in datResponseFeedElem1...except we are doing results..
                            ///AND...results is what we use/get on datSingle1!!!!!!! we just call init with a datfeedElem...gives us a result....
                            bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                            var xcolxn = bindingContext.$data["datPageEntry"].init(bindingContext.$data);
                            // there are different kind of dats...they have different html...rates/sentiments....
                            //so feedElem needs to have html that allows both...and a Vmx too....
                            var rateiscircle = bindingContext.$data.countables[0].isCircle || false;
                            xcolxn[0]["isCircle"] = ko.observable(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                            xcolxn[0]["isNotCircle"] = ko.observable(!rateiscircle);
                            xcolxn[0]["datcountableitemholder"] = ko.observableArray(),
                            xcolxn[0]["widgetizedatCountableItemResults"] = function (elem, model) {
                                var mymodel = ko.dataFor(elem[1]);
                                var T = "." + "datcountableitem";
                                var echild = $(T, $(elem[1]));
                                ko.applyBindings(mymodel, echild[0]);
                                return;
                            };
                            bindingContext.$data["datcountableitemVmx"](xcolxn[0]);
                            var yes = true;
                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            bindingContext.$data["tapDatFeedelemnt"] = function (x, e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                datSingleContextMgr(prweb.datUserProfile1).navigateTo(dfe);
                                
                            };

                            //#endregion
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var datable = bindingContext.$data["datcountableitemVmx"]();
                            var makedatcountableitemholder = function () {
                                var pnlpresenterT = datable.modelcore.presenterT;
                                //this viewmodel is ko.apply() in the panel panelentry?... it is a method named ?
                                var vmx = [{
                                    presenterT: "",
                                    responseImage: ko.observable(),
                                    html: ko.observable(),
                                    datRateShrink1: ko.observable(),
                                    datSentimentShrink1: ko.observable(),
                                    datCompareShrink1: ko.observable()
                                }];
                                if (pnlpresenterT == "datRate1") {
                                    //var modeparams = {
                                    //    countable: dce,
                                    //    elementIndex: dce.elementIndex
                                    //};
                                    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data);//, modeparams);
                                    vmx[0].html(prweb.pCElemHtmlDxnry["datRateShrink1"].resourceModel);
                                    vmx[0].datRateShrink1(newvmx[0]);
                                } else if (pnlpresenterT == "datSentiment1") {
                                    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data);
                                    //cmdl.responseImage(dce.emoji);
                                    vmx[0].html(prweb.pCElemHtmlDxnry["datSentimentShrink1"].resourceModel);
                                    vmx[0].datSentimentShrink1(newvmx[0]);
                                    var xyes = datable;// set the vmx so that classes attach to the html...in bindings...hide or show emoji etc...
                                } else if (pnlpresenterT == "dat5" || pnlpresenterT == "dat115" || pnlpresenterT == "dat125") {
                                    vmx[0].html(prweb.pCElemHtmlDxnry["datCompareShrink1"].resourceModel);
                                    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data);
                                    var winner = Enumerable.From(newvmx).MaxBy(function (r) {
                                        return r.modelcore.responseCount();
                                    }).modelcore.responsePercent();
                                    vmx[0].datCompareShrink1({ responsePctStr: ko.observable(winner) });
                                }
                                return vmx;
                            };
                            datable["datcountableitemholder"](makedatcountableitemholder());
                            var yes = true;
                        }
                    };
                };
                //#endregion
                //#endregion datUserProfile1


                //#region datControlsShareDetail1
                if (!ko.bindingHandlers.datControlsShareDetail1) {
                    ko.bindingHandlers.datControlsShareDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsShareDetail1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsShareDetail1).panelprops()['selected'] = ko.observable("Selected: 0");
                            $("#datcontrolssharedetailbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                cntrlMgr.showControl(prweb.datControlsShare1);
                                pnlMgr.hide(300).datacontext(false);
                                pnlMgr.show(0, prweb.datShare1);
                                //pnlMgr.removePanel(prweb.datShareDetail1);
                            });
                            $("#datsharedetaildonebtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                cntrlMgr.showControl(prweb.datControlsShare1);
                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datShare1);
                                pnlMgr.panel(prweb.datShareDetail1).datacontext(false);
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsShareDetail1
                //#region datShareDetail1
                if (!ko.bindingHandlers.datShareDetail1) {
                    ko.bindingHandlers.datShareDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datShareDetail1, element).hide(0, prweb.datShareDetail1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsShareDetail1);
                                //pnl.datacontext(true);
                            };
                            pnl["ISGROUPS"] = ko.observable(false);
                            pnl["ISUSERS"] = ko.observable(false);
                            //var scroptions = {
                            //    theme: "minimal-dark",
                            //    callbacks: {
                            //        onTotalScrollOffset: 1200,
                            //        onTotalScroll: function () {
                            //            var skipval = cmodelarray.length || 0;
                            //            return getGroups();
                            //        }
                            //    }
                            //}
                            self._initiateMalihuScroll("scrollrootdatShareDetail1");//, scroptions);

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            //dc contains the groupmodel sent in getGroups...
                            if (dc !== false) {
                                
                                var cmodelarray = [];
                                var userCmodel = function (userrow) {
                                    try {
                                        var toUserFollowers = function (ur) {
                                            var rslt = false;
                                            try {
                                                rslt = ko.observable("No Followers");
                                                var xval = ur.followers || false;
                                                if (xval) {
                                                    rslt(xval + " Followers");
                                                }
                                            }
                                            catch (ex) { var wtf = false }
                                            return rslt;
                                        };
                                        var toUserPhoto = function (ur) {
                                            var rslt = false;
                                            try {
                                                var defurl = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                                rslt = ko.observable(defurl);
                                                if (ur.owner) {
                                                    var xurl = ur.owner.url() || ur.owner.url || false;
                                                    if (xurl) {
                                                        rslt(xurl);
                                                    }
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = ex.message;
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datShareDetailElem1",
                                            userID: userrow.userId || false,
                                            selector: ko.observable(false),
                                            userName: userrow.userName,
                                            userFollowers: toUserFollowers(userrow),
                                            userPhotoUrl: toUserPhoto(userrow)
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        return false;
                                    }
                                };
                                var cmodel = function (m) {
                                    try {
                                        var imgurl = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                        if (m.groupImage) {
                                            try {
                                                imgurl = m.groupImage.url() || prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            }
                                            catch (ex) {

                                            }
                                        }
                                        
                                        var toMembersCountText = function () {
                                            return "Members: " + m.groupdetails["Members"]
                                        };
                                        var toMembershipStatusText = function () {
                                            var isOriginator = m.groupdetails["ORIGINATOR"].length > 0;
                                            var isInvited = m.groupdetails["INVITED"].length > 0;
                                            var rslt = "Invited";

                                            if (isOriginator) {
                                                rslt = "Owner";
                                            } else {
                                                var isMember = m.groupdetails["MEMBERS"].length > 0;
                                                if (isMember) {
                                                    rslt = "Member";
                                                }
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datGroupsElem1",
                                            selector: ko.observable(false),
                                            groupId: m.groupId,
                                            groupDetails: m.groupdetails,
                                            groupImageId: m.groupImageId,
                                            elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                            menuTextA: ko.observable(m.groupName),
                                            menuTextB: ko.observable(toMembershipStatusText()),
                                            menuTextC: ko.observable(toMembersCountText()),
                                            stay: m["stay"] || false,
                                            method: m.method
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        return false;
                                    }

                                };
                                var pnl = pnlMgr.panel(prweb.datShareDetail1);
                                var addAdditionalRowsToContentModelColxn = function () {
                                    pnl.contentmodelcolxn(cmodelarray);
                                };
                                var eventSourceDxnry = {
                                    "everyone": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            var getUserDatFriends = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserDatFriends(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserDatFriends();
                                        }
                                    },
                                    "groups": {
                                        method: function () {
                                            pnl["ISGROUPS"](true);
                                            pnl["ISUSERS"](false);
                                            var getGroups = function () {
                                                var parms = {
                                                    groupid: false,
                                                    xfilter: false,
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getGroups(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = cmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getGroups();
                                        }
                                    },
                                    "followers": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            var getUserIsFollowedByList = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserIsFollowedByList(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserIsFollowedByList();
                                        }
                                    },
                                    "following": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            var getUserIsFollowingList = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserIsFollowingList(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserIsFollowingList();
                                        }
                                    }
                                };
                                try {
                                    return eventSourceDxnry[dc.$data.eventsource].method();
                                }
                                catch (ex) { var wtf = true; }
                            } else {
                                pnlMgr.panel(prweb.datShareDetail1).contentmodelcolxn([]);
                            }
                        }
                    };
                };
                if (!ko.bindingHandlers.datShareDetailElem1) {
                    ko.bindingHandlers.datShareDetailElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            var array = [];
                            var manageSelected = function (context) {
                                var toAction = function (xid) {
                                    var rslt = [];
                                    if (context.action == "remove") {
                                        rslt = Enumerable.From(array).Except([xid]).ToArray();
                                    } else if (context.action == "add") {
                                        rslt = Enumerable.From(array).Concat([xid]).ToArray();
                                    }
                                    return rslt;
                                }
                                if (context.userID) {
                                    array = bindingContext.$parent.datacontext()["$data"]["selectedUserIDColxn"];
                                    bindingContext.$parent.datacontext()["$data"]["selectedUserIDColxn"] = toAction(context.userID);
                                } else if (context.groupID) {
                                    array = bindingContext.$parent.datacontext()["$data"]["selectedGroupIDColxn"];
                                    bindingContext.$parent.datacontext()["$data"]["selectedGroupIDColxn"] = toAction(context.groupID);
                                }
                            };
                            $elem.on(self.xevent, function (x, e) {
                                try {
                                    var selection = {
                                        userID: bindingContext.$data["userID"] || false,
                                        groupID: bindingContext.$data["groupId"] || false,
                                        action: false
                                    };
                                    var xval = bindingContext.$data["selector"]();
                                    bindingContext.$data["selector"](!xval);
                                    var selcount = bindingContext.$parent.datacontext()["$data"]["selectedCount"]();
                                    if (xval) {
                                        selcount -= 1;
                                        selection.action = "remove";
                                    } else {
                                        selcount += 1;
                                        selection.action = "add";
                                    }
                                    cntrlMgr.control(prweb.datControlsShareDetail1).panelprops()['selected']("Selected: " + selcount);
                                    bindingContext.$parent.datacontext()["$data"]["selectedCount"](selcount);
                                    manageSelected(selection);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                //var pnl = pnlMgr.addPanel(prweb.datGroupsDetail1);
                                //pnl.datacontext(bindingContext.$data);
                                //pnlMgr.hide(200, prweb.datGroups1);
                                //pnlMgr.show(300, prweb.datGroupsDetail1);
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datShare1

                //#region datControlsShare1
                if (!ko.bindingHandlers.datControlsShare1) {
                    ko.bindingHandlers.datControlsShare1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            var toSelectedUsersCount = function () {
                                var rslt = "Share";
                                try {
                                    var sharepnl = pnlMgr.panel(prweb.datShare1) || false;
                                    if (sharepnl) {
                                        var colxnofrows = sharepnl.contentmodelcolxn();//["$data"];//["selectedCount"]();
                                        var cnt = Enumerable.From(colxnofrows).Sum(function (r) {
                                            return r["selectedCount"]();
                                        });
                                        if (cnt > 0) {
                                            rslt = "Share to " + cnt + " users/groups";
                                        }
                                    }

                                }
                                catch (ex) { var wtf = true; }

                                return rslt;
                            };
                            cntrlMgr.control(prweb.datControlsShare1).panelprops()['username'](toSelectedUsersCount());
                            var shareExecute = function () {
                                try {
                                    var paramprops = ["groups", "datFriends", "datObjectId"];
                                    var pnl = pnlMgr.panel(prweb.datShare1);
                                    var datid = function () {
                                        var rslt = false;
                                        try {
                                            if (pnl.datacontext()["$data"]) {
                                                if (pnl.datacontext()["$data"]["datcomplete"]) {
                                                    rslt = pnl.datacontext()["$data"]["datcomplete"]["objectId"] || false;
                                                } else {
                                                    var singlepnl = pnlMgr.panel(prweb.datSingle1);
                                                    rslt = singlepnl["datcomplete"]["objectId"] || false;
                                                }
                                            } else {
                                                var whoknows = true;
                                            }
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    }; 
                                    var userids = function () {
                                        var rslt = [];
                                        try {
                                            rslt = Enumerable.From(pnl.contentmodelcolxn())
                                                 .SelectMany(function (r) {
                                                     return r.selectedUserIDColxn;
                                                 }).Distinct().ToArray();
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    }
                                    var groupids = function () {
                                        var rslt = [];
                                        try {
                                            rslt = Enumerable.From(pnl.contentmodelcolxn())
                                                 .SelectMany(function (r) {
                                                     return r.selectedGroupIDColxn;
                                                 }).Distinct().ToArray();
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    };  
                                    var parms = {
                                        "datFriends": userids(),
                                        "groups": groupids(),
                                        "datObjectId": datid()
                                    }
                                    return prweb.parseManager.shareDat(parms).then(function (xr) {
                                        return xr;
                                    });
                                }
                                catch (ex) {
                                    return Parse.Promise.as(false);
                                }

                            };
                            $("#datcontrolssharebackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var xbc = bindingContext;
                                var cbackto = navMgr.me(prweb.datControlsShare1).returnfromlast();
                                //var backto = cntrlMgr.control(prweb.datControlsShare1).backtoT() || prweb.datControlsRightMenu1;
                                cntrlMgr.showControl(cbackto);
                                pnlMgr.hide(300);
                                var backto = navMgr.me(prweb.datShare1).returnfromlast();
                                pnlMgr.show(0, backto);
                                //if (backto == prweb.datControlsRightMenu1) {
                                //    pnlMgr.show(200, prweb.datRightMenu1);
                                //} else {
                                //    pnlMgr.show(200, prweb.datSingle1);
                                //}
                                pnlMgr.panel(prweb.datShare1).datacontext(false);
                            });
                            $("#datsharedonebtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                if (navMgr.DxnryT[prweb.datShare1].sources[0]["T"] == prweb.datSingleEditor1) {
                                    var sourcepnl = pnlMgr.panel(prweb.datSingleEditor1);
                                    return sourcepnl["datSingleEditSvc"].postDat().then(function (xr) {
                                        var cbackto = navMgr.me(prweb.datControlsShare1).returnfromlast();//clears the lastsource...always go back to datFeed1
                                        cntrlMgr.showControl(prweb.datControls2);
                                        pnlMgr.hide(300);
                                        navMgr.me(prweb.datShare1).returnfromlast();//clears the lastsource...always go back to SingleDat1
                                        pnlMgr.show(200, prweb.datFeed1);
                                        return shareExecute().then(function (xxr) {
                                            return pnlMgr.panel(prweb.datShare1).datacontext(false);
                                        }).fail(function (ex) {
                                            alert("Oops...something went wrong...");
                                            return pnlMgr.panel(prweb.datShare1).datacontext(false);
                                            
                                        });
                                    });
                                } else {
                                    var cbackto = navMgr.me(prweb.datControlsShare1).returnfromlast();//clears the lastsource...always go back to SingleDat1
                                    cntrlMgr.showControl(prweb.datControlsSingleDat1);
                                    pnlMgr.hide(300);
                                    navMgr.me(prweb.datShare1).returnfromlast();//clears the lastsource...always go back to SingleDat1
                                    pnlMgr.show(200, prweb.datSingle1);
                                    return shareExecute().then(function (xr) {
                                       return pnlMgr.panel(prweb.datShare1).datacontext(false);
                                    }).fail(function (ex) {
                                        alert("Oops...something went wrong...");
                                        return pnlMgr.panel(prweb.datShare1).datacontext(false);
                                        
                                    });
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsShare1
                //#region datShare1
                if (!ko.bindingHandlers.datShare1) {
                    ko.bindingHandlers.datShare1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datShare1, element).hide(0, prweb.datShare1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatShare1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsShare1);
                            };
                            var cmodelarray = [];
                            var cmodel = function (mkey) {
                                try {
                                    var m = mkey.Value;
                                    var that = {
                                        eventsource: mkey.Key,
                                        selectedCount: ko.observable(0),
                                        selectedUserIDColxn: [],
                                        selectedGroupIDColxn: [],
                                        presenterT: "datShareElem1",
                                        elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                        menuTextA: ko.observable(m.labels[0]),
                                        menuTextB: ko.observable(m.labels[1]),
                                        menuTextC: ko.observable("this is menutextC"),
                                        stay: m["stay"] || false,
                                        method: m.method
                                    };
                                    return that;
                                }
                                catch (ex) {
                                    return false;
                                }

                            };
                            var sharecomponents = {
                                'everyone': {
                                    method: function (context) {
                                        //cntrlMgr.showControl(prweb.datControls2);
                                        try {
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            //pnlMgr.show(prweb.datShareDetail1);
                                            var pnl = pnlMgr.show(0, prweb.datShareDetail1).backtoT(prweb.datShare1);
                                            pnl.datacontext(context);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Everyone", "Everyone on 'dat..."],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url(),
                                },
                                'groups': {
                                    method: function (context) {
                                        try {
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            //pnlMgr.show(prweb.datShareDetail1);
                                            var pnl = pnlMgr.show(0, prweb.datShareDetail1).backtoT(prweb.datShare1);
                                            pnl.datacontext(context);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Groups", "Your groups"],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url(),
                                },
                                'followers': {
                                    method: function (context) {
                                        try {
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            //pnlMgr.show(prweb.datShareDetail1);
                                            var pnl = pnlMgr.show(0, prweb.datShareDetail1).backtoT(prweb.datShare1);
                                            pnl.datacontext(context);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Followers", "The people that follow your 'dats"],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                },
                                'following': {
                                    method: function (context) {
                                        try {
                                            //self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            //pnlMgr.show(prweb.datShareDetail1);
                                            var pnl = pnlMgr.show(0, prweb.datShareDetail1).backtoT(prweb.datShare1);
                                            pnl.datacontext(context);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Following", "The people you follow..."],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                },
                                'message': {
                                    method: function (context) {
                                        try {
                                            var imgobjectid = false;//"P2GSrO2Oqa";
                                            var todc = function () {
                                                var rslt = false;
                                                try {
                                                    var xd = context.$parent.datacontext().$data;//.datcomplete;
                                                    var xdd = xd.datcomplete || false;
                                                    if (xdd == false) {
                                                        xdd = xd.datacontext().datcomplete || false;
                                                    }
                                                    rslt = xdd;
                                                }
                                                catch (ex) {

                                                }
                                                return rslt;
                                            };
                                            var datcomplete = todc();//context.$parent.datacontext().$data.datcomplete;
                                            var magicDceObjectId = function () {
                                                var rslt = false;
                                                try {
                                                    var toDceId = function () {
                                                        if (datcomplete.datType == "11") {
                                                            var countables = datcomplete.countables || false;
                                                            if (countables) {
                                                                rslt = countables[0].objectId;
                                                            }
                                                        } else if (datcomplete.datType == "1" || datcomplete.datType == "12") {
                                                            rslt = datcomplete.winner.objectId || false;
                                                        } else {
                                                            var maybe = datcomplete.otherdcelems[0] || false;
                                                            if (maybe) {
                                                                rslt = maybe.objectId || "0HdwTVR5dX";
                                                            } else {
                                                                rslt = datcomplete.winner.objectId || false;
                                                            }
                                                        }
                                                    };
                                                    toDceId();
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                
                                                return rslt;
                                            };
                                            var datid = datcomplete.objectId;
                                            var params = {
                                                updateTarget: "",
                                                datObjectId: datid || false,
                                                inviteImageObjectId: imgobjectid || false,
                                                magicDceObjectId: magicDceObjectId() || false,
                                                groupId: context.groupId || "ehI6i13kqf" || false
                                            };
                                            prweb.parseManager.getDatInviteUrl(params).then(function (xr) {
                                                var hmm = xr;
                                                
                                                var xhmm = hmm.replace("datmoments.com", "192.168.1.14:31998");
                                                var xxhmm = xhmm.replace("dat-app", "datpad");
                                                var magic = "sms:&body=" + xxhmm;
                                                alert(xxhmm);
                                                alert(magic);
                                                window.location.href = magic;
                                                //window.open(magic, "_blank");
                                            }).fail(function (ex) {
                                                var wtf = true;
                                            })
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Message", "Send message with link"],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                },
                                'mail': {
                                    method: function (context) {
                                        try {
                                            var imgobjectid = false;//"P2GSrO2Oqa";
                                            var todc = function () {
                                                var rslt = false;
                                                try {
                                                    var xd = context.$parent.datacontext().$data;//.datcomplete;
                                                    var xdd = xd.datcomplete || false;
                                                    if (xdd == false) {
                                                        xdd = xd.datacontext().datcomplete || false;
                                                    }
                                                    rslt = xdd;
                                                }
                                                catch (ex) {

                                                }
                                                return rslt;
                                            };
                                            var datcomplete = todc();//context.$parent.datacontext().$data.datcomplete;
                                            var magicDceObjectId = function () {
                                                var rslt = false;
                                                try {
                                                    var toDceId = function () {
                                                        if (datcomplete.datType == "11") {
                                                            var countables = datcomplete.countables || false;
                                                            if (countables) {
                                                                rslt = countables[0].objectId;
                                                            }
                                                        } else if (datcomplete.datType == "1" || datcomplete.datType == "12") {
                                                            rslt = datcomplete.winner.objectId || false;
                                                        } else {
                                                            var maybe = datcomplete.otherdcelems[0] || false;
                                                            if (maybe) {
                                                                rslt = maybe.objectId || "0HdwTVR5dX";
                                                            } else {
                                                                rslt = datcomplete.winner.objectId || false;
                                                            }
                                                        }
                                                    };
                                                    toDceId();
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }

                                                return rslt;
                                            };
                                            var datid = datcomplete.objectId;
                                            var params = {
                                                updateTarget: "",
                                                datObjectId: datid || false,
                                                inviteImageObjectId: imgobjectid || false,
                                                magicDceObjectId: magicDceObjectId() || false,
                                                groupId: context.groupId || "ehI6i13kqf" || false
                                            };
                                            prweb.parseManager.getDatInviteUrl(params).then(function (xr) {
                                                var hmm = xr;
                                                //var ashtml = '<a href="' + hmm + '">Link to dat</a>';
                                                var magic = "mailto:?body=" + hmm;// + "<br>" + ashtml;
                                                
                                                window.location.href = magic;
                                            }).fail(function (ex) {
                                                var wtf = true;
                                            })
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                    labels: ["Mail", "Send mail with link"],
                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                }
                            };
                            var makemenuelem = function (xm) {
                                var xcm = cmodel(xm);
                                if (xcm) {
                                    cmodelarray.push(xcm);
                                }
                                return true;
                            };
                            Enumerable.From(sharecomponents).ForEach(function (m) { return makemenuelem(m) });
                            
                            pnl.contentmodelcolxn(cmodelarray);
                            //self._initiateMalihuScroll("scrollrootdatShare1");
                            //$("#datbackgroupsbtn").bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    pnlMgr.hide(0, prweb.datGroups1);
                            //});

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            try {
                                if (!dc) {
                                    Enumerable.From(bindingContext.$data.contentmodelcolxn()).ForEach(function (component) {
                                        try {
                                            component.selectedCount(0);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    });
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                if (!ko.bindingHandlers.datShareElem1) {
                    ko.bindingHandlers.datShareElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            $elem.on(self.xevent, function (x, e) {
                                try {
                                    bindingContext.$data["method"](bindingContext);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datShare1


                //#region datWebView1
                if (!ko.bindingHandlers.datWebView1) {
                    ko.bindingHandlers.datWebView1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datWebView1, element).hide(0, prweb.datWebView1);
                            var dc = "https://cnn.com";//bindingContext.$data["datacontext"]() || false;
                            var isseestory = dc || false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            //$("#datbackmenubtn").bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    pnlMgr.closeMenu(prweb.datWebView1);
                            //});
                            var cmodelarray = [];
                            var cmodel = function (m) {
                                var that = {
                                    presenterT: "datWebViewElem1",
                                    seeStoryUrl: ko.observable(isseestory),
                                    elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                    menuTextA: ko.observable(m.labels[0]),
                                    menuTextB: ko.observable(m.labels[1]),
                                    menuTextC: ko.observable("this is menutextC"),
                                    stay: m["stay"] || false,
                                    method: m.method
                                };
                                return that;
                            };
                            var populatecontentmodelcolxn = function () {
                                var menuitems = {
                                    'mydats': {
                                        method: function () {
                                            cntrlMgr.showControl(prweb.datControls2);
                                            self.appManager.toFullScreen();
                                            pnlMgr.hide(300);
                                            pnlMgr.show(0, prweb.datFeed1);
                                        },
                                        labels: ["My 'Dats", "See your 'dats"],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url(),
                                    }
                                };
                                var makemenuelem = function (xm) {
                                    var xcm = cmodel(xm.Value);
                                    cmodelarray.push(xcm);
                                    return true;
                                };
                                Enumerable.From(menuitems).ForEach(function (m) { return makemenuelem(m) });
                                pnl.contentmodelcolxn(cmodelarray);
                            };
                            populatecontentmodelcolxn();
                            self._initiateMalihuScroll("scrollrootdatWebView1");
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                if (!ko.bindingHandlers.datWebViewElem1) {
                    ko.bindingHandlers.datWebViewElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            $elem.bind(self.xevent, function () {
                                //if (bindingContext.$data["stay"]) {
                                //    bindingContext.$data.method();
                                //} else {
                                //    pnlMgr.navigateMenuClick(bindingContext.$data.method, prweb.datMenu1);
                                //    self.appManager.navigateMenuClick($elem);
                                //}
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datMenu1

                //#region datControlsRightMenu1
                if (!ko.bindingHandlers.datControlsRightMenu1) {
                    ko.bindingHandlers.datControlsRightMenu1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var xr = self["userProfile"] || false;
                            if (xr) {
                                var username = xr.userOwner.userName || "";
                                cntrlMgr.control(prweb.datControlsRightMenu1).panelprops()['username'](username);
                            }
                            
                            $("#datcontrolsrightmenubackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                datSingleContextMgr(prweb.datRightMenu1).returnFrom();
                                //use the datSingleContextMgr(prweb.datRightMenu1).returnFrom() here instead of pnlmgr.show....
                                //the menu methods, populate datSingleContextMgr.refreshedDfe...makes datSingle1 current...
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsRightMenu1
                //#region datRightMenu1
                if (!ko.bindingHandlers.datRightMenu1) {
                    ko.bindingHandlers.datRightMenu1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datRightMenu1, element).hide(0, prweb.datRightMenu1);
                            pnl.controlT = prweb.datControlsRightMenu1;
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatRightMenu1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsRightMenu1);
                            };
                            //self._initiateMalihuScroll("scrollrootdatRightMenu1");
                            //cntrlMgr.showControl(prweb.datControlsRightMenu1);
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var dc = bindingContext.$data.datacontext() || false;
                                if (dc) {
                                    var singledc = {};
                                    if (dc.presenterT == "datCommentElem1") {
                                        singledc = dc.pnl.datacontext();
                                    } else {
                                        singledc = dc.datacontext();
                                    }

                                    var pnl = pnlMgr.panel(prweb.datRightMenu1);
                                    var cmodelarray = [];
                                    var cmodel = function (m) {
                                        var that = {
                                            presenterT: "datRightMenuElem1",
                                            elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                            menuTextA: ko.observable(m.labels[0]),
                                            menuTextB: ko.observable(m.labels[1]),
                                            menuTextC: ko.observable("this is menutextC"),
                                            stay: m["stay"] || false,
                                            init: m.init || false,
                                            method: m.method
                                        };
                                        return that;
                                    };
                                    var populatecontentmodelcolxn = function () {
                                        //#region menuDxnry
                                        var toMenuItemDataContext = function () {
                                            var rslt = {};
                                            rslt["isShareable"] = singledc["isShareable"];
                                            return rslt;
                                        };
                                        var tomenuitems = function (mclist) {
                                            return Enumerable.From(menuDxnry.menucomponents)
                                                .Where(function (mc) {
                                                    return Enumerable.From(mclist).Contains(mc["Key"]);
                                                })
                                                .Select(function (mi) {
                                                    return mi;
                                                }).ToArray();
                                        };
                                        var menuDxnry = {
                                            DatOwner: function () {
                                                var mclist = ["reportDat", "follow", "muteDat", "share", "editDat", "closeDat", "public", "deleteDatOwner"];
                                                return tomenuitems(mclist);
                                            },
                                            DatUser: function () {
                                                var mclist = ["reportDat", "follow", "muteDat", "delete"];
                                                var mdc = toMenuItemDataContext();
                                                if (mdc["isShareable"]) {
                                                    mclist.push("share");
                                                }
                                                return tomenuitems(mclist);
                                            },
                                            CommentOwner: function () {
                                                var mclist = ["report", "follow", "share", "edit", "close", "public", "deleteCommentOwner"];
                                                return tomenuitems(mclist);
                                            },
                                            CommentDatOwner: function () {
                                                var mclist = ["report", "follow", "delete"];
                                                var mdc = toMenuItemDataContext();
                                                if (mdc["isPublic"]) {
                                                    mclist.push("share");
                                                }
                                                return tomenuitems(mclist);
                                            },
                                            CommentUser: function () {
                                                var mclist = ["report", "follow", "commentdelete"];
                                                //var mdc = toMenuItemDataContext();
                                                //if (mdc["isPublic"]) {
                                                //    mclist.push("share");
                                                //}
                                                return tomenuitems(mclist);
                                            },
                                            returnTodatSingle: function (xbacktoObj) {
                                                var tocntrlT = navMgr.me(prweb.datControlsRightMenu1).to(prweb.datControlsSingleDat1);
                                                //returnfromlast();
                                                var backtoObj = xbacktoObj || navMgr.me(prweb.datRightMenu1).returnfromlast(true);
                                                cntrlMgr.showControl(tocntrlT);
                                                var fromT = pnlMgr.hide(300)["presenterT"];
                                                var toT = navMgr.me(fromT).to(prweb.datSingle1);//backtoObj["T"]
                                                if (backtoObj["properties"]) {
                                                    try {
                                                        pnlMgr.show(200, toT).datacontext(backtoObj["properties"]["datacontext"]);
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                } else {
                                                    pnlMgr.show(200, toT);
                                                }
                                            },
                                            showCompletionUI: function () {

                                            },
                                            serverParams: {},
                                            toServerParams: function () {
                                                try {
                                                    var xsingledc = singledc || false;
                                                    if (xsingledc) {
                                                        menuDxnry.serverParams["datid"] = xsingledc.datId;
                                                        menuDxnry.serverParams["public"] = xsingledc.IsPublic;
                                                        menuDxnry.serverParams["closed"] = xsingledc.IsClosed;
                                                        menuDxnry.serverParams["muteddat"] = menuDxnry.serverParams["muteddat"] || false;
                                                        menuDxnry.serverParams["followed"] = menuDxnry.serverParams["followed"] || false;
                                                        menuDxnry.serverParams["deleted"] = menuDxnry.serverParams["deleted"] || false;
                                                        menuDxnry.serverParams["commentdeleted"] = menuDxnry.serverParams["commentdeleted"] || false;
                                                    }
                                                    if (dc["commentId"]) {
                                                        menuDxnry.serverParams["objectId"] = dc["commentId"];
                                                        menuDxnry.serverParams["commentOwnerId"] = dc["commentUserId"];
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return menuDxnry.serverParams;
                                            },
                                            //#region "menucomponents"
                                            "menucomponents": {
                                                'reportDat': {
                                                    method: function () {
                                                        //cntrlMgr.showControl(prweb.datControls2);
                                                        //self.appManager.toFullScreen();
                                                        //pnlMgr.hide(300);
                                                        //pnlMgr.show(0, prweb.datFeed1);
                                                    },
                                                    labels: ["Report this 'dat", "Describe your problem"],
                                                    iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url(),
                                                },
                                                'report': {
                                                    method: function () {
                                                        //cntrlMgr.showControl(prweb.datControls2);
                                                        //self.appManager.toFullScreen();
                                                        //pnlMgr.hide(300);
                                                        //pnlMgr.show(0, prweb.datFeed1);
                                                    },
                                                    labels: ["Report this Comment", "Describe your problem"],
                                                    iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url(),
                                                },
                                                'follow': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["followed"]) {
                                                                xlabels = menuDxnry.menucomponents["follow"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            return Parse.Promise.as(!params["followed"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    menuDxnry.serverParams["followed"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["follow"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["follow"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }).fail(function (ex) { var wtf = true; });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        var xobject = {
                                                            properties: "add this value to dataSingle1.datacontext on return test"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: true,
                                                    labels: ["Follow", "Get notified of responses..."],
                                                    altlabels: ["UnFollow", "Discontinue notifications for this 'dat."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                                },
                                                'muteDat': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["muteddat"]) {
                                                                xlabels = menuDxnry.menucomponents["muteDat"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            return Parse.Promise.as(!params["muteddat"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    menuDxnry.serverParams["muteddat"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["muteDat"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["muteDat"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }).fail(function (ex) { var wtf = true; });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        var xobject = {
                                                            properties: "add this value to dataSingle1.datacontext on return test"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: true,
                                                    labels: ["Mute Notifications", "For this 'dat"],
                                                    altlabels: ["UnMute", "Resume notifications for this 'dat."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datSettingsIcon1"].resourceFile.url()
                                                },
                                                'share': {
                                                    method: function () {
                                                        //self.appManager.toFullScreen();
                                                        pnlMgr.hide(300);
                                                        navMgr.me(prweb.datControlsRightMenu1).to(prweb.datControlsShare1);
                                                        navMgr.me(prweb.datRightMenu1).to(prweb.datShare1);
                                                        if (pnlMgr.panel(prweb.datShare1)) {
                                                            var pnlrm = pnlMgr.show(0, prweb.datShare1).backtoT(prweb.datSingle1);
                                                            pnlrm["datacontext"](bindingContext);
                                                        } else {
                                                            try {
                                                                var pnlrm = pnlMgr.addPanel(prweb.datShare1, bindingContext).backtoT(prweb.datSingle1);
                                                                pnlMgr.show(0, prweb.datShare1).backtoT(prweb.datSingle1);
                                                            }
                                                            catch (ex) {
                                                                var wtf = true;
                                                            }

                                                        }

                                                        //pnlrm["datacontext"](bindingContext);
                                                    },
                                                    stay: true,
                                                    labels: ["Share", "With 'dat friends and followers"],
                                                    iconurl: prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()
                                                },
                                                'editDat': {
                                                    method: function () {
                                                        navMgr.me(prweb.datControlsRightMenu1).to(prweb.datControlsSingleEditor1);
                                                        navMgr.me(prweb.datRightMenu1).to(prweb.datSingleEditor1);
                                                        var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                                        if (pnl) {
                                                            var sourcedc = {
                                                                editDat: true,
                                                                editDatDc: bindingContext.$data.datacontext(),
                                                                editInit: true,
                                                                addNew: false,
                                                                resetUniverse: false
                                                            }; //bindingContext.$data.datacontext();
                                                            
                                                            //pnl.datacontext(sourcedc);
                                                            cntrlMgr.showControl(prweb.datControlsSingleEditor1);
                                                            pnlMgr.hide(300);//.datacontext(false);
                                                            pnlMgr.show(300, prweb.datSingleEditor1);
                                                            setTimeout(function () {
                                                                pnl.datacontext(sourcedc);
                                                            }, 200);
                                                            
                                                            
                                                        } else {
                                                            try {
                                                                //pnlMgr.addPanel(prweb.datSingleEditor1, bindingContext.$data.datacontext());
                                                                //pnlMgr.hide(300);
                                                                //pnlMgr.show(300, prweb.datSingleEditor1);
                                                                cntrlMgr.showControl(prweb.datControlsSingleEditor1);
                                                            }
                                                            catch (ex) {
                                                                var wtf = true;
                                                            }
                                                        }
                                                    },
                                                    stay: true,
                                                    labels: ["Edit", "Change the text..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datFAQ1"].resourceFile.url()
                                                },
                                                'edit': {
                                                    method: function (xdc) {
                                                        //xobject returns the name of a method on pnl....datSingle....
                                                        var xobject = {
                                                            showCommentEdit: "method"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: false,
                                                    labels: ["Edit", "Change the comment..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datFAQ1"].resourceFile.url()
                                                },
                                                'closeDat': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["closed"]) {
                                                                xlabels = menuDxnry.menucomponents["closeDat"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            return prweb.parseManager.datCloseOpen(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                            //return Parse.Promise.as(!params["closed"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    var dfe = xr["datFeedElements"][0] || false;
                                                                    if (dfe) {
                                                                        singledc["IsClosed"] = dfe.statusObject["IsClosed"];
                                                                        datSingleContextMgr(prweb.datRightMenu1).refreshedDfe(dfe);
                                                                    }
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["closeDat"]["labels"];
                                                                if (singledc["IsClosed"]) {
                                                                    xlabels = menuDxnry.menucomponents["closeDat"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }).fail(function (ex) { var wtf = true; });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        var xobject = {
                                                            properties: "add this value to dataSingle1.datacontext on return test"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: true,
                                                    labels: ["Close", "End user feedback on this 'dat."],
                                                    altlabels: ["Open", "Open/Resume user feedback on this 'dat."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datPrivacy1"].resourceFile.url()
                                                },
                                                'close': {
                                                    method: function () {
                                                        try {
                                                            var params = menuDxnry["toServerParams"](singledc);
                                                            elementdatacontext.$data['menuTextA']("Closed");
                                                            elementdatacontext.$data['menuTextB']("testing...is not really changed.");
                                                        }
                                                        catch (ex) { }
                                                        var xobject = {
                                                            properties: "add this value to dataSingle1.datacontext on return test"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: true,
                                                    labels: ["Close", "End user feedback on this comment."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datPrivacy1"].resourceFile.url()
                                                },
                                                'deleteDatOwner': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["deleted"]) {
                                                                xlabels = menuDxnry.menucomponents["deleteDatOwner"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            return prweb.parseManager.datDelete(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                            //return Parse.Promise.as(!params["closed"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    singledc["deleted"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["deleteDatOwner"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["deleteDatOwner"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                                return xr;
                                                            }).fail(function (ex) { var wtf = true; });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    stay: "toFeed",
                                                    labels: ["Delete", "Permanently remove this 'dat"],
                                                    altlabels: ["Deleted", "This dat is permanently removed. Returning to the feed ..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datTermsofUse1"].resourceFile.url()
                                                },
                                                'delete': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["deleted"]) {
                                                                xlabels = menuDxnry.menucomponents["delete"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        //THIS IS HIDE DAT...called when user is not the datOwner...
                                                        var serverMethod = function (params) {
                                                            return prweb.parseManager.hideDat(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                            //return Parse.Promise.as(!params["closed"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    singledc["deleted"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["delete"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["delete"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                                return xr;
                                                            }).fail(function (ex) { var wtf = true; });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    stay: "toFeed",
                                                    labels: ["Delete", "Remove from your feed"],
                                                    altlabels: ["Deleted", "This dat is permanently removed. Returning to the feed ..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                                },
                                                'deleteCommentOwner': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["commentdeleted"]) {
                                                                xlabels = menuDxnry.menucomponents["deleteCommentOwner"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            return prweb.parseManager.commentDelete(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    singledc["commentdeleted"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["deleteCommentOwner"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["deleteCommentOwner"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                                return xr;
                                                            }).fail(function (ex) {
                                                                var wtf = true;
                                                            });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    stay: "toCommentFeed",
                                                    labels: ["Delete", "Permanently remove this Comment"],
                                                    altlabels: ["Deleted", "This comment is permanently removed. Returning to the dat..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datTermsofUse1"].resourceFile.url()
                                                },
                                                'commentdelete': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (menuDxnry.toServerParams()["commentdeleted"]) {
                                                                xlabels = menuDxnry.menucomponents["commentdelete"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        //THIS IS HIDE COMMENT...called when user is not the commentOwner...
                                                        var serverMethod = function (params) {
                                                            return prweb.parseManager.hideComment(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                            //return Parse.Promise.as(!params["closed"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    //bind result...test
                                                                    singledc["commentdeleted"] = xr;
                                                                };
                                                                bindResult();
                                                                var xlabels = menuDxnry.menucomponents["commentdelete"]["labels"];
                                                                if (xr) {
                                                                    xlabels = menuDxnry.menucomponents["commentdelete"]["altlabels"];
                                                                }
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                                return xr;
                                                            }).fail(function (ex) {
                                                                var wtf = true;
                                                            });
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    stay: "toCommentFeed",
                                                    labels: ["Delete", "Permanently remove this Comment"],
                                                    altlabels: ["Deleted", "This comment is permanently removed. Returning to the dat..."],
                                                    iconurl: prweb.pCElemHtmlDxnry["datTermsofUse1"].resourceFile.url()
                                                },
                                                'public': {
                                                    init: function (elementdatacontext) {
                                                        try {
                                                            if (!menuDxnry.toServerParams()["public"]) {
                                                                xlabels = menuDxnry.menucomponents["public"]["altlabels"];
                                                                elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    },
                                                    method: function (elementdatacontext) {
                                                        var serverMethod = function (params) {
                                                            params["public"] = !params["public"];
                                                            return prweb.parseManager.publicPrivateDat(params).then(function (xr) {
                                                                return xr;
                                                            });
                                                            //return Parse.Promise.as(!params["public"]);//test...
                                                        };
                                                        try {
                                                            return serverMethod(menuDxnry.toServerParams()).then(function (xr) {
                                                                var bindResult = function () {
                                                                    var dfe = xr["datFeedElements"][0] || false;
                                                                    if (dfe) {
                                                                        singledc["IsPublic"] = dfe.statusObject["IsPublic"];
                                                                        datSingleContextMgr(prweb.datRightMenu1).refreshedDfe(dfe);
                                                                        //the dfe needs to be used the next time datSingle is shown or another operation
                                                                        //is performed in the rightMenu... 
                                                                    }
                                                                };
                                                                bindResult();
                                                                if (!singledc["IsPublic"]) {
                                                                    elementdatacontext.$data['menuTextA']("Private");
                                                                    elementdatacontext.$data['menuTextB']("Change to Public...");
                                                                } else {
                                                                    var xlabels = menuDxnry.menucomponents["public"]["labels"];
                                                                    elementdatacontext.$data['menuTextA'](xlabels[0]);
                                                                    elementdatacontext.$data['menuTextB'](xlabels[1]);
                                                                }
                                                            }).fail(function (ex) { var wtf = true; });

                                                        }
                                                        catch (ex) { }
                                                        var xobject = {
                                                            properties: "add this value to dataSingle1.datacontext on return test"
                                                        };
                                                        return xobject;
                                                    },
                                                    stay: true,
                                                    labels: ["Public", "Change to private"],
                                                    altlabels: ["Private", "Change to public"],
                                                    iconurl: prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()
                                                }
                                            }
                                            //#endregion CommentOwner

                                        };
                                        //#endregion menuDxnry
                                        var makemenuelem = function (xm) {
                                            var xcm = cmodel(xm.Value);
                                            cmodelarray.push(xcm);
                                            return true;
                                        };
                                        var toDxnryKey = function () {
                                            xrslt = {};
                                            var rslt = dc;
                                            var isdat = true;
                                            var has$data = dc["rightmenueventsource"] || false;
                                            if (has$data) {
                                                var eventsource = dc["rightmenueventsource"] || false;
                                                if (eventsource == "SHAREDAT") {
                                                    xrslt["DatOwner"] = singledc["isOwnerVIEWING"];
                                                    xrslt["DatUser"] = isdat;
                                                } else if (eventsource == "COMMENT" || eventsource == "INSIDEDATABLE") {
                                                    xrslt["CommentOwner"] = dc.isCommentOwner;
                                                    xrslt["CommentDatOwner"] = singledc["isOwnerVIEWING"];
                                                    xrslt["CommentUser"] = !(dc.isCommentOwner);
                                                }

                                            } else {//this indicates source is right hamburger icon datControlsSingle1
                                                xrslt["DatOwner"] = singledc["isOwnerVIEWING"];
                                                xrslt["DatUser"] = isdat;
                                            }

                                            return Enumerable.From(xrslt).Where(function (xr) { return xr.Value; })
                                                .Select(function (mk) { return mk.Key; }).FirstOrDefault();
                                        }
                                        var menuContext = menuDxnry[toDxnryKey()]();
                                        Enumerable.From(menuContext).ForEach(function (m) { return makemenuelem(m) });
                                        pnl.contentmodelcolxn(cmodelarray);
                                    };
                                    populatecontentmodelcolxn();
                                    pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                    //self._initiateMalihuScroll("scrollrootdatRightMenu1");
                                } else {
                                    pnlMgr.panel(prweb.datRightMenu1).contentmodelcolxn([]);
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                            
                        }
                    };
                };
                if (!ko.bindingHandlers.datRightMenuElem1) {
                    ko.bindingHandlers.datRightMenuElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var xinit = bindingContext.$data.init || false;
                            if (xinit) {
                                xinit(bindingContext);
                            }
                            var $elem = $(element);
                            $elem.on(self.xevent, function () {
                                var utils = {
                                    returnTodatSingle: function (xbacktoObj) {
                                        var tocntrlT = navMgr.me(prweb.datControlsRightMenu1).returnfromlast() || prweb.datControlsSingleDat1;
                                        //returnfromlast();
                                        var backtoObj = xbacktoObj || navMgr.me(prweb.datRightMenu1).returnfromlast(true);
                                        cntrlMgr.showControl(tocntrlT);
                                        var fromT = pnlMgr.hide(300)["presenterT"];
                                        var toT = prweb.datSingle1;//navMgr.me(fromT).returnfromlast();//backtoObj["T"]
                                        var rslt = false;
                                        if (backtoObj["properties"]) {
                                            try {
                                              rslt = pnlMgr.show(200, toT).datacontext(backtoObj["properties"]["datacontext"]);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        } else {
                                            rslt = pnlMgr.show(200, toT);
                                        }
                                        return rslt;
                                    },
                                    showCompletionUI: function () {
                                        //$elem.addClass("datgold");
                                    },
                                    showToFeedCompletionUI: function () {

                                    },
                                    returnTodatFeed: function () {
                                        try {
                                            cntrlMgr.showControl(prweb.datControls2);
                                            pnlMgr.hide(300);
                                            pnlMgr.show(200, prweb.datFeed1);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return false;
                                    }
                                };
                                if (bindingContext.$data["stay"]) {
                                    if (bindingContext.$data["stay"] == "toFeed") {
                                        return bindingContext.$data.method(bindingContext).then(function (xr) {
                                            return pnlMgr.panel(prweb.datFeed1).feedFilterUpdate().then(function () {
                                                setTimeout(function () {
                                                    pnlMgr.panel(prweb.datSingle1).datacontext(false);
                                                    utils.returnTodatFeed();
                                                }, 1000);
                                            });
                                        });
                                    } else if (bindingContext.$data["stay"] == "toCommentFeed") {
                                        return bindingContext.$data.method(bindingContext).then(function (xr) {
                                            return pnlMgr.panel(prweb.datSingle1).retrieveComments().then(function () {
                                                setTimeout(function () {
                                                    utils.returnTodatSingle();
                                                }, 1000);
                                            });
                                        });
                                    } else {
                                        var xobject = bindingContext.$data.method(bindingContext);
                                        utils.showCompletionUI();
                                    }
                                } else {
                                    setTimeout(function () {
                                        var xobject = bindingContext.$data.method(bindingContext);
                                        var pnl = utils.returnTodatSingle();
                                        //then populate this guys datacontext with the properties in xobject...
                                        Enumerable.From(xobject).ForEach(function (p) {
                                            var x = p.Key;
                                            var y = p.Value;
                                            if (y == "method") {
                                                pnl[x](bindingContext.$parent.datacontext());//is a method on datSingle....
                                            }
                                        });
                                    }, 1000)
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datRightMenu1

                //#region datControlsSettingsDetail1
                if (!ko.bindingHandlers.datControlsSettingsDetail1) {
                    ko.bindingHandlers.datControlsSettingsDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected'] = ko.observable("");
                            $("#datcontrolssettingsdetailbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.panel(prweb.datSettingsDetail1).datacontext(false);
                                cntrlMgr.showControl(prweb.datControlsSettings1);
                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datSettings1);
                                
                                //pnlMgr.removePanel(prweb.datSettingsDetail1);
                            });
                            $("#datsettingsdetaildonebtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                cntrlMgr.showControl(prweb.datControlsSettings1);
                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datSettings1);
                                pnlMgr.removePanel(prweb.datSettingsDetail1);
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsSettingsDetail1
                //#region datSettingsDetail1
                if (!ko.bindingHandlers.datSettingsDetail1) {
                    ko.bindingHandlers.datSettingsDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datSettingsDetail1, element).hide(0, prweb.datSettingsDetail1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatSettingsDetail1");//, scroptions);
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsSettingsDetail1);
                            };
                            pnl["ISGROUPS"] = ko.observable(false);
                            pnl["ISUSERS"] = ko.observable(false);
                            pnl["toUserProfile"] = function (xroot, e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var tocntrlT = navMgr.me(prweb.datControlsSettingsDetail1).to(prweb.datControlsUserProfile);
                                cntrlMgr.showControl(tocntrlT);
                                //#region Navigate to datUserProfile1 uses pnlMgr
                                var dc = false;
                                dc = xroot.userID;
                                pnlMgr.panel(prweb.datUserProfile1).datacontext(dc);
                                //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                var hiddenpnl = pnlMgr.hide(300);
                                var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                var toT = navMgr.me(prweb.datSettingsDetail1).to(prweb.datUserProfile1, sourceproperties);
                                pnlMgr.show(200, toT).backtoT(prweb.datSettingsDetail1);
                                //pnlMgr.hide(300, prweb.datFeed1);
                                //#endregion
                            };
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            //dc ...
                            if (dc !== false) {
                                var cmodelarray = [];
                                var userCmodel = function (userrow) {
                                    try {
                                        var toUserFollowers = function (ur) {
                                            var rslt = false;
                                            try {
                                                rslt = ko.observable("No Followers");
                                                var xval = ur.followers || false;
                                                if (xval) {
                                                    rslt(xval + " Followers");
                                                }
                                            }
                                            catch (ex) { var wtf = false }
                                            return rslt;
                                        };
                                        var toUserPhoto = function (ur) {
                                            var rslt = false;
                                            try {
                                                var defurl = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                                rslt = ko.observable(defurl);
                                                if (ur.owner) {
                                                    var xurl = ur.owner.url() || ur.owner.url || false;
                                                    if (xurl) {
                                                        rslt(xurl);
                                                    }
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = ex.message;
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datSettingsDetailElem1",
                                            userID: userrow.userId || false,
                                            selector: ko.observable(false),
                                            userName: userrow.userName,
                                            userFollowers: toUserFollowers(userrow),
                                            userPhotoUrl: toUserPhoto(userrow)
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        return false;
                                    }
                                };
                                var cmodel = function (m) {
                                    try {
                                        var imgurl = m.groupImage.url() || prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                        var toMembersCountText = function () {
                                            return "Members: " + m.groupdetails["Members"]
                                        };
                                        var toMembershipStatusText = function () {
                                            var isOriginator = m.groupdetails["ORIGINATOR"].length > 0;
                                            var isInvited = m.groupdetails["INVITED"].length > 0;
                                            var rslt = "Invited";

                                            if (isOriginator) {
                                                rslt = "Owner";
                                            } else {
                                                var isMember = m.groupdetails["MEMBERS"].length > 0;
                                                if (isMember) {
                                                    rslt = "Member";
                                                }
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datGroupsElem1",
                                            selector: ko.observable(false),
                                            groupId: m.groupId,
                                            groupDetails: m.groupdetails,
                                            groupImageId: m.groupImageId,
                                            elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                            menuTextA: ko.observable(m.groupName),
                                            menuTextB: ko.observable(toMembershipStatusText()),
                                            menuTextC: ko.observable(toMembersCountText()),
                                            stay: m["stay"] || false,
                                            method: m.method
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        return false;
                                    }

                                };
                                var pnl = pnlMgr.panel(prweb.datSettingsDetail1);
                                var addAdditionalRowsToContentModelColxn = function () {
                                    pnl.contentmodelcolxn(cmodelarray);
                                };
                                //#region eventSourceDxnry ...has all the stuff for displaying rows and navigating...
                                var eventSourceDxnry = {
                                    "everyone": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected']("Everyone");
                                            var getUserDatFriends = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserDatFriends(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserDatFriends().then(function (xr) {
                                                var scroptions = {
                                                    theme: "minimal-dark",
                                                    callbacks: {
                                                        onTotalScrollOffset: 1200,
                                                        onTotalScroll: function () {
                                                            var skipval = cmodelarray.length || 0;
                                                            return getUserDatFriends();
                                                        }
                                                    }
                                                }
                                                //self._initiateMalihuScroll("scrollrootdatSettingsDetail1");//, scroptions);
                                            });
                                        }
                                    },
                                    "groups": {
                                        method: function () {
                                            pnl["ISGROUPS"](true);
                                            pnl["ISUSERS"](false);
                                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected']("Groups");
                                            var getGroups = function () {
                                                var parms = {
                                                    groupid: false,
                                                    xfilter: false,
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getGroups(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = cmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getGroups().then(function (xr) {
                                                //var scroptions = {
                                                //    theme: "minimal-dark",
                                                //    callbacks: {
                                                //        onTotalScrollOffset: 1200,
                                                //        onTotalScroll: function () {
                                                //            var skipval = cmodelarray.length || 0;
                                                //            return getGroups();
                                                //        }
                                                //    }
                                                //}
                                                //self._initiateMalihuScroll("scrollrootdatSettingsDetail1");//, scroptions);
                                            });
                                        }
                                    },
                                    "followers": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected']("Followers");
                                            var getUserIsFollowedByList = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserIsFollowedByList(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserIsFollowedByList().then(function (xr) {
                                                //var scroptions = {
                                                //    theme: "minimal-dark",
                                                //    callbacks: {
                                                //        onTotalScrollOffset: 1200,
                                                //        onTotalScroll: function () {
                                                //            var skipval = cmodelarray.length || 0;
                                                //            return getUserIsFollowedByList();
                                                //        }
                                                //    }
                                                //}
                                                //self._initiateMalihuScroll("scrollrootdatSettingsDetail1");//, scroptions);
                                            });
                                        }
                                    },
                                    "following": {
                                        method: function () {
                                            pnl["ISGROUPS"](false);
                                            pnl["ISUSERS"](true);
                                            cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected']("Following");
                                            var getUserIsFollowingList = function () {
                                                var parms = {
                                                    limit: 20,
                                                    skip: 0
                                                };
                                                return prweb.parseManager.getUserIsFollowingList(parms).then(function (xr) {
                                                    var makemenuelem = function (xm) {
                                                        var xcm = userCmodel(xm);
                                                        if (xcm) {
                                                            cmodelarray.push(xcm);
                                                        }
                                                        return true;
                                                    };
                                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                                    addAdditionalRowsToContentModelColxn();
                                                });
                                            };
                                            return getUserIsFollowingList().then(function (xr) {
                                                //var scroptions = {
                                                //    theme: "minimal-dark",
                                                //    callbacks: {
                                                //        onTotalScrollOffset: 1200,
                                                //        onTotalScroll: function () {
                                                //            var skipval = cmodelarray.length || 0;
                                                //            return getUserIsFollowingList();
                                                //        }
                                                //    }
                                                //}
                                                //self._initiateMalihuScroll("scrollrootdatSettingsDetail1");//, scroptions);
                                            });
                                        }
                                    }
                                };
                                //#endregion eventSourceDxnry
                                try {
                                    return eventSourceDxnry[dc.$data.eventsource].method();
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            } else {
                                var pnl = pnlMgr.panel(prweb.datSettingsDetail1);
                                pnl.contentmodelcolxn([]);
                            }
                        }
                    };
                };
                //#region datSettingsDetailElem1
                if (!ko.bindingHandlers.datSettingsDetailElem1) {
                    ko.bindingHandlers.datSettingsDetailElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            var manageSelected = function (context) {
                                var array = [];
                                var toAction = function (xid) {
                                    var rslt = [];
                                    if (context.action == "remove") {
                                        rslt = Enumerable.From(array).Except([xid]).ToArray();
                                    } else if (context.action == "add") {
                                        rslt = Enumerable.From(array).Concat([xid]).ToArray();
                                    }
                                    return rslt;
                                }
                                if (context.userID) {
                                    array = bindingContext.$parent.datacontext()["$data"]["selectedUserIDColxn"];
                                    bindingContext.$parent.datacontext()["$data"]["selectedUserIDColxn"] = toAction(context.userID);
                                } else if (context.groupID) {
                                    array = bindingContext.$parent.datacontext()["$data"]["selectedGroupIDColxn"];
                                    bindingContext.$parent.datacontext()["$data"]["selectedGroupIDColxn"] = toAction(context.groupID);
                                }
                            };
                            $elem.bind(self.xevent, function (x, e) {
                                try {
                                    //var selection = {
                                    //    userID: bindingContext.$data["userID"] || false,
                                    //    groupID: bindingContext.$data["groupId"] || false,
                                    //    action: false
                                    //};
                                    //var xval = bindingContext.$data["selector"]();
                                    //bindingContext.$data["selector"](!xval);
                                    //var selcount = bindingContext.$parent.datacontext()["$data"]["selectedCount"]();
                                    //if (xval) {
                                    //    selcount -= 1;
                                    //    selection.action = "remove";
                                    //} else {
                                    //    selcount += 1;
                                    //    selection.action = "add";
                                    //}
                                    //cntrlMgr.control(prweb.datControlsSettingsDetail1).panelprops()['selected']("Selected: " + selcount);
                                    //bindingContext.$parent.datacontext()["$data"]["selectedCount"](selcount);
                                    //manageSelected(selection);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                //var pnl = pnlMgr.addPanel(prweb.datGroupsDetail1);
                                //pnl.datacontext(bindingContext.$data);
                                //pnlMgr.hide(200, prweb.datGroups1);
                                //pnlMgr.show(300, prweb.datGroupsDetail1);
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datSettingsDetailElem1
                //#endregion datSettingsDetail1

                //#region datControlsSettings1
                if (!ko.bindingHandlers.datControlsSettings1) {
                    ko.bindingHandlers.datControlsSettings1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsSettings1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsSettings1).panelprops()['selected'] = ko.observable("Settings");
                            $("#datcontrolssettingsbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.hide(300);
                                
                                navMgr.me(prweb.datControlsSettings1).returnfromlast();
                                cntrlMgr.showControl(prweb.datControls2);
                                //pnlMgr.removePanel(prweb.datSettings1);
                                pnlMgr.show(200, prweb.datMenu1);
                                
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsSettings1
                //#region datSettings1
                if (!ko.bindingHandlers.datSettings1) {
                    ko.bindingHandlers.datSettings1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datSettings1, element).hide(0, prweb.datSettings1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatSettings1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsSettings1);
                            };
                            var versionID = "EK40";
                            var cmodelarray = [];
                            var cmodel = function (mkey) {
                                var m = mkey.Value;
                                var that = {
                                    eventsource: mkey.Key,
                                    selectedCount: ko.observable(0),
                                    selectedUserIDColxn: [],
                                    selectedGroupIDColxn: [],
                                    presenterT: "datSettingsElem1",
                                    elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                    menuTextA: ko.observable(m.labels[0]),
                                    menuTextB: ko.observable(m.labels[1]),
                                    menuTextC: ko.observable("this is menutextC"),
                                    stay: m["stay"] || false,
                                    method: m.method
                                };
                                return that;
                            };
                            var populatecontentmodelcolxn = function () {
                                //#region menuitems
                                var menuitems = {
                                    'profile': {
                                        method: function () {
                                            var tocntrlT = navMgr.me(prweb.datControlsSettings1).to(prweb.datControlsUserProfile);
                                            cntrlMgr.showControl(tocntrlT);//(prweb.datControlsUserProfile);
                                            
                                            var user = Parse.User.current();//or some other user_id we have!!!! gotta get user_id in dataContext somehow!!!
                                            var userid = user.id || false;
                                            var fromT = pnlMgr.hide(300)["presenterT"];
                                            var sourceproperties = { datacontext: userid };
                                            var toT = navMgr.me(fromT).to(prweb.datUserProfile1, sourceproperties);
                                            pnlMgr.show(200, prweb.datUserProfile1);
                                            pnlMgr.panel(prweb.datUserProfile1).datacontext(userid);
                                        },
                                        labels: ["My Profile", ""],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url(),
                                    },//context is provided by datSettingsElem1.tapHandler binding...just like datShare1...
                                    'everyone': {
                                        method: function (context) {
                                            
                                            try {
                                                //self.appManager.toFullScreen();
                                                pnlMgr.hide(300);
                                                pnlMgr.addPanel(prweb.datSettingsDetail1);
                                                var pnl = pnlMgr.show(0, prweb.datSettingsDetail1).backtoT(prweb.datSettings1);
                                                pnl.datacontext(context);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        labels: ["Everyone", "Everyone on 'dat..."],
                                        iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url(),
                                    },
                                    'groups': {
                                        method: function (context) {
                                            try {
                                                //self.appManager.toFullScreen();
                                                pnlMgr.hide(300);
                                                pnlMgr.addPanel(prweb.datSettingsDetail1);
                                                var pnl = pnlMgr.show(0, prweb.datSettingsDetail1).backtoT(prweb.datSettings1);
                                                pnl.datacontext(context);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        labels: ["Groups", "Your groups"],
                                        iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url(),
                                    },
                                    'followers': {
                                        method: function (context) {
                                            try {
                                                //self.appManager.toFullScreen();
                                                pnlMgr.hide(300);
                                                pnlMgr.addPanel(prweb.datSettingsDetail1);
                                                var pnl = pnlMgr.show(0, prweb.datSettingsDetail1).backtoT(prweb.datSettings1);
                                                pnl.datacontext(context);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        labels: ["Followers", "The people that follow your 'dats"],
                                        iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                    },
                                    'following': {
                                        method: function (context) {
                                            try {
                                                //self.appManager.toFullScreen();
                                                pnlMgr.hide(300);
                                                pnlMgr.addPanel(prweb.datSettingsDetail1);
                                                var pnl = pnlMgr.show(0, prweb.datSettingsDetail1).backtoT(prweb.datSettings1);
                                                pnl.datacontext(context);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        labels: ["Following", "The people you follow..."],
                                        iconurl: prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url()
                                    },
                                    'version': {
                                        method: function (context) {
                                            try {
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        labels: ["Version", versionID],
                                        iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                    }
                                };
                                //#endregion menuitems
                                var makemenuelem = function (xm) {
                                    var xcm = cmodel(xm);
                                    cmodelarray.push(xcm);
                                    return true;
                                };
                                Enumerable.From(menuitems).ForEach(function (m) { return makemenuelem(m) });
                                pnl.contentmodelcolxn(cmodelarray);
                            };
                            
                            populatecontentmodelcolxn();
                            //self._initiateMalihuScroll("scrollrootdatSettings1");
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#region datSettingsElem1
                if (!ko.bindingHandlers.datSettingsElem1) {
                    ko.bindingHandlers.datSettingsElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var $elem = $(element);
                            $elem.bind(self.xevent, function (x, e) {
                                try {
                                    bindingContext.$data["method"](bindingContext);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datSettingsElem1
                //#endregion datSettings1


                //#region datControlsGroups1
                if (!ko.bindingHandlers.datControlsGroups1) {
                    ko.bindingHandlers.datControlsGroups1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsGroups1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsGroups1).panelprops()['selected'] = ko.observable("Groups");
                            $("#datcontrolsgroupsbackbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                navMgr.me(prweb.datControlsGroups1).returnfromlast();
                                cntrlMgr.showControl(prweb.datControls2);
                                pnlMgr.hide(300).datacontext(false);
                                pnlMgr.show(200, prweb.datMenu1);
                                //pnlMgr.removePanel(prweb.datGroups1);
                            });
                            //TODO: NEED ADD GROUP BUTTON HANDLER
                            $("#datcontrolsgroupsaddnewbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                e.stopPropagation();
                                navMgr.me(prweb.datControlsGroups1).to(prweb.datControlsGroupEditor1);
                                cntrlMgr.showControl(prweb.datControlsGroupEditor1);
                                pnlMgr.hide(300);

                                var epnl = pnlMgr.panel(prweb.datGroupEditor1) || pnlMgr.addPanel(prweb.datGroupEditor1);
                                pnlMgr.show(300, prweb.datGroupEditor1).datacontext(datGroupEditSvc().addNewDataContext());
                                //epnl.datacontext(datGroupEditSvc().addNewDataContext());
                                //pnlMgr.removePanel(prweb.datGroups1);
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsGroups1
                //#region datGroups1
                if (!ko.bindingHandlers.datGroups1) {
                    ko.bindingHandlers.datGroups1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datGroups1, element).hide(0, prweb.datGroups1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatGroups1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsGroups1);
                                pnl.datacontext(true);
                            };
                            pnl["toUserProfile"] = function (xroot, data, e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var tocntrlT = navMgr.me(prweb.datControlsGroups1).to(prweb.datControlsUserProfile);
                                cntrlMgr.showControl(tocntrlT);
                                //#region Navigate to datUserProfile1 uses pnlMgr
                                var dc = false;
                                if (data.presenterT == "datResponseFeedElem1") {
                                    dc = data.userOwner.userId;
                                } else if (data.presenterT == "datCommentElem1") {
                                    dc = data.commentUserId;
                                }
                                else if (data.presenterT == "datFiveResponseFeedElem1") {
                                    dc = data.userOwner.userId;
                                } else {
                                    dc = xroot.datcomplete.userId;//establish datacontext for the addedPanel...
                                }

                                //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                var hiddenpnl = pnlMgr.hide(300);
                                var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                var toT = navMgr.me(prweb.datGroups1).to(prweb.datUserProfile1, sourceproperties);
                                hiddenpnl.datacontext(false);
                                var topnl = pnlMgr.show(200, toT);//.backtoT(prweb.datSingle1);
                                topnl.datacontext(dc);
                                //pnlMgr.hide(300, prweb.datFeed1);
                                //#endregion
                            };
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            if (dc !== false) {
                                var cmodelarray = [];
                                var cmodel = function (m) {
                                    try {
                                        var toImgUrl = function () {
                                            var rslt = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            if (m.groupImage) {
                                                try {
                                                    rslt = m.groupImage.url();
                                                }
                                                catch (ex) {

                                                }
                                            }
                                            return rslt;
                                        };
                                        var imgurl = toImgUrl();
                                        var toMembersCountText = function () {
                                            return "Members: " + m.groupdetails["Members"]
                                        };
                                        var isOriginator = false;
                                        var toMembershipStatusText = function () {
                                            isOriginator = m.groupdetails["ORIGINATOR"].length > 0;
                                            var isInvited = m.groupdetails["INVITED"].length > 0;
                                            var rslt = "Invited";

                                            if (isOriginator) {
                                                rslt = "Owner";
                                            } else {
                                                var isMember = m.groupdetails["MEMBERS"].length > 0;
                                                if (isMember) {
                                                    rslt = "Member";
                                                }
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datGroupsElem1",
                                            groupId: m.groupId,
                                            groupDetails: m.groupdetails,
                                            groupImageId: m.groupImageId,
                                            elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                            menuTextA: ko.observable(m.groupName),
                                            menuTextB: ko.observable(toMembershipStatusText()),
                                            menuTextC: ko.observable(toMembersCountText()),
                                            isOriginator: isOriginator,
                                            stay: m["stay"] || false,
                                            method: m.method
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        return false;
                                    }

                                };
                                var parms = {
                                    groupid: false,
                                    xfilter: false,
                                    limit: 20,
                                    skip: 0
                                };
                                return prweb.parseManager.getGroups(parms).then(function (xr) {
                                    var makemenuelem = function (xm) {
                                        var xcm = cmodel(xm);
                                        if (xcm) {
                                            cmodelarray.push(xcm);
                                        }
                                        return true;
                                    };
                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                    pnlMgr.panel(prweb.datGroups1).contentmodelcolxn(cmodelarray);
                                    //pnl.contentmodelcolxn(cmodelarray);
                                    
                                });
                            } else {
                                pnlMgr.panel(prweb.datGroups1).contentmodelcolxn([]);
                            }
                            
                        }
                    };
                };
                if (!ko.bindingHandlers.datGroupsElem1) {
                    ko.bindingHandlers.datGroupsElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            bindingContext.$data["tapGroup"] = function (x, e) {
                                
                                var newpnl = pnlMgr.panel(prweb.datGroupsDetail1) || pnlMgr.addPanel(prweb.datGroupsDetail1);
                                newpnl.datacontext(bindingContext.$data);
                                //pnlMgr.panel(prweb.datGroups1).datacontext(false);
                                pnlMgr.hide(300);//.datacontext(false);
                                pnlMgr.show(300, prweb.datGroupsDetail1);//.datacontext(bindingContext.$data);
                            };
                            //var $elem = $(element);
                            //$elem.bind(self.xevent, function (x, e) {
                            //    pnlMgr.panel(prweb.datGroups1).datacontext(false);
                            //    pnlMgr.hide(300);
                            //    pnlMgr.addPanel(prweb.datGroupsDetail1);
                            //    pnlMgr.show(0, prweb.datGroupsDetail1).datacontext(bindingContext.$data);
                            //});
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datGroups1

                //#region datGroupEditSvc
                var datGroupEditSvc = function (xdc) {
                    var me = {
                        currentVmx: false,//xdc["contentmodelcolxn"]()[0] ... see init
                        datimgscolxn: [],
                        init: function () {
                            //adds a bunch of handlers for editable elements...
                            if (xdc) {
                                me.currentVmx = xdc["contentmodelcolxn"]()[0];
                            }
                            $("#groupeditorimghost").off(self.xevent);
                            $("#groupeditorimagesopener").off("change");
                            $("#groupeditorimghost").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                $("#groupeditorimagesopener").trigger("click");
                                return false;
                            });
                            $("#groupeditorimagesopener").on("change", function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var imgChangeHandler = function (xthis) {
                                    try {
                                        var wtfkodata = ko.dataFor(xthis);
                                        //#region util functions
                                        var saveDatImageParse = function (ximg) {
                                            try {
                                                var parseFile = new Parse.File('file.bin', ximg);
                                                return parseFile.save().then(function (fxr) {
                                                    var newdatimagerow = new Parse.Object('DatImages');
                                                    newdatimagerow.set('imageFile', fxr);
                                                    return newdatimagerow.save().then(function (xr) {
                                                        var url = fxr.url();
                                                        var datimgid = xr.id;
                                                        me.datimgscolxn.push({
                                                            url: url,
                                                            id: datimgid
                                                        });
                                                        return {
                                                            url: url || false,
                                                            datimgid: datimgid || false
                                                        };
                                                    }).fail(function (ex) {
                                                        var wtf = true;
                                                        return Parse.Promise.as(false);
                                                    });
                                                }).fail(function (ex) {
                                                    var wtf = true;
                                                    return Parse.Promise.as(false);
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return Parse.Promise.as(false);
                                            }

                                        };
                                        //#endregion

                                        //#region apply images to observables
                                        var ximage = xthis.files[0] || false;
                                        if (ximage) {
                                            var url = window.URL ? window.URL : window.webkitURL;
                                            var newsrc = url.createObjectURL(ximage);
                                            me.currentVmx.elementImage(newsrc);
                                            me.currentVmx["isimagepopulated"](true);
                                            return saveDatImageParse(ximage).then(function (xr) {
                                                //me.showDoneButtonIfOk();
                                                me.currentVmx.groupImageId = xr.datimgid;
                                                me.currentVmx.groupImageUrl = xr.url;
                                                return {
                                                    newsrc: newsrc,
                                                    url: xr.url,
                                                    datImgId: xr.datimgid
                                                };
                                            });
                                        } else {
                                            return Parse.Promise.as(false);
                                        }
                                        //#endregion
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        return Parse.Promise.as(false);
                                    }
                                };
                                try {
                                    return imgChangeHandler(this).then(function (xr) {
                                        pnlMgr.appPositionRefresh();
                                        return xr;//me.onImageSelected(xr);
                                    });
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                            $(".editgroupglyph").removeClass("edithosthide").parent().on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var $elem = $(e.currentTarget);
                                if ($elem.hasClass("edithostfieldnameediting")) {
                                    $(".editgroupglyph").parent().removeClass("edithostfieldnameediting");
                                    $("#datgroupeditoredithost").addClass("edithosthide").removeClass("datgroupeditoredithost");
                                    xdc["contentmodelcolxn"]()[0]["showTextArea"](false);
                                    xdc["contentmodelcolxn"]()[0]["editorVmx"](false);
                                    pnlMgr.appPositionRefresh();
                                } else {
                                    var mynode = $elem.children()[1];
                                    var kodata = ko.contextFor(mynode);
                                    $("#datgroupeditoredithost").addClass("datnomarpad, text-center").show(10, function () {
                                        $("#datgroupeditoredithost").removeClass("edithosthide");
                                    });
                                    $(".editgroupglyph").parent().removeClass("edithostfieldnameediting");
                                    $elem.addClass("edithostfieldnameediting");
                                    // var currenteditfield = kodata.$data["fieldName"];
                                    xdc["showTextArea"](true);
                                    //kodata.$parent["showTextArea"](true);
                                    $("#groupeditoredittextarea").val();//kodata.$data[currenteditfield]());
                                    xdc["contentmodelcolxn"]()[0]["showTextArea"](true);
                                    var editvmx = xdc["contentmodelcolxn"]()[0]["editorVmx"];//is the observable...set it ()
                                    editvmx(kodata.$data);//puts the current field stuff in the editor binding...
                                    var cool = true;
                                }
                                
                            });

                            return me;
                        },
                        hide: function () {
                            $("#groupeditorimghost").off(self.xevent);
                            $("#groupeditorimagesopener").off("change");
                            //$(".editgroupglyph").addClass("edithosthide").parent().off(self.xevent).removeClass("edithostfieldnameediting");
                            //$("#datuserprofileeditform").off("submit");

                            $("#datgroupeditoredithost").addClass("edithosthide");
                            xdc["contentmodelcolxn"]()[0]["showTextArea"](false);
                            xdc["contentmodelcolxn"]()[0]["editorVmx"](false);
                            return me;
                        },

                        toOriginateParams: function () {
                            var rslt = {};
                            try {
                                var toJsonModel = function (vmx) {
                                    var jmrslt = {};
                                    try {
                                        var toGroupName = function () {
                                            var rslt = "";
                                            try {
                                                rslt = ko.unwrap(vmx["EDITOBJmenuTextA"])["vanillaValue"]();
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        var toGroupStatusTags = function () {
                                            var rslt = [];
                                            try {
                                                rslt = vmx.groupSettings["groupStatusTags"];
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        jmrslt["groupImageID"] = vmx.groupImageId || false;
                                        jmrslt["groupImageUrl"] = vmx.groupImageUrl || false;
                                        jmrslt["groupName"] = toGroupName();
                                        jmrslt["groupStatusTags"] = toGroupStatusTags();
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        alert("originate jsonmodel" + ex.message.toString());
                                    }
                                    return jmrslt;
                                };
                                var jm = toJsonModel(me.currentVmx);
                                rslt["jsonModel"] = JSON.stringify(jm) || "";
                                rslt["groupName"] = jm["groupName"];
                                rslt["groupImageID"] = jm["groupImageID"];
                                rslt["groupImage"] = jm["groupImageID"];
                                rslt["groupStatusTags"] = jm["groupStatusTags"];
                            }
                            catch (ex) {
                                var wtf = true;
                                rslt = false;
                                alert("originate " + ex.message.toString());
                            }
                            return rslt;
                            
                        },
                        save: function () {
                            try {
                                var params = me.toOriginateParams(true) || false;
                                if (params) {
                                    return prweb.parseManager.originateGroup(params).then(function (xr) {
                                        return xr;
                                    }).fail(function (ex) {
                                        alert("save fail" + ex.message.toString());
                                        return Parse.Promise.as(params);
                                    });
                                } else {
                                    return Parse.Promise.as(params);
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                                alert("save catch " + ex.message.toString());
                                return Parse.Promise.as(params);
                            }
                        },

                        doneHandler: function () {
                            try {
                                alert("saving group...");
                                return me.save().then(function (xr) {
                                    //navMgr back to groups1
                                    alert("group saved");
                                    return true;
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                                alert("done catch" + ex.message.toString());
                            }
                        },

                        //#region toEditorVmx
                        addEditorVmx: function (xrslt, xsource) {
                            //#region fieldDxnry
                            var fieldDxnry = {
                                "menuTextA": {
                                    placeholdertext: "new group name...",
                                    "default": "unnamed group..."
                                }
                            };
                            //#endregion fieldDxnry
                            try {
                                Enumerable.From(fieldDxnry).Where(function (xp) {
                                    return xsource[xp.Key] || false;
                                }).ForEach(function (p) {
                                    var xdeflt = fieldDxnry[p.Key]["default"] || false;
                                    var valordflt = ko.unwrap(xsource[p.Key]) || xdeflt;
                                    xrslt[p.Key] = ko.observable(valordflt);

                                    var xeditobj = {
                                        fieldName: p.Key,
                                        fieldValue: ko.unwrap(xsource[p.Key])
                                    };
                                    xeditobj[p.Key] = ko.observable(valordflt);
                                    xeditobj["vanillaValue"] = xeditobj[p.Key];
                                    xeditobj["submitHandler"] = function (x, y, e) {
                                        alert("Submit YES");
                                    };
                                    Enumerable.From(fieldDxnry[p.Key]).ForEach(function (frow) {
                                        xeditobj[frow.Key] = frow.Value;
                                    });
                                    xrslt["EDITOBJ" + p.Key] = ko.observable(xeditobj);
                                });
                                xrslt["submitHandler"] = function (x, y, e) {
                                    alert("Submit YES");
                                };
                                xrslt["showTextArea"] = ko.observable(false);
                                xrslt["editorVmx"] = ko.observable();//this gets populated in editorsvc.init().editglyphhandler...

                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        //#endregion toEditorVmx
                        
                        getGroupSettingsColxn: function () {
                            var rslt = [];
                            try {
                                //#region menuDxnry
                                var toMenuItemDataContext = function () {
                                    var rslt = {};
                                    rslt["isShareable"] = singledc["isShareable"];
                                    return rslt;
                                };
                                var tomenuitems = function (mclist) {
                                    return Enumerable.From(menuDxnry.menucomponents)
                                        .Where(function (mc) {
                                            return Enumerable.From(mclist).Contains(mc["Key"]);
                                        })
                                        .Select(function (mi) {
                                            return mi;
                                        }).ToArray();
                                };
                                var menuDxnry = {
                                    toGroupInviteUrl: function () { },
                                    GroupOwner: function () {
                                        var mclist = ["groupLink", "workshopGroup", "groupPassword"];
                                        return tomenuitems(mclist);
                                    },
                                    GroupMember: function () { },
                                    serverParams: {},
                                    toServerParams: function () {
                                        try {
                                            var xsingledc = singledc || false;
                                            if (xsingledc) {
                                                menuDxnry.serverParams["muteddat"] = menuDxnry.serverParams["muteddat"] || false;
                                                menuDxnry.serverParams["followed"] = menuDxnry.serverParams["followed"] || false;
                                                menuDxnry.serverParams["deleted"] = menuDxnry.serverParams["deleted"] || false;
                                            }
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return menuDxnry.serverParams;
                                    },
                                    //#region "menucomponents"
                                    "menucomponents": {
                                        'groupLink': {
                                            method: function () {
                                                //cntrlMgr.showControl(prweb.datControls2);
                                                //self.appManager.toFullScreen();
                                                //pnlMgr.hide(300);
                                                //pnlMgr.show(0, prweb.datFeed1);
                                            },
                                            labels: ["Group link", "the link is displayed here"],
                                            glyphicon: "glyphicon glyphicon-link",
                                            iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                        },
                                        'workshopGroup': {
                                            method: function () {
                                                //cntrlMgr.showControl(prweb.datControls2);
                                                //self.appManager.toFullScreen();
                                                //pnlMgr.hide(300);
                                                //pnlMgr.show(0, prweb.datFeed1);
                                            },
                                            labels: ["Anonymous", "Change to 'dat members only"],
                                            altlabels: ["'dat Members Only", "Change to anonymous login"],
                                            glyphicon: "glyphicon glyphicon-log-in",
                                            iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                        },
                                        'groupPassword': {
                                            method: function () {
                                                //cntrlMgr.showControl(prweb.datControls2);
                                                //self.appManager.toFullScreen();
                                                //pnlMgr.hide(300);
                                                //pnlMgr.show(0, prweb.datFeed1);
                                            },
                                            labels: ["Group Password", "Login with this password"],
                                            glyphicon: "glyphicon glyphicon-check",
                                            iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                        },
                                        'Close': {
                                            method: function () {
                                                //pnlMgr.hide(300);
                                                //var dfltpnlT = pnlMgr.defaultPanelT();
                                                //pnlMgr.show(200, dfltpnlT);
                                                //self.appManager.signOut();
                                            },
                                            stay: true,
                                            labels: ["Closed", "Open this group"],
                                            altlabels: ["Open", "Close this group"],
                                            glyphicon: "glyphicon glyphicon-pencil",
                                            iconurl: prweb.pCElemHtmlDxnry["datMydats1"].resourceFile.url()
                                        }
                                    }
                                    //#endregion CommentOwner

                                };
                                //#endregion menuDxnry
                                var cmodel = function (m) {
                                    var that = {
                                        presenterT: "datGroupSettingsElem1",
                                        elementImage: ko.observable(m.iconurl),//put m.iconurl in here...
                                        menuTextA: ko.observable(m.labels[0]),
                                        menuTextB: ko.observable(m.labels[1]),
                                        menuTextC: ko.observable("this is menutextC"),
                                        glyphicon: m.glyphicon,
                                        stay: m["stay"] || false,
                                        init: m.init || false,
                                        method: m.method
                                    };
                                    return that;
                                };
                                var makemenuelem = function (xm) {
                                    var xcm = cmodel(xm.Value);
                                    rslt.push(xcm);
                                    return true;
                                };
                                var toDxnryKey = function () {
                                    xrslt = {};
                                    xrslt["GroupOwner"] = true;
                                    xrslt["GroupMember"] = false;

                                    return Enumerable.From(xrslt).Where(function (xr) { return xr.Value; })
                                        .Select(function (mk) { return mk.Key; }).FirstOrDefault();
                                };
                                var menuContext = menuDxnry[toDxnryKey()]();
                                Enumerable.From(menuContext).ForEach(function (m) { return makemenuelem(m) });
                            }
                            catch (ex) {
                                var wtf = true;
                            }

                            return rslt;
                        },
                        //addNewDataContext is called by addnewbtn in datControlsGroups1...and sends it as datacontext for datGroupEditor1
                        addNewDataContext: function () {
                            var rslt = {};
                            try { 
                                //the default model for a new group...
                                var defaultGroupData = {
                                    settings: {groupStatusTags:["AUTOANON"]},
                                };
                                var cmodel = function (m) {
                                    try {
                                        //#region toMethods
                                        var toImgUrl = function () {
                                            var rslt = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            if (m.groupImage) {
                                                try {
                                                    rslt = m.groupImage.url();
                                                }
                                                catch (ex) {

                                                }
                                            }
                                            return rslt;
                                        };
                                        var imgurl = toImgUrl();
                                        var toMembersCountText = function () {
                                            var rslt = "Members: 0";
                                            try {
                                                rslt = "Members: " + m.groupdetails["Members"];
                                            }
                                            catch (ex) {

                                            }
                                            return rslt;
                                        };
                                        var toPendingInvitesCount = function () {
                                            var rslt = "Pending Invitations: 0";
                                            try {
                                                rslt = "Pending Invitations: " + m.groupdetails["PendingInvites"];
                                            }
                                            catch (ex) {

                                            }
                                            return rslt;
                                        };
                                        var toSettingsText = function () {
                                            return "Settings";// + m.groupdetails["PendingInvites"];
                                        };
                                        var toDatsText = function () {
                                            return "'dats";// + m.groupdetails["PendingInvites"];
                                        };
                                        var toMembershipStatusText = function () {
                                            return "Owner"//dc.menuTextB();//dc is this the users view of the group
                                        };
                                        var toUsersColxn = function (filter) {

                                            return [];
                                        };
                                        var toGroupOwnerPhoto = function () {
                                            var rslt = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();

                                            return rslt;
                                        };
                                        var toGroupOwnerUserName = function () {
                                            var rslt = "testing owner";
                                            return rslt;
                                        };
                                        //#endregion toMethods
                                        var that = {
                                            //#region Observables
                                            presenterT: "datGroupEditorElem1",
                                            groupSettings: defaultGroupData["settings"],
                                            groupId: false,
                                            groupDetails: false,
                                            groupImageId: false,
                                            groupImageUrl: false,
                                            isimagepopulated: ko.observable(false),
                                            elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                            menuTextA: ko.observable("New group name..."),
                                            menuTextB: ko.observable(toMembershipStatusText()),
                                            menuTextC: ko.observable(toMembersCountText()),
                                            isOriginator: true,
                                            menuTextD: ko.observable(toPendingInvitesCount()),
                                            menuTextSettings: ko.observable(toSettingsText()),
                                            showGroupSettings: ko.observable(false),
                                            groupSettingsColxn: ko.observableArray(me.getGroupSettingsColxn(defaultGroupData) || []),
                                            menuTextDats: ko.observable(toDatsText()),
                                            showDatsColxn: ko.observable(false),
                                            groupDatsColxn: ko.observableArray(me.getDatsProfileColxn() || []),
                                            dfeDxnry: {
                                                CREATE: ko.observableArray(),
                                                FOLLOWING: ko.observableArray(),
                                                SHARED: ko.observableArray()
                                            },
                                            membersColxn: ko.observableArray(),//(toUsersColxn("MEMBERS")),
                                            pendingColxn: ko.observableArray(),//(toUsersColxn("PENDINGINVITES")),
                                            declinedColxn: ko.observableArray(),
                                            showMembers: ko.observable(false),
                                            showPendings: ko.observable(false),
                                            showEdit: ko.observable(false),
                                            stay: m["stay"] || false,
                                            ownerPhoto: ko.observable(toGroupOwnerPhoto()),
                                            ownerUserName: ko.observable(toGroupOwnerUserName()),
                                            submitHandler: function (x, e) { },
                                            showTextArea: ko.observable(false),
                                            editorVmx: ko.observable(),
                                            method: m.method,
                                            //#endregion Observables
                                            //#region tapHandlers
                                            toUserProfile: function (x, e) {
                                                try {

                                                    var userid = x.userId || x.groupDetails.groupOwner.userId || false;
                                                    if (userid) {
                                                        var tocntrlT = navMgr.me(prweb.datControlsGroupsDetail1).to(prweb.datControlsUserProfile);
                                                        var sourceproperties = { datacontext: that };
                                                        var toT = navMgr.me(prweb.datGroupsDetail1).to(prweb.datUserProfile1, sourceproperties);

                                                        var mypnl = pnlMgr.hide(300).datacontext(false);
                                                        cntrlMgr.showControl(tocntrlT);
                                                        pnlMgr.show(200, prweb.datUserProfile1).datacontext(userid);
                                                        var yes = true;
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                            },
                                            toUserPhotoUrl: function (x, e) {
                                                var user = x;
                                                return prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            },
                                            settingsTap: function (x, e) {
                                                var xval = that.showGroupSettings();
                                                if (!xval) {
                                                    that.showPendings(false);
                                                    that.showDatsColxn(false);
                                                    that.showMembers(false);
                                                }
                                                that.showGroupSettings(!xval);
                                            },
                                            datsTap: function (x, e) {
                                                var xval = that.showDatsColxn();
                                                if (!xval) {
                                                    that.showPendings(false);
                                                    that.showGroupSettings(false);
                                                    that.showMembers(false);
                                                }
                                                that.showDatsColxn(!xval);
                                            },
                                            membersTap: function (x, e) {
                                                var xval = that.showMembers();
                                                if (!xval) {
                                                    that.showPendings(false);
                                                }
                                                that.showMembers(!xval);
                                            },
                                            pendingsTap: function (x, e) {
                                                var xval = that.showPendings();
                                                if (!xval) {
                                                    that.showMembers(false);
                                                }
                                                that.showPendings(!xval);
                                            },
                                            editTap: function (x, e) {
                                                var xval = that.showEdit();
                                                that.showEdit(!xval);
                                            },
                                            //#endregion tapHandlers
                                            dispose: false
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        return false;
                                    }

                                };
                                rslt = {
                                    "addNew": true,
                                    "cmodelarray": [cmodel(defaultGroupData)],
                                    dispose: false
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                                rslt = false;
                            }
                            return rslt;
                        },
                        editExistingDataContext: function () {
                            var cmodel = function (m) {
                                try {
                                    var toImgUrl = function () {
                                        var rslt = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                        if (m.groupImage) {
                                            try {
                                                rslt = m.groupImage.url();
                                            }
                                            catch (ex) {

                                            }
                                        }
                                        return rslt;
                                    };
                                    var imgurl = toImgUrl();
                                    var toMembersCountText = function () {
                                        return "Members: " + m.groupdetails["Members"]
                                    };
                                    var toPendingInvitesCount = function () {
                                        return "Pending Invitations: " + m.groupdetails["PendingInvites"];
                                    };
                                    var toMembershipStatusText = function () {
                                        return dc.menuTextB();//dc is this the users view of the group
                                    };
                                    var toUsersColxn = function (filter) {
                                        var rslt = m.groupdetails[filter];
                                        var defurl = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                        try {
                                            rslt = Enumerable.From(m.groupdetails[filter]).Select(function (ur) {
                                                ur["userPhotoUrl"] = ko.observable(defurl);
                                                if (ur.owner) {
                                                    try {
                                                        var xurl = ur.owner.url() || ur.owner.url || false;
                                                        if (xurl) {
                                                            ur["userPhotoUrl"] = ko.observable(xurl);
                                                        }
                                                    }
                                                    catch (ex) { }
                                                }
                                                ur["userFollowers"] = ko.observable("No Followers");
                                                try {
                                                    var xval = ur.followers || false;
                                                    if (xval) {
                                                        ur["userFollowers"] = ko.observable(xval + " Followers");
                                                    }
                                                }
                                                catch (ex) { }
                                                return ur;
                                            }).ToArray();
                                        }
                                        catch (ex) {
                                            var wtf = ex.message;
                                        }

                                        return rslt;
                                    };
                                    var toGroupOwnerPhoto = function () {
                                        var rslt = "";
                                        var user = m.groupdetails["ORIGINATOR"][0] || false;
                                        if (user) {
                                            rslt = user.owner.url() || false;
                                        }
                                        return rslt;
                                    };
                                    var toGroupOwnerUserName = function () {
                                        var rslt = "";
                                        var user = m.groupdetails["ORIGINATOR"][0] || false;
                                        if (user) {
                                            rslt = user.userName || false;
                                        }
                                        return rslt;
                                    };
                                    //#region vMx...that
                                    var that = {
                                        presenterT: "datGroupEditorElem1",
                                        groupId: m.groupId,
                                        groupDetails: m.groupdetails,
                                        groupImageId: m.groupImageId,
                                        elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                        menuTextA: ko.observable(m.groupName),
                                        menuTextB: ko.observable(toMembershipStatusText()),
                                        menuTextC: ko.observable(toMembersCountText()),
                                        isOriginator: dc.isOriginator,
                                        menuTextD: ko.observable(toPendingInvitesCount()),
                                        membersColxn: ko.observableArray(toUsersColxn("MEMBERS")),
                                        pendingColxn: ko.observableArray(toUsersColxn("PENDINGINVITES")),
                                        declinedColxn: ko.observableArray(),
                                        showMembers: ko.observable(false),
                                        showPendings: ko.observable(false),
                                        showEdit: ko.observable(false),
                                        stay: m["stay"] || false,
                                        ownerPhoto: ko.observable(toGroupOwnerPhoto()),
                                        ownerUserName: ko.observable(toGroupOwnerUserName()),
                                        toUserProfile: function (x, e) {
                                            try {

                                                var userid = x.userId || x.groupDetails.groupOwner.userId || false;
                                                if (userid) {
                                                    var tocntrlT = navMgr.me(prweb.datControlsGroupsDetail1).to(prweb.datControlsUserProfile);
                                                    var sourceproperties = { datacontext: that };
                                                    var toT = navMgr.me(prweb.datGroupsDetail1).to(prweb.datUserProfile1, sourceproperties);

                                                    var mypnl = pnlMgr.hide(300).datacontext(false);
                                                    cntrlMgr.showControl(tocntrlT);
                                                    pnlMgr.show(200, prweb.datUserProfile1).datacontext(userid);
                                                    var yes = true;
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        toUserPhotoUrl: function (x, e) {
                                            var user = x;
                                            return prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                        },
                                        membersTap: function (x, e) {
                                            var xval = that.showMembers();
                                            if (!xval) {
                                                that.showPendings(false);
                                            }
                                            that.showMembers(!xval);
                                        },
                                        pendingsTap: function (x, e) {
                                            var xval = that.showPendings();
                                            if (!xval) {
                                                that.showMembers(false);
                                            }
                                            that.showPendings(!xval);
                                        },
                                        editTap: function (x, e) {
                                            var xval = that.showEdit();
                                            that.showEdit(!xval);
                                        },
                                        submitHandler: function (x, e) { },
                                        showTextArea: ko.observable(false),
                                        editorVmx: ko.observable(),
                                        method: m.method
                                    };
                                    //#endregion
                                    return that;
                                }
                                catch (ex) {
                                    return false;
                                }

                            };
                        },
                        getDatsProfileColxn: function () {
                            var userid = Parse.User.current().id;
                            var fltrproms = [];
                            //fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "FOLLOWING"));
                            //fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "SHARED"));
                            return [];
                            //fltrproms.push(prweb.parseManager.getDatsProfileFiltered(userid, "CREATED"));
                            //return Parse.Promise.when(fltrproms).then(function (rslt) {
                            //    try {
                            //        if (rslt[1]) {
                            //            var dfe1 = rslt[1].datsColxn || false;
                            //            if (dfe1) {
                            //                var f1 = [];
                            //                f1 = dfe1.datFeedElements || [];
                            //                //cmodel["dfecolxnshared"](f1);
                            //            } else {
                            //                //cmodel["dfecolxnshared"]([]);
                            //                //cmodel["dfeDxnry"]["SHARED"]([]);
                            //            }
                            //        }//I think this order of encountering rslt and populating dfeDxnry is required...don't change it...
                            //        if (rslt[0]) {
                            //            var dfe0 = rslt[0].datsColxn || false;
                            //            if (dfe0) {
                            //                var f0 = [];
                            //                f0 = dfe0.datFeedElements || [];
                            //                //cmodel["dfeDxnry"]["FOLLOWING"](f0);
                            //            } else {
                            //                //cmodel["dfeDxnry"]["FOLLOWING"]([]);
                            //            }
                            //        }
                            //    }
                            //    catch (ex) {
                            //        var wtf = truel
                            //    }
                            //    return [];
                            //});
                        },
                        dispose: false
                    };
                    return me;
                };
                //#endregion datGroupEditSvc
                //#region datControlsGroupEditor1
                if (!ko.bindingHandlers.datControlsGroupEditor1) {
                    ko.bindingHandlers.datControlsGroupEditor1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            //cntrlMgr.control(prweb.datControlsGroupsDetail1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsGroupEditor1).panelprops()['username'] = ko.observable("Edit Group");
                            $("#datcontrolsgroupeditorbackbtn").on(self.xevent, function (e) {
                                try { 
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.panel(prweb.datGroupEditor1).datacontext(false);
                                navMgr.me(prweb.datControlsGroupEditor1).returnfromlast();
                                cntrlMgr.showControl(prweb.datControlsGroups1);
                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datGroups1).datacontext.valueHasMutated();
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                            //TODO: NEEDS A DONE SAVED EDIT button...like in userProfile and datEditor...
                            $("#datcontrolsgroupeditoreditbtn").on(self.xevent, function (e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    pnlMgr.panel(prweb.datGroupEditor1)["datGroupEditSvc"]["doneHandler"]();
                                    //navMgr.me(prweb.datControlsGroupEditor1).returnfromlast();
                                    //cntrlMgr.showControl(prweb.datControlsGroups1);
                                    //pnlMgr.hide(300);
                                    //pnlMgr.show(200, prweb.datGroups1);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsGroupEditor1
                //#region datGroupEditor1
                if (!ko.bindingHandlers.datGroupEditor1) {
                    ko.bindingHandlers.datGroupEditor1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datGroupEditor1, element).hide(0, prweb.datGroupEditor1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"] = ko.observable(minheight);
                            pnl.panelprops()['initScrollRoot'] = "scrollrootdatGroupEditor1";
                            self._initiateMalihuScroll("scrollrootdatGroupEditor1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsGroupEditor1);
                            };
                            pnl["datGroupEditSvc"] = {};
                            //$("#datbackgroupeditorbtn").bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    navMgr returnfromlast();
                            //    pnlMgr.hide(0, prweb.datGroupEditor1);
                            //});

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = bindingContext.$data;
                            var dc = pnl.datacontext() || false;
                            //dc contains the groupmodel sent in getGroups...
                            if (dc !== false) {
                                try { 
                                    bindingContext.$data["showTextArea"] = ko.observable(false);
                                    var cmodelarray = [];
                                    if (dc["addNew"]) {
                                        
                                        cntrlMgr.control(prweb.datControlsGroupEditor1).panelprops()['username']("Create Group");
                                        cmodelarray = dc.cmodelarray;//is created by datGroupEditSvc...called from datControlsGroups1 addNew
                                        //#region addEditorVmx
                                        datGroupEditSvc(pnl).addEditorVmx(cmodelarray[0], cmodelarray[0]);
                                        //#endregion addEditorVmx
                                        pnl.contentmodelcolxn(cmodelarray);
                                        pnl["datGroupEditSvc"] = datGroupEditSvc(bindingContext.$data).init();

                                    } else {
                                        cntrlMgr.control(prweb.datControlsGroupEditor1).panelprops()['username']("Edit Group");
                                        cmodelarray = datGroupEditSvc().editExistingDataContext(dc);
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                
                                
                            } else {
                                pnlMgr.panel(prweb.datGroupEditor1).contentmodelcolxn([]);
                            }
                        }
                    };
                };
                if (!ko.bindingHandlers.datGroupEditorElem1) {
                    ko.bindingHandlers.datGroupEditorElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var $elem = $(element);
                            //$elem.bind(self.xevent, function () {
                            //    var yes = true;
                            //    //if (bindingContext.$data["stay"]) {
                            //    //    bindingContext.$data.method();
                            //    //} else {
                            //    //    pnlMgr.navigateMenuClick(bindingContext.$data.method, prweb.datMenu1);
                            //    //    self.appManager.navigateMenuClick($elem);
                            //    //}
                            //});
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datGroupEditor1

                //#region datControlsGroupsDetail1
                if (!ko.bindingHandlers.datControlsGroupsDetail1) {
                    ko.bindingHandlers.datControlsGroupsDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            //cntrlMgr.control(prweb.datControlsGroupsDetail1).panelprops()['username'](username);
                            cntrlMgr.control(prweb.datControlsGroupsDetail1).panelprops()['selected'] = ko.observable("Group");
                            $("#datcontrolsgroupsdetailbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.panel(prweb.datGroupsDetail1).datacontext(false);
                                navMgr.me(prweb.datControlsGroupsDetail1).returnfromlast();
                                cntrlMgr.showControl(prweb.datControlsGroups1);
                                
                                pnlMgr.show(300, prweb.datGroups1);
                                pnlMgr.hide(300, prweb.datGroupsDetail1);
                                
                            });
                            $("#datcontrolsgroupeditoreditbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.panel(prweb.datGroupsDetail1).datacontext(false);
                                navMgr.me(prweb.datControlsGroupsDetail1).to(prweb.datGroupEditor1);
                                cntrlMgr.showControl(prweb.datControlsGroupEditor1);
                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datGroupEditor1).datacontext(bindingContext);

                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsGroupsDetail1
                //#region datGroupsDetail1
                if (!ko.bindingHandlers.datGroupsDetail1) {
                    ko.bindingHandlers.datGroupsDetail1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datGroupsDetail1, element).hide(0, prweb.datGroupsDetail1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatGroupsDetail1");
                            pnl["onShow"] = function () {
                                cntrlMgr.showControl(prweb.datControlsGroupsDetail1);
                            };
                            bindingContext.$data["tapjoinhandler"] = function (x, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var dc = bindingContext.$data.datacontext() || false;
                                    //dc contains the groupmodel sent in getGroups...
                                    if (dc !== false) {
                                        var parms = {
                                            groupid: dc.groupId,
                                            updateType: "Join"
                                        };
                                        return prweb.parseManager.groupUpdate(parms).then(function (xr) {
                                            x.menuTextB("Member");
                                            return xr;
                                        }).fail(function (ex) {
                                            return Parse.Promise.as(ex);
                                        })
                                    }
                                    
                                    var yes = true;
                                }
                                catch (ex) {
                                    var wtf = true;
                                    return Parse.Promise.as(ex);
                                }
                            };
                            bindingContext.$data["tapdeclinehandler"] = function (x, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var yes = true;
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                            bindingContext.$data["tapdeletehandler"] = function (x, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var yes = true;
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                            //$("#datbackgroupsbtn").bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    pnlMgr.hide(0, prweb.datGroups1);
                            //});

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            //dc contains the groupmodel sent in getGroups...
                            if (dc !== false) {
                                
                                var cmodelarray = [];
                                var cmodel = function (m) {
                                    try {
                                        var toImgUrl = function () {
                                            var rslt = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            if (m.groupImage) {
                                                try {
                                                    rslt = m.groupImage.url();
                                                }
                                                catch (ex) {

                                                }
                                            }
                                            return rslt;
                                        };
                                        var imgurl = toImgUrl();
                                        var toMembersCountText = function () {
                                            return "Members: " + m.groupdetails["Members"]
                                        };
                                        var toPendingInvitesCount = function () {
                                            return "Pending Invitations: " + m.groupdetails["PendingInvites"];
                                        };
                                        var toMembershipStatusText = function () {
                                            return dc.menuTextB();//dc is this the users view of the group
                                        };
                                        var toUsersColxn = function (filter) {
                                            var rslt = m.groupdetails[filter];
                                            var defurl = prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            try {
                                                rslt = Enumerable.From(m.groupdetails[filter]).Select(function (ur) {
                                                    ur["userPhotoUrl"] = ko.observable(defurl);
                                                    if (ur.owner) {
                                                        try {
                                                            var xurl = ur.owner.url() || ur.owner.url || false;
                                                            if (xurl) {
                                                                ur["userPhotoUrl"] = ko.observable(xurl);
                                                            }
                                                        }
                                                        catch (ex) { }
                                                    }
                                                    ur["userFollowers"] = ko.observable("No Followers");
                                                    try {
                                                        var xval = ur.followers || false;
                                                        if (xval) {
                                                            ur["userFollowers"] = ko.observable(xval + " Followers");
                                                        }
                                                    }
                                                    catch (ex) { }
                                                    try {
                                                        var xms = ur.MemberSince || false;
                                                        if (xms) {
                                                            ur["userMemberSince"] = ko.observable(prweb.timeAgoFromParseTime(xms));
                                                        }
                                                    }
                                                    catch (ex) { }
                                                    return ur;
                                                }).ToArray();
                                            }
                                            catch (ex) {
                                                var wtf = ex.message;
                                            }

                                            return rslt;
                                        };
                                        var toGroupOwnerPhoto = function () {
                                            var rslt = "";
                                            var user = m.groupdetails["ORIGINATOR"][0] || false;
                                            if (user) {
                                                rslt = user.owner.url() || false;
                                            }
                                            return rslt;
                                        };
                                        var toGroupOwnerUserName = function () {
                                            var rslt = "";
                                            var user = m.groupdetails["ORIGINATOR"][0] || false;
                                            if (user) {
                                                rslt = user.userName || false;
                                            }
                                            return rslt;
                                        };
                                        var that = {
                                            presenterT: "datGroupsDetailElem1",
                                            groupId: m.groupId,
                                            groupDetails: m.groupdetails,
                                            groupImageId: m.groupImageId,
                                            elementImage: ko.observable(imgurl),//put m.iconurl in here...
                                            menuTextA: ko.observable(m.groupName),
                                            menuTextB: ko.observable(toMembershipStatusText()),
                                            menuTextC: ko.observable(toMembersCountText()),
                                            menuTextD: ko.observable(toPendingInvitesCount()),
                                            isOriginator: dc.isOriginator,
                                            membersColxn: ko.observableArray(toUsersColxn("MEMBERS")),
                                            pendingColxn: ko.observableArray(toUsersColxn("PENDINGINVITES")),
                                            declinedColxn: ko.observableArray(),
                                            showMembers: ko.observable(false),
                                            showPendings: ko.observable(false),
                                            showEdit: ko.observable(false),
                                            stay: m["stay"] || false,
                                            ownerPhoto: ko.observable(toGroupOwnerPhoto()),
                                            ownerUserName: ko.observable(toGroupOwnerUserName()),
                                            toUserProfile: function (x, e) {
                                                try {
                                                    
                                                    var userid = x.userId || x.groupDetails.groupOwner.userId || false;
                                                    if (userid) {
                                                        var tocntrlT = navMgr.me(prweb.datControlsGroupsDetail1).to(prweb.datControlsUserProfile);
                                                        var sourceproperties = { datacontext: that };
                                                        var toT = navMgr.me(prweb.datGroupsDetail1).to(prweb.datUserProfile1, sourceproperties);
                                                        
                                                        var mypnl = pnlMgr.hide(300).datacontext(false);
                                                        cntrlMgr.showControl(tocntrlT);
                                                        pnlMgr.show(200, prweb.datUserProfile1).datacontext(userid);
                                                        var yes = true;
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }  
                                            },
                                            toUserPhotoUrl: function (x, e) {
                                                var user = x;
                                                return prweb.pCElemHtmlDxnry["datGroupsIcon1"].resourceFile.url();
                                            },
                                            membersTap: function (x, e) {
                                                var xval = that.showMembers();
                                                if (!xval) {
                                                    that.showPendings(false);
                                                }
                                                that.showMembers(!xval);
                                            },
                                            pendingsTap: function (x, e) {
                                                var xval = that.showPendings();
                                                if (!xval) {
                                                    that.showMembers(false);
                                                }
                                                that.showPendings(!xval);
                                            },
                                            editTap: function (x, e) {
                                                var xval = that.showEdit();
                                                that.showEdit(!xval);
                                            },
                                            method: m.method
                                        };
                                        return that;
                                    }
                                    catch (ex) {
                                        return false;
                                    }

                                };
                                var parms = {
                                    groupid: dc.groupId,
                                    xfilter: false,
                                    limit: 20,
                                    skip: 0
                                };
                                return prweb.parseManager.getGroups(parms).then(function (xr) {
                                    var makemenuelem = function (xm) {
                                        var xcm = cmodel(xm);
                                        if (xcm) {
                                            cmodelarray.push(xcm);
                                        }
                                        return true;
                                    };
                                    Enumerable.From(xr).ForEach(function (m) { return makemenuelem(m) });
                                    pnlMgr.panel(prweb.datGroupsDetail1).contentmodelcolxn(cmodelarray);
                                    if (dc.isOriginator) {
                                        $("#datgroupsdetaileditbtn").removeClass("dathide");
                                    } else {
                                        $("#datgroupsdetaileditbtn").addClass("dathide");
                                    }
                                    //pnl.contentmodelcolxn(cmodelarray);
                                    //self._initiateMalihuScroll("scrollrootdatGroupsDetail1");
                                });
                            } else {
                                pnlMgr.panel(prweb.datGroupsDetail1).contentmodelcolxn([]);
                                $("#datgroupsdetaileditbtn").addClass("dathide");
                            }
                        }
                    };
                };
                if (!ko.bindingHandlers.datGroupsDetailElem1) {
                    ko.bindingHandlers.datGroupsDetailElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var $elem = $(element);
                            //$elem.bind(self.xevent, function () {
                            //    var yes = true;
                            //    //if (bindingContext.$data["stay"]) {
                            //    //    bindingContext.$data.method();
                            //    //} else {
                            //    //    pnlMgr.navigateMenuClick(bindingContext.$data.method, prweb.datMenu1);
                            //    //    self.appManager.navigateMenuClick($elem);
                            //    //}
                            //});
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                        }
                    };
                };
                //#endregion datGroups1

                
                //#region datControlsNotify
                if (!ko.bindingHandlers.datControlsNotify) {
                    ko.bindingHandlers.datControlsNotify = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = "";//self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsNotify).panelprops()['username']("Notifications");
                            $("#datcontrolnotifybackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var tocntrlT = navMgr.me(prweb.datControlsNotify).returnfromlast();
                                cntrlMgr.showControl(tocntrlT);
                                //var backtoT = navMgr.me(prweb.datNotify1).returnfromlast();
                                var hiddenpnl = pnlMgr.hide(300);
                                var btoTObj = navMgr.me(prweb.datNotify1).returnfromlast(true);
                                //hiddenpnl.datacontext(false);
                                //pnlMgr.panel(prweb.datNotify1).datacontext(false);
                                var toPnl = pnlMgr.show(0, btoTObj["T"]);
                                if (btoTObj["T"] !== prweb.datFeed1) {
                                    toPnl.datacontext(btoTObj["properties"]["datacontext"]);
                                }
                                
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsNotify
                //#region datNotify1
                if (!ko.bindingHandlers.datNotify1) {
                    ko.bindingHandlers.datNotify1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datNotify1, element).hide(0, prweb.datNotify1);
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"](minheight);
                                self._initiateMalihuScroll("scrollrootdatNotify1");
                                bindingContext.$data["toUserProfile"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;

                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    try {
                                        var dc = false;
                                        dc = data.userId;
                                        var tocntrlT = navMgr.me(prweb.datControlsNotify).to(prweb.datControlsUserProfile);
                                        cntrlMgr.showControl(tocntrlT);
                                        //pnlMgr.panel(prweb.datUserProfile1);
                                        //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                        var hiddenpnl = pnlMgr.hide(300);
                                        var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                        var toT = navMgr.me(prweb.datNotify1).to(prweb.datUserProfile1, sourceproperties);
                                        pnlMgr.show(200, toT).datacontext(dc);//.backtoT(prweb.datNotify1);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    //#endregion
                                };
                                bindingContext.$data["toOwnerUserProfile"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;

                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    try {
                                        var dc = false;
                                        dc = data.datfeedelement.userId;
                                        var tocntrlT = navMgr.me(prweb.datControlsNotify).to(prweb.datControlsUserProfile);
                                        cntrlMgr.showControl(tocntrlT);
                                        //pnlMgr.panel(prweb.datUserProfile1);
                                        //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                        var hiddenpnl = pnlMgr.hide(300);
                                        var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                        var toT = navMgr.me(prweb.datNotify1).to(prweb.datUserProfile1, sourceproperties);
                                        pnlMgr.show(200, toT).datacontext(dc);//.backtoT(prweb.datNotify1);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    //#endregion
                                };
                                
                                //#region notifymsgtypeDxnry
                                var notifymsgtypeDxnry = {
                                    group_deleteuser_member: {
                                        msg: ["removed you from this group", "removed you from this group"],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    group_deletegroup_originator: {
                                        msg: ["declined your group.", "others declined your group."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    group_reject_originator: {
                                        msg: ["declined your group.", "others declined your group."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    group_resign_originator: {
                                        msg: ["left your group.", "others also left your group."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    group_join_originator: {
                                        msg: ["joined your group.", "others also joined your group."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    group_invitation_recipient: {
                                        msg: ["invited you to join this group.", "others invited you to join this group."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    dat_shared_recipient: {
                                        msg: ["shared this 'dat with you.", "others also shared this 'dat with you."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    dat_shared: {
                                        msg: ["shared this'dat.", "others also shared this'dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    dat_followed: {
                                        msg: ["is now following your 'dat.", "others are also, now following your 'dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    dat_unfollowed: {
                                        msg: ["unfollowed your 'dat.", "others also unfollowed your 'dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    user_followed: {
                                        msg: ["is now following your 'dats.", "others are also, now following your 'dats."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    user_unfollowed: {
                                        msg: ["unfollowed your 'dats.", "others also unfollowed your 'dats."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    comment_added: {
                                        msg: ["commented on this 'dat.", "others also commented on this 'dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    dat_created: {
                                        msg: ["created a 'dat.", "created a 'dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    },
                                    response_counted: {
                                        msg: ["responded to this 'dat.", "others also responded to this dat."],
                                        sourceuser: false,
                                        otherscount: 0
                                    }
                                };
                                //#endregion
                                //#region cmodel definition
                               var cmodel = function (notifsummary) {
                                   var that = {
                                       IsRelatedUser: false,
                                       IsGroup: false,
                                       IsDat: false,
                                       msgcolxn: [],
                                       userId: false,
                                       sourceuserphoto: false,
                                       timeAgo: ""
                                   };
                                   
                                   that.msgcolxn = Enumerable.From(notifsummary).Select(function (msgtyperow) {
                                       that.timeAgo = prweb.timeAgoFromParseTime(msgtyperow.users.details[0].dates[0]) || "";
                                       if (that.sourceuserphoto == false) {
                                           try {
                                               that.userId = msgtyperow.users.details[0].owner.userId;
                                               that.sourceuserphoto = msgtyperow.users.details[0].owner.owner.url() || msgtyperow.users.details[0].owner.owner.url;
                                           }
                                           catch (ex) {
                                               that.sourceuserphoto = prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;
                                           }
                                          
                                       }
                                       var msgparts = []; 
                                       if (msgtyperow.users.count == 1) {
                                           msgparts.push(msgtyperow.users.details[0].owner.userName);
                                           msgparts.push(notifymsgtypeDxnry[msgtyperow.msgtype].msg[0])
                                       } else if (msgtyperow.users.count > 1) {
                                           msgparts.push(msgtyperow.users.details[0].owner.userName);
                                           msgparts.push("and");
                                           msgparts.push((msgtyperow.users.count - 1).toString());
                                           msgparts.push(notifymsgtypeDxnry[msgtyperow.msgtype].msg[1])
                                       }
                                       
                                       return Enumerable.From(msgparts).ToString(" ");
                                   }).ToArray()
                                   return that;
                                };
                                //#endregion
                               var existingcolxn = [];
                               var badgecolxn = [];
                               pnl["retrieveNotifications"] = function (badgeonly) {
                                   var cmodelarray = [];
                                   //#region Cloude.loadMyNotifications
                                   return prweb.parseManager.loadMyNotifications({ limit: 8, skip: 0 }).then(function (xr) {
                                       Enumerable.From(xr["RELATEDUSERS"]).ForEach(function (r) {
                                           var torelatedusermodel = function (row) {
                                               var mdl = cmodel(row.notifySummary);
                                               mdl["IsRelatedUser"] = true;
                                               mdl["relatedUser"] = row.relatedUser;
                                               mdl["relatedUserName"] = mdl["relatedUser"].userName;
                                               try {
                                                   mdl["relatedUserPhoto"] = mdl["relatedUser"].owner.url() || mdl["relatedUser"].owner.url;
                                               }
                                               catch (ex) {
                                                   mdl["relatedUserPhoto"] = prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;
                                               }

                                               return mdl;
                                           };
                                           cmodelarray.push(torelatedusermodel(r));
                                       });
                                       Enumerable.From(xr["GROUPS"]).ForEach(function (r) {
                                           var togroupmodel = function (row) {
                                               var mdl = cmodel(row.notifySummary);
                                               mdl["IsGroup"] = true;
                                               mdl["groupImage"] = row.groupmetadata.groupImage.url() || row.groupmetadata.groupImage.url;
                                               try {
                                                   mdl["groupOwner"] = row.groupmetadata.groupOwner.url() || row.groupmetadata.groupOwner.url;
                                               }
                                               catch (ex) {
                                                   mdl["groupOwner"] = prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;
                                               }
                                               mdl["groupName"] = row.groupmetadata.groupName;
                                               //mdl["updatedAt"] = row.datfeedelement.updatedat;
                                               //mdl["timeago"] = "Updated " + prweb.timeAgoFromParseTime(mdl["updatedAt"]);
                                               return mdl;
                                           };
                                           cmodelarray.push(togroupmodel(r));
                                       });
                                       Enumerable.From(xr["DATS"]).ForEach(function (r) {
                                           var todatmodel = function (row) {
                                               var mdl = cmodel(row.notifySummary);
                                               mdl["IsDat"] = true;
                                               var toElementImage = function (dfe) {
                                                   var rslt = false;
                                                   try {
                                                       switch (true) {
                                                           case (dfe.datType == 1 || dfe.datType == 11 || dfe.datType == 12):
                                                               var imgj = dfe.winner.elementImage;//.elementImage//.toJSON();
                                                               rslt = imgj.url() || imgj.url;
                                                               break;
                                                           case (dfe.datType == 2):
                                                               var imgj = dfe.otherdcelems[0].elementImage;//.toJSON();
                                                               rslt = imgj.url() || imgj.url;
                                                               break;
                                                           case (dfe.datType == 3):
                                                               var imgj = dfe.otherdcelems[0].elementImage;//.toJSON();
                                                               rslt = imgj.url() || imgj.url;
                                                               break;
                                                       }
                                                   }
                                                   catch (ex) {
                                                       var wtf = true;
                                                   }
                                                   return rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;
                                               };
                                               mdl["elementImage"] = toElementImage(row.datfeedelement);
                                               mdl["datOwner"] = row.datfeedelement.datOwner;
                                               try {
                                                   mdl["ownerPhoto"] = mdl["datOwner"].url() || mdl["datOwner"].url;
                                               }
                                               catch (ex) {
                                                   mdl["ownerPhoto"] = prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;
                                               }
                                               mdl["userName"] = row.datfeedelement.datUsername;
                                               mdl["datfeedelement"] = row.datfeedelement;
                                               mdl["updatedAt"] = row.datfeedelement.updatedAt;
                                               mdl["timeago"] = "Updated " + prweb.timeAgoFromParseTime(mdl["updatedAt"]);
                                               return mdl;
                                           };
                                           cmodelarray.push(todatmodel(r));
                                       });
                                       badgecolxn = Enumerable.From(cmodelarray).Concat(badgecolxn).ToArray();
                                       var badgecount = badgecolxn.length || 0;
                                       var cntl = cntrlMgr.control(prweb.datControls2);
                                       cntl.panelprops()["badgecount"](badgecount);
                                       return cmodelarray;
                                   }).fail(function (ex) {
                                       prweb.log("prweb.datwebappmain.loadMyNotificationss promise catch..." + ex.message.toString());
                                   });
                                   //#endregion
                               };
                               
                               pnl["onShow"] = function () {
                                   existingcolxn = ko.unwrap(bindingContext.$data.contentmodelcolxn);
                                   return pnl["retrieveNotifications"]().then(function (xr) {
                                       //do something with existingcolxn and xr ...both are arrays of notifyElemes
                                       existingcolxn = Enumerable.From(badgecolxn).Concat(existingcolxn).ToArray();
                                       bindingContext.$data.contentmodelcolxn(existingcolxn);
                                       badgecolxn = [];
                                       var cntl = cntrlMgr.control(prweb.datControls2);
                                       cntl.panelprops()["badgecount"](0);
                                    });
                               };
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datNotify1.init reports catch exception... " + ex.Message);
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#endregion
                //#region datNotifyElem1
                if (!ko.bindingHandlers.datNotifyElem1) {
                    ko.bindingHandlers.datNotifyElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            $('.datnotify1btn', $(elem)).bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    var dfe = bindingContext.$data["datfeedelement"] || false;
                                    if (dfe) {
                                        datSingleContextMgr(prweb.datNotify1).navigateTo(dfe);
                                    }
                                    
                                }
                                catch (ex) {
                                    var xx = 2;
                                }
                                //#endregion
                                
                                
                            });
                            
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                            var xx = 2;
                        }
                    };
                };
                //#endregion
                

                //#region datControlsFeedFilter
                if (!ko.bindingHandlers.datControlsFeedFilter) {
                    ko.bindingHandlers.datControlsFeedFilter = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var username = self.mydatappVmx.parseuser().getUsername();
                            cntrlMgr.control(prweb.datControlsFeedFilter).panelprops()['username'](username);
                            $("#datcontrolfeedfilterbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                cntrlMgr.showControl(prweb.datControls2);
                                try {
                                    pnlMgr.panel(prweb.datFeed1)["feedFilterUpdate"]();//this will be ok but need to get non observable feedFilter...
                                }
                                catch (ex) {

                                }

                                pnlMgr.hide(300);
                                pnlMgr.show(200, prweb.datFeed1);

                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsFeedFilter
                //#region datFeedFilter1
                if (!ko.bindingHandlers.datFeedFilter1) {
                    ko.bindingHandlers.datFeedFilter1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datFeedFilter1, element).hide(0, prweb.datFeedFilter1);
                                //this toggle function turns on/off css styles bound in html click: $root.toggle.bind($parent, $root)
                                var scroptions = {
                                    theme: "minimal-dark"
                                }
                                self._initiateMalihuScroll("scrollrootdatFeedFilter1", scroptions);
                                pnl["toggle"] = function (xroot, data, elem) {
                                    var xthis = this;//is $parent in html bind call...first parameter...sends whatever you want this to be...
                                    var xval = data.val();
                                    Enumerable.From(xthis.members).ForEach(function (r) {
                                        r.val(false);
                                        return;
                                    });
                                    data.val(!xval);
                                    pnlMgr.panel(prweb.datFeed1)["feedFilterManager"]["feedFilterObservable"] = bindingContext.$data.contentmodelcolxn();
                                };
                                //#region populatecontentModelColxn - This does Cloud.loadMyDats
                                //#region populatecontentmodel 
                                var cmodelarray = [];
                                var filters = [
                                        {
                                            heading: "'dats to me",
                                            target: "datstome",
                                            targetid: "#datstome",
                                            members: [{
                                                label: "all 'dats to me", key: "datsToMe_All", keyid: "#datsToMe_All", val: ko.observable(true) 
                                            },
                                            { label: "recent responses", key: "datstome_Recent", keyid: "#datstome_Recent", val: ko.observable(false) },
                                            { label: "awaiting my response", key: "datstome_Waiting", keyid: "#datstome_Waiting", val: ko.observable(false) },
                                            { label: "closed", key: "datstome_Closed", keyid: "#datstome_Closed", val: ko.observable(false) }
                                            ]
                                        },
                                        {
                                            heading: "'dats I created",
                                            target: "datscreated",
                                            targetid: "#datscreated",
                                            members: [{ label: "all 'dats I created", key: "datsIcreated_All", keyid: "#datsIcreated_All", val: ko.observable(true) },
                                            { label: "recent responses", key: "datsIcreated_Recent", keyid: "#datsIcreated_Recent", val: ko.observable(false) },
                                            { label: "'dats I've closed", key: "datsIcreated_Closed", keyid: "#datsIcreated_Closed", val: ko.observable(false) }
                                            ]
                                        }, {
                                            heading: "public 'dats trending",
                                            target: "datspublic",
                                            targetid: "#datspublic",
                                            members: [{ label: "all public 'dats", key: "datsPublic_All", keyid: "#datsPublic_All", val: ko.observable(true) },
                                            { label: "recent responses", key: "datsPublic_Recent", keyid: "#datsPublic_Recent", val: ko.observable(false) },
                                            { label: "closed", key: "datsPublic_Closed", keyid: "#datsPublic_Closed", val: ko.observable(false) }
                                            ]
                                        },
                                        {
                                            heading: "'dats I followed",
                                            target: "datsfollowed",
                                            targetid: "#datsfollowed",
                                            members: [{ label: "all 'dats I followed", key: "datsIfollowed_All", keyid: "#datsIfollowed_All", val: ko.observable(true) },
                                            { label: "recent responses", key: "datsIfollowed_Recent", keyid: "#datsIfollowed_Recent", val: ko.observable(false) },
                                            { label: "closed", key: "datsIfollowed_Closed", keyid: "#datsIfollowed_Closed", val: ko.observable(false) }
                                            ]
                                        }, {
                                            heading: "'dats I shared",
                                            target: "datsshared",
                                            targetid: "#datsshared",
                                            members: [{ label: "all 'dats I shared", key: "datsIshared_All", keyid: "#datsIshared_All", val: ko.observable(true) },
                                            { label: "recent responses", key: "datsIshared_Recent", keyid: "#datsIshared_Recent", val: ko.observable(false) },
                                            { label: "closed", key: "datsIshared_Closed", keyid: "#datsIshared_Closed", val: ko.observable(false) }
                                            ]
                                        }];
                                var populatecontentmodel = function (filterscolxn) {
                                    //#region cmodel definition and push to array foreach dat from getDats
                                    
                                    
                                
                                    //for (var n in filterscolxn) {
                                    //    //#region cmodel definition and push
                                    //    var cmodel = function () {
                                    //        var that = {
                                    //            heading: filterscolxn[n],
                                    //            targetid: "#" + filterscolxn[n]
                                    //        };
                                    //        return that;
                                    //    };
                                    //    cmodelarray.push(cmodel());
                                    //    //#endregion
                                    //};
                                    //#endregion
                                };
                                //#endregion
                                //#region Cloude.getUserFeedFilter
                                //return prweb.parseManager.loadMyNotifications({ limit: 8, skip: 0 }).then(function (xr) {
                                //populatecontentmodel(["firstfilter", "secondfilter", "thirdfilter", "fourthfilter"]);
                                //TODO updateFILTERS ARRAY with userFeedFilter from server...
                                var userffilter = {
                                    "updatedAt": "",
                                    "datsAll": false,
                                    "datsPublic_All": true,
                                    "datsPublic_Recent": false,
                                    "datsPublic_Closed": false,
                                    "datsIcreated_All": true,
                                    "datsIcreated_Recent": false,
                                    "datsIcreated_Closed": false,
                                    "datsToMe_All": true,
                                    "datstome_Waiting": false,
                                    "datstome_Recent": false,
                                    "datstome_Closed": false
                                };
                                //#region BUILD bound viewModel builds filter observable viewmodel from a ressource on the server...
                                var resFilters = prweb.pCElemHtmlDxnry["feedFilterDefinition"].resourceModel;
                                var jf = JSON.parse(resFilters);
                                Enumerable.From(jf).ForEach(function (f) {
                                    Enumerable.From(f.members).ForEach(function (r) {
                                        var xval = userffilter[r.key] || false;
                                        r["val"] = ko.observable(xval);
                                    });
                                });
                                //#endregion
                                bindingContext.$data.contentmodelcolxn(jf);
                                //    pnlMgr.show(0, prweb.datFeedFilter1);
                                    
                                //}).fail(function (ex) {
                                //    //var exm = ex.message.toString();
                                //    //pnlMgr.show(0, prweb.datNotify1);
                                //    //prweb.log("prweb.datwebappmain.loadMyNotificationss promise catch..." + ex.message.toString());
                                //});

                                //#endregion
                                //#endregions
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datFeedFilter1.init reports catch exception... " + ex.Message);
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#region datFeedFilterElem1
                if (!ko.bindingHandlers.datFeedFilterElem1) {
                    ko.bindingHandlers.datFeedFilterElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            //$('.datnotify1btn', $(elem)).bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    //#region Navigate to datSingle1 uses pnlMgr
                            //    var pnl = pnlMgr.show(200, prweb.datSingle1).backtoT(prweb.datFeed1);
                            //    pnlMgr.hide(300, prweb.datFeedFilter1);

                            //    //#endregion
                            //    //#region populatecontentmodelcolxn via datwebplayersvc...
                            //    //MORE GENERALLY: This creates DataContext for datSingle1
                            //    //this needs to put dat model in the contentmodels for the datSingle1 panel
                            //    //var xvm = bindingContext.$data;
                            //    ////the contentmodel inserted here needs to be from datplayersvc...
                            //    //var datpageentry = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage(xvm.datcomplete);
                            //    //var xcolxn = datpageentry.makepgobj(xvm.datcomplete);
                            //    //try {
                            //    //    //MORE GENERALLY: This creates DataContext for datSingle1.contentmodelcolxn
                            //    //    pnl.contentmodelcolxn(xcolxn);
                            //    //    //This should populate the datSingle1.datComplete property
                            //    //    pnl.datcomplete = xvm.datcomplete;
                            //    //}
                            //    //catch (ex) {
                            //    //    var xx = 2;
                            //    //}
                            //    //#endregion
                            //});
                            //#endregion
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                            var xx = 2;
                        }
                    };
                };
                //#endregion
                //#endregion datFeedFilterElem1
                

                //#region datSignReg1
                if (!ko.bindingHandlers.datSignReg1) {
                    ko.bindingHandlers.datSignReg1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datSignReg1, element).hide(0, prweb.datSignReg1);
                            var minheight = pnl.panelprops()["minheight"];
                            pnl.panelprops()["responsiveheight"](minheight);
                            self._initiateMalihuScroll("scrollrootdatSignReg1");
                            var url = prweb.toImgUrl(prweb.pCElemHtmlDxnry['datSignUpPhoto1'].resourceFile);
                            bindingContext.$data.panelprops()['datSignUpPhoto1'] = url;// dynamic addition of property to panelprops observable...
                            pnlMgr.panel(prweb.datSignReg1).contentmodelcolxn({ elem: 'xfuaxsocials' });
                            
                            $("#datbackfromsignregbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var backselectorT = pnlMgr.panel(prweb.datSignReg1).backtoTprop;
                                pnlMgr.hide(300, prweb.datSignReg1);
                                pnlMgr.show(200, backselectorT);
                                self.appManager.getIsSignedIn();//changes the appcontrol that is displayed 
                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var invitee = bindingContext.$data.panelprops()['inviteename']();
                            //$("#datsignreg1emailtextarea").val(invitee);
                        }
                    };
                };
                if (!ko.bindingHandlers.datSignRegElem1) {
                    ko.bindingHandlers.datSignRegElem1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //bindingContext.$root.panelprops()['inviteename']('ignats');
                            //var xx = bindingContext.$root.panelprops()['inviteename']();
                            //$("#datsignreg1emailtextarea").val(invitee);
                            var xx = $("#datsignreginbtn");
                            $("#datfbsigninbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var fbgraphparams = {};
                                var getFBgraphforUser = function (user) {
                                    FB.api('/me', { fields: 'id,first_name,last_name,email,picture.width(500).height(500),gender,age_range' }, function (fbdata) {
                                        return updateUserwithFBGraph(fbdata, user);
                                    });
                                };
                                var updateUserwithFBGraph = function (xfbdata, xuser) {
                                    //this calls cloud method for save the fbdata and newUser....
                                    return prweb.parseManager.addUser({ fbdata: xfbdata, user: xuser }).then(function (xr) {

                                        return finishlogin(xr);//is user...

                                    }).fail(function (ex) {
                                        prweb.log("prweb.datwebappmain.updateUserwithFBGraph promise catch...");// + ex.message);
                                    });
                                };
                                var finishlogin = function (user) {
                                    var backselectorT = pnlMgr.panel(prweb.datSignReg1).backtoTprop;
                                    pnlMgr.hide(300, prweb.datSignReg1);
                                    pnlMgr.show(200, backselectorT);
                                    self.appManager.onparseuserchange(user);
                                };
                                try {
                                    Parse.FacebookUtils.logIn("public_profile,email", {
                                        success: function (user) {
                                            if (!user.existed()) {
                                                getFBgraphforUser(user);//calls addUser/newUser

                                                //alert("User signed up and logged in through Facebook!");
                                            } else {
                                                finishlogin(user)
                                                //alert("User logged in through Facebook!");
                                            }
                                        },
                                        error: function (user, error) {
                                            alert("Apologies...Facebook login cancelled/not fully authorized.");
                                        }
                                    });
                                }
                                catch (ex) {
                                    var x = 2;
                                }
                            });
                            $("#datsignreginbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var backselectorT = pnlMgr.panel(prweb.datSignReg1).backtoTprop;
                                pnlMgr.hide(300, prweb.datSignReg1);
                                pnlMgr.show(200, backselectorT);
                                try {
                                    var lname = $("#datsignreg1emailtextarea").val();
                                    var lpwd = $("#datsignreg1pwdtextarea").val();
                                    //need to scrub these
                                    self.appManager.signIn(lname, lpwd);
                                }
                                catch (ex) {
                                    prweb.log("prweb.datwebappmain.setUpPanelTBindings.datSignReg1.init.click reports catch exception... " + ex.Message);
                                }

                            });
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {

                        }
                    };
                };
                //#endregion datSignReg1

                //#region datControlsInvite1
                if (!ko.bindingHandlers.datControlsInvite1) {
                    ko.bindingHandlers.datControlsInvite1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            //cntrlMgr.control(prweb.datControls2).panelprops()['username'](username);
                            var url = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile);
                            cntrlMgr.control(prweb.datControlsInvite1).panelprops()['elementImage'](url);
                            pnlMgr.panel(prweb.datSignReg1).controlT = prweb.datControlsInviteSignUp1;
                            $("#datcontrolmenubtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.toggleMenuT(prweb.datMenuInvite1);

                            });
                            $("#datcontrolsignedinarea").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                //cntrlMgr.showControl(prweb.datControlsInviteSignUp1);
                                var signupbacktoT = pnlMgr.hide(300).presenterT;

                                pnlMgr.closeMenu(prweb.datMenuInvite1);
                                pnlMgr.show(200, prweb.datSignReg1).backtoT(signupbacktoT).panelprops()["uporin"] = "in";

                            });
                            $("#datcontrolnotifybutton").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                //cntrlMgr.showControl(prweb.datControlsNotify);
                                //#region Navigate to datNotify1 uses pnlMgr
                                //pnlMgr.addPanel(prweb.datNotify1);
                                //pnlMgr.hide(300);
                                //pnlMgr.show(200, prweb.datNotify1).backtoT();

                                //#endregion
                            });
                            $("#datinviteapplebutton").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                window.location.href = self.appManager.appStoreUrl;
                                //cntrlMgr.showControl(prweb.datControlsFeedFilter);
                                //#region Navigate to datFeedFilter1 uses pnlMgr
                                //pnlMgr.addPanel(prweb.datFeedFilter1);
                                //pnlMgr.hide(300);
                                //var pnl = pnlMgr.show(200, prweb.datFeedFilter1).backtoT();

                                //#endregion
                            });
                            //var userid = self.mydatappVmx.parseuser().id;
                            //var user = self.mydatappVmx.parseuser();
                            //var juser = user.toJSON();
                            //if (juser.user_photo) {
                            //    var xurl = juser.user_photo.url;
                            //    cntrlMgr.control(prweb.datControls2).panelprops()['userphoto'](xurl);
                            //}
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsInvite1
                //#region datControlsInviteSignUp1
                if (!ko.bindingHandlers.datControlsInviteSignUp1) {
                    ko.bindingHandlers.datControlsInviteSignUp1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var username = self.mydatappVmx.parseuser().getUsername();
                            //cntrlMgr.control(prweb.datControls2).panelprops()['username'](username);
                            var url = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile);
                            cntrlMgr.control(prweb.datControlsInviteSignUp1).panelprops()['elementImage'](url);
                            $("#datcontrolbackbtn").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                //cntrlMgr.showControl(prweb.datControlsInvite1);
                                var signupbacktoT = pnlMgr.hide(300, prweb.datSignReg1).backtoT() || prweb.datInvite1;
                                if (signupbacktoT == prweb.datInvite1) {
                                    pnlMgr.show(200, signupbacktoT);
                                } else if (signupbacktoT == prweb.datMenuInvite1) {
                                    pnlMgr.toggleMenuT(prweb.datMenuInvite1);
                                }

                            });
                            //$("#datcontrolsignedinarea").bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    var signupbacktoT = pnlMgr.hide(300).presenterT;
                            //    pnlMgr.show(200, prweb.datSignReg1).backtoT(signupbacktoT).panelprops()["uporin"] = "in";

                            //    //cntrlMgr.showControl(prweb.datControlsUserProfile);
                            //    //#region Navigate to datUserProfile1 uses pnlMgr
                            //    //var user = Parse.User.current();//or some other user_id we have!!!! gotta get user_id in dataContext somehow!!!
                            //    //var userid = user.id || false;
                            //    //pnlMgr.addPanel(prweb.datUserProfile1, userid);
                            //    //pnlMgr.hide(300);
                            //    //pnlMgr.show(200, prweb.datUserProfile1).backtoT();
                            //    //pnlMgr.hide(300, prweb.datFeed1);
                            //    //#endregion
                            //});
                            $("#datcontrolnotifybutton").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                //cntrlMgr.showControl(prweb.datControlsNotify);
                                //#region Navigate to datNotify1 uses pnlMgr
                                //pnlMgr.addPanel(prweb.datNotify1);
                                //pnlMgr.hide(300);
                                //pnlMgr.show(200, prweb.datNotify1).backtoT();

                                //#endregion
                            });
                            $("#datinviteapplebutton").bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                window.location.href = self.appManager.appStoreUrl;
                                //cntrlMgr.showControl(prweb.datControlsFeedFilter);
                                //#region Navigate to datFeedFilter1 uses pnlMgr
                                //pnlMgr.addPanel(prweb.datFeedFilter1);
                                //pnlMgr.hide(300);
                                //var pnl = pnlMgr.show(200, prweb.datFeedFilter1).backtoT();

                                //#endregion
                            });
                            //var userid = self.mydatappVmx.parseuser().id;
                            //var user = self.mydatappVmx.parseuser();
                            //var juser = user.toJSON();
                            //if (juser.user_photo) {
                            //    var xurl = juser.user_photo.url;
                            //    cntrlMgr.control(prweb.datControls2).panelprops()['userphoto'](xurl);
                            //}
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsInviteSignUp1

                //#region datInvite1
                if (!ko.bindingHandlers.datInvite1) {
                    ko.bindingHandlers.datInvite1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datInvite1, element).hide(0, prweb.datInvite1);
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"] = ko.observable(minheight);
                                pnl.panelprops()["datviewedobject"] = ko.observable();//this object is in pnl.datacontext['datviewedobject']...update observable from that property whenever you want to use whats in it...
                                pnl.panelprops()["commententrycolxn"] = ko.observableArray();
                                pnl.panelprops()["commententryhtml"] = ko.observable();
                                pnl.panelprops()["responsefeedcolxn"] = ko.observableArray();//this hosts the Vmx for the datResponseFeed1 control..
                                //the datResponseFeed1 control...in its init binding...adds a panel prop for the responsefeedelements...
                                pnl.panelprops()["responsefeedhtml"] = ko.observable();
                                var iscommententryvisible = false;
                                pnl.panelprops()['hidecommententry'] = function () {
                                    iscommententryvisible = false;
                                    var xh = $("#datcommententryholder").height();
                                    var ph = $("#scrollrootdatInvite1").height();
                                    var dh = ph + xh;
                                    pnl.panelprops()["commententrycolxn"]([]);
                                    pnl.panelprops()["responsiveheight"](minheight);//(dh + 'px');
                                };
                                pnl.panelprops()['hideresponsefeedcolxn'] = function () { };
                                pnl.panelprops()['clearcontents'] = function () {
                                    iscommententryvisible = false;
                                    pnl.panelprops()["commententrycolxn"]([]);
                                    pnl.panelprops()["responsefeedcolxn"]([]);
                                    pnl.panelprops()['commentFeedColxn']([]);
                                    pnl.panelprops()['commentCount']("loading comments...");
                                    $(".datcommentfeedgadget").show();
                                };
                                //#region attach scroll here
                                self._initiateMalihuScroll("scrollrootdatInvite1");
                                //#endregion
                                $("#datgotoappstoresbtn").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    window.location.href = self.appManager.appStoreUrl;
                                });
                                pnl["toUserProfile"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                };
                                var inviteObjid = bindingContext.$data.panelprops()['datInvite1'] || "PhcI0EZWBC";
                                //#region populatecontentModel 
                                var populatecontentmodel = function () {
                                    var cmodelarray = [];
                                    //#region cmodel definition and push to array
                                    //#region cmodel and updateSelected
                                    var cmodel = function (datdata) {
                                        var that = {
                                            dat: datdata,
                                            datcomplete: datdata,
                                            datId: datdata.objectId,
                                            btntext: ko.observable(datdata.datType + " Answer 'Dat"),
                                            presenterT: "datInviteElem1",
                                            ownerPhoto: ko.observable(prweb.toImgUrl(datdata.datOwner)),
                                            elementImage: ko.observable(),
                                            responsePercent: ko.observable("0%"),
                                            totResponses: ko.observable(datdata.totalResponses + " respondents" || 0),
                                            timeago: ko.observable(),
                                            views: ko.observable(datdata.views + " views"),
                                            headerText: ko.observable(datdata.headerText),
                                            updateSelected: null
                                        };
                                        that.timeago("Updated " + prweb.timeAgoFromParseTime(datdata.updatedAt));
                                        that.toElementImage = function () {
                                            var rslt = false;
                                            try {
                                                switch (true) {
                                                    case (that.dat.datType == 1):
                                                        var imgj = that.dat.winner.elementImage;
                                                        rslt = imgj.url();
                                                        break;
                                                    case (that.dat.datType == 2):
                                                        var imgj = that.dat.otherdcelems[0].elementImage;
                                                        rslt = imgj.url();
                                                        break;
                                                    case (that.dat.datType == 3):
                                                        var imgj = that.dat.otherdcelems[0].elementImage;
                                                        rslt = imgj.url();
                                                        break;
                                                }
                                            }
                                            catch (ex) {
                                                var yyy = that.dat.datOwner;
                                                var imgj = yyy;
                                                rslt = imgj.url;
                                                var x = true;
                                            }

                                            that.elementImage(rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel);
                                        };
                                        that.updateSelected = function (updatetime) {
                                            try {
                                                var timeago = prweb.timeAgoFromParseTime(that.datcomplete.dat.updatedAt);
                                                if (!(undefined == updatetime)) { timeago = prweb.timeAgoFromParseTime(updatetime) }
                                                that.timeago("Updated " + timeago);
                                                var totResp = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).Sum(function (dce) { return dce.responseCount });
                                                that.totResponses(totResp + ' respondents');
                                                var maxRespdce = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).OrderByDescending(function (dce) { return dce.responseCount }).FirstOrDefault();
                                                if (maxRespdce) {
                                                    var mypct = (maxRespdce.responseCount / totResp) * 100;
                                                    var pctstr = ((Math.round(mypct * Math.pow(10, 1)) / Math.pow(10, 1)).toString() + '%');

                                                    that.responsePercent(pctstr);
                                                    if (maxRespdce.hasOwnProperty('elementImage')) {
                                                        that.elementImage(maxRespdce.elementImage.imageFile.url);
                                                    }
                                                }
                                            }
                                            catch (ex) {
                                                prweb.log("prweb.datwebappmain.datFeed1.updateSelected reports catch exception..." + ex.Message);
                                            }
                                        };
                                        //that.updateSelected();
                                        that.toElementImage();
                                        return that;
                                    };
                                    //#endregion

                                    //#endregion
                                    
                                    var invitedata = self["inviteObject"];
                                    //prweb.parseManager.getInviteComplete(inviteObjid).then(function (invitedata) {
                                    cmodelarray.push(cmodel(invitedata.datFeedElement));
                                    var xcmodel = cmodelarray[0];
                                    var user = invitedata.user;
                                    var parts = user.userName.split("@");
                                    bindingContext.$data.panelprops()['invitedby0'](parts[0]);
                                    bindingContext.$data.panelprops()['invitedby1'](parts[1]);
                                    //bindingContext.$data.panelprops()['inviteename'](invitedata.contact.email);
                                    bindingContext.$data.panelprops()['invitemessage']("Please look at this 'Dat...");
                                    var timeago = prweb.timeAgoFromParseTime(invitedata.invite.createdAt);
                                    bindingContext.$data.panelprops()['invitetime'](timeago);
                                    
                                    bindingContext.$data.datacontext(xcmodel);
                                    
                                };
                                pnlMgr.show(300, prweb.datInvite1);
                                populatecontentmodel();
                                //#endregion populatecontentModel
                            }
                            catch (ex) { prweb.log("prweb.datwebappmain.setUpPanelTBindings.datInvite1.init reports catch exception... " + ex.Message); }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            //the contentmodel inserted here needs to be from datplayersvc...
                            if (dc != false) {
                                bindingContext.$data.panelprops()['initScrollRoot'] = "#scrollrootdatInvite1";
                                var xcolxn = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(dc.datcomplete);

                                dc["userName"] = dc.dat.datUsername || "OOPS No Name";
                                dc["updatedAt"] = "Updated " + prweb.timeAgoFromParseTime(dc.dat.updatedAt);
                                dc["titleText"] = dc.dat.headerText || "";
                                dc["sharePhoto"] = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datSharedat1"].resourceFile);
                                dc["datLogoPhoto"] = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile);
                                //This should populate the datSingle1.datComplete property
                                bindingContext.$data.datcomplete = dc.datcomplete;
                                var addSignupHandlers = function (dc) {
                                    //var dc = bindingContext.$data.datacontext() || {};
                                    dc["credentials"] = {
                                        displayPanel: ko.observable(false),
                                        isLogin: ko.observable(false),
                                        isSignUp: ko.observable(false),
                                        upperLeftText: ko.observable("Sign Up with:"),
                                        submitBtnText: ko.observable("Sign Up")
                                    };
                                    dc["taploginbtn"] = function (x, e) {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        var xval = dc["credentials"].isLogin();
                                        dc["credentials"].isLogin(!xval);
                                        dc["credentials"].displayPanel(!xval);
                                        if (!xval) {
                                            dc["credentials"].isSignUp(false);
                                            dc["credentials"].submitBtnText("Log In");
                                            dc["credentials"].upperLeftText("Log In with:");
                                        }
                                    };
                                    dc["tapsignupbtn"] = function (x, e) {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        var xval = dc["credentials"].isSignUp();
                                        dc["credentials"].isSignUp(!xval);
                                        dc["credentials"].displayPanel(!xval);
                                        if (!xval) {
                                            dc["credentials"].isLogin(false);
                                            dc["credentials"].submitBtnText("Sign Up");
                                            dc["credentials"].upperLeftText("Sign Up with:");
                                        }
                                    };
                                    dc["tapcancelbtn"] = function (x, e) {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        dc["credentials"].isLogin(false);
                                        dc["credentials"].isSignUp(false);
                                        dc["credentials"].displayPanel(false);
                                        //bindingContext.$data["credentials"].(true);
                                    };
                                    dc["tapsubmitbtn"] = function (x, e) {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        if (dc["credentials"].isLogin()) {
                                            try {
                                                var lname = $("#datsignreg1emailtextarea").val();
                                                var lpwd = $("#datsignreg1pwdtextarea").val();
                                                //need to scrub these
                                                self.appManager.signIn(lname, lpwd);
                                            }
                                            catch (ex) {
                                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datSignReg1.init.click reports catch exception... " + ex.Message);
                                            }
                                        } else if (dc["credentials"].isSignUp()) {
                                            try {
                                                var lname = $("#datsignreg1emailtextarea").val();
                                                var lpwd = $("#datsignreg1pwdtextarea").val();
                                                //NEED A SEPARATE ID HERE TO GET TO THE CONFIRMED PWD TEXT
                                                var clpwd = $("#datsignreg1pwdtextarea").val();
                                                //need to scrub these
                                                self.appManager.signUp(lname, lpwd, clpwd);
                                            }
                                            catch (ex) {
                                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datSignReg1.init.click reports catch exception... " + ex.Message);
                                            }
                                        }
                                        dc["credentials"].isLogin(false);
                                        dc["credentials"].isSignUp(false);
                                        dc["credentials"].displayPanel(false);
                                        //bindingContext.$data["credentials"].(true);
                                    };
                                    dc["tapfbbtn"] = function (x, e) {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        var fbgraphparams = {};
                                        var getFBgraphforUser = function (user) {
                                            FB.api('/me', { fields: 'id,first_name,last_name,email,picture.width(500).height(500),gender,age_range' }, function (fbdata) {
                                                return updateUserwithFBGraph(fbdata, user);
                                            });
                                        };
                                        var updateUserwithFBGraph = function (xfbdata, xuser) {
                                            //this calls cloud method for save the fbdata and newUser....
                                            return prweb.parseManager.addUser({ fbdata: xfbdata, user: xuser }).then(function (xr) {

                                                return finishlogin(xr);//is user...

                                            }).fail(function (ex) {
                                                prweb.log("prweb.datwebappmain.updateUserwithFBGraph promise catch...");// + ex.message);
                                            });
                                        };
                                        var finishlogin = function (user) {
                                            //var backselectorT = pnlMgr.panel(prweb.datSignReg1).backtoTprop;
                                            //pnlMgr.hide(300, prweb.datSignReg1);
                                            //pnlMgr.show(200, backselectorT);
                                            self.appManager.onparseuserchange(user);
                                        };
                                        try {
                                            Parse.FacebookUtils.logIn("public_profile,email", {
                                                success: function (user) {
                                                    if (!user.existed()) {
                                                        getFBgraphforUser(user);//calls addUser/newUser

                                                        //alert("User signed up and logged in through Facebook!");
                                                    } else {
                                                        finishlogin(user)
                                                        //alert("User logged in through Facebook!");
                                                    }
                                                },
                                                error: function (user, error) {
                                                    alert("Apologies...Facebook login cancelled/not fully authorized.");
                                                }
                                            });
                                        }
                                        catch (ex) {
                                            var x = 2;
                                        }
                                        dc["credentials"].isLogin(false);
                                        dc["credentials"].isSignUp(false);
                                        dc["credentials"].displayPanel(false);
                                        //bindingContext.$data["credentials"].(true);
                                    };
                                };
                                addSignupHandlers(dc);
                                bindingContext.$data.contentmodelcolxn(xcolxn);
                            } else {

                            }

                        }
                    };
                };
                //#region datInviteElem1
                if (!ko.bindingHandlers.datInviteElem1) {
                    ko.bindingHandlers.datInviteElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            
                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            //$('.datinvite1btn', $(elem)).bind('click', function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    //#region Navigate to datSingle1 vis pnlMgr
                            //    var pnl = pnlMgr.show(200, prweb.datSingle1).backtoT(prweb.datInvite1);
                            //    pnlMgr.hide(300,prweb.datInvite1);
                            //    //#endregion
                            //    //#region populatecontentmodelcolxn via datwebplayersvc...
                                
                            //    pnl.datacontext(bindingContext.$data.datcomplete || false);
                            //    //var dc = bindingContext.data || false;
                            //    ////the contentmodel inserted here needs to be from datplayersvc...
                            //    //try {
                            //    //    if (dc != false) {
                            //    //        var xcolxn = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(dc.datcomplete);
                            //    //        bindingContext.$data.contentmodelcolxn(xcolxn);
                            //    //        dc["userName"] = dc.dat.datUsername || "OOPS No Name";
                            //    //        dc["updatedAt"] = "Updated " + prweb.timeAgoFromParseTime(dc.dat.updatedAt);
                            //    //        dc["titleText"] = dc.dat.headerText || "OOPS WRONG GUY";
                            //    //        dc["sharePhoto"] = prweb.pCElemHtmlDxnry["datSharedat1"].resourceFile.url;
                            //    //        //This should populate the datSingle1.datComplete property
                            //    //        bindingContext.$data.datcomplete = dc.datcomplete;
                            //    //        self._initiateMalihuScroll("scrollrootdatSingle1");
                            //    //    }
                            //    //}
                            //    //catch (ex) {
                            //    //    prweb.log("prweb.datwebappmain.setUpPanelTBindings.datInviteElem1.init reports catch exception... " + ex.Message);
                            //    //}
                            //    //#endregion
                            //});
                            //#endregion
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                            //var xreally = $(".invitesignintoanswer");
                            
                        }
                    };
                };
                //#endregion
                //#endregion datInvite1
                //#region datInviteMember1
                if (!ko.bindingHandlers.datInviteMember1) {
                    ko.bindingHandlers.datInviteMember1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datInviteMember1, element).hide(0, prweb.datInviteMember1);
                                
                                var inviteObjid = bindingContext.$data.panelprops()['datInvite1'] || "PhcI0EZWBC";
                                //#region populatecontentModel - This does Parse call to GET Invitation...it includes the DAT
                                var invitedata = self["inviteObject"];
                                var xcmodel = datSingleContextMgr(prweb.datInviteMember1).toDataContext(invitedata.datFeedElement);
                                var redirectToDatSingle1 = function () {
                                    
                                    //pnlMgr.hide(0, prweb.datInviteMember1);
                                    
                                    //bindingContext.$data.datacontext());//invokes datSingle1 bindings update:()
                                    navMgr.me(prweb.datInviteMember1).to(prweb.datSingle1);
                                    pnlMgr.show(200, prweb.datSingle1);
                                    cntrlMgr.showControl(prweb.datControlsSingleDat1);
                                    pnlMgr.panel(prweb.datSingle1).datacontext(xcmodel);

                                };
                                redirectToDatSingle1();
                                //#endregion
                                
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datInviteMember1.init reports catch exception... " + ex.Message);
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var dc = bindingContext.$data.datacontext() || false;
                            ////the contentmodel inserted here needs to be from datplayersvc...
                            //if (dc != false) {

                            //    var xcolxn = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(dc.datcomplete);
                            //    bindingContext.$data.contentmodelcolxn(xcolxn);
                            //    dc["userName"] = dc.dat.datUsername || "OOPS No Name";
                            //    dc["updatedAt"] = "Updated " + prweb.timeAgoFromParseTime(dc.dat.updatedAt);
                            //    dc["titleText"] = dc.dat.headerText || "";
                            //    dc["sharePhoto"] = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datSharedat1"].resourceFile);
                            //    dc["datLogoPhoto"] = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile);
                            //    //This should populate the datSingle1.datComplete property
                            //    bindingContext.$data.datcomplete = dc.datcomplete;
                            //    //self._initiateMalihuScroll("scrollrootdatInvite1");

                            //}
                        }
                    };
                };
                //#region datInviteMemberElem1
                if (!ko.bindingHandlers.datInviteMemberElem1) {
                    ko.bindingHandlers.datInviteMemberElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {

                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            //$('.datinvite1btn', $(elem)).bind('click', function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    //#region Navigate to datSingle1 vis pnlMgr
                            //    var pnl = pnlMgr.show(200, prweb.datSingle1).backtoT(prweb.datInvite1);
                            //    pnlMgr.hide(300,prweb.datInvite1);
                            //    //#endregion
                            //    //#region populatecontentmodelcolxn via datwebplayersvc...

                            //    pnl.datacontext(bindingContext.$data.datcomplete || false);
                            //    //var dc = bindingContext.data || false;
                            //    ////the contentmodel inserted here needs to be from datplayersvc...
                            //    //try {
                            //    //    if (dc != false) {
                            //    //        var xcolxn = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(dc.datcomplete);
                            //    //        bindingContext.$data.contentmodelcolxn(xcolxn);
                            //    //        dc["userName"] = dc.dat.datUsername || "OOPS No Name";
                            //    //        dc["updatedAt"] = "Updated " + prweb.timeAgoFromParseTime(dc.dat.updatedAt);
                            //    //        dc["titleText"] = dc.dat.headerText || "OOPS WRONG GUY";
                            //    //        dc["sharePhoto"] = prweb.pCElemHtmlDxnry["datSharedat1"].resourceFile.url;
                            //    //        //This should populate the datSingle1.datComplete property
                            //    //        bindingContext.$data.datcomplete = dc.datcomplete;
                            //    //        self._initiateMalihuScroll("scrollrootdatSingle1");
                            //    //    }
                            //    //}
                            //    //catch (ex) {
                            //    //    prweb.log("prweb.datwebappmain.setUpPanelTBindings.datInviteElem1.init reports catch exception... " + ex.Message);
                            //    //}
                            //    //#endregion
                            //});
                            //#endregion
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                            //var xreally = $(".invitesignintoanswer");

                        }
                    };
                };
                //#endregion
                //#endregion datInviteMember1

                //#region datFeed1
                var datFeedSpinner = {
                    activate: function (count) {
                        var pokealittle = function () { };
                        $("#datFeedSpinner").removeClass("controlhide").addClass("datfeedspinneractive");
                        try { 
                        //$.magnificPopup.open({
                        //    items: {
                        //        src: '<div class="datfeedspinneractive"> popup</div>'
                        //    },
                        //    type: 'inline',
                        //    modal: true
                        //});
                        //$("#scrollrootdatFeed1").mCustomScrollbar('disable', true);
                        }
                        catch (ex) {
                            var wtf = true;
                        }
                    },
                    stop: function () {
                        //$("#datFeedSpinner").removeClass("datfeedspinneractive").addClass("controlhide");
                        setTimeout(function () {
                            $("#scrollrootdatFeed1").mCustomScrollbar('update');
                            $("#datFeedSpinner").removeClass("datfeedspinneractive").addClass("controlhide");
                            
                        }, 1500);
                        
                        //$("#scrollrootdatFeed1").mCustomScrollbar('update');
                        try {
                            //$.magnificPopup.close();
                        }
                        catch (ex) {
                            var wtf = true;
                        }
                        
                    },
                    
                    dispose: false
                };
                if (!ko.bindingHandlers.datFeed1) {
                    ko.bindingHandlers.datFeed1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datFeed1, element).hide(0, prweb.datFeed1);
                                //bindingContext.$data.contentmodelcolxn = ko.observableArray([]).extend({ deferred: true });
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"](minheight);
                                pnl.panelprops()['initScrollRoot'] = "scrollrootdatFeed1";
                                var cmodelarray = [];
                                var needsScroller = true;
                                var hidethese = function (el) {
                                    try {
                                        //var items = $(".datfeed1elem", $("#scrollrootdatFeed1"));//.addClass("controlhide");

                                        //Enumerable.From(items).Take(10).ForEach(function (r) {
                                        //    r.addClass("controlhide");
                                        //    return r;
                                        //})
                                        var cool = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    var x = el.mcs.top;
                                    
                                };
                                //#region pullToRefreshManager
                                var pullToRefreshManager = {
                                    scrollStartPosition: 0,
                                    scrollDraggerTop: 0,
                                    isEnabled: false,
                                    scrollbar: $("#scrollrootdatFeed1"),
                                    datFeedElem: false,
                                    enable: function () {
                                        pullToRefreshManager.datFeedElem = $(".datfeed1elem").first();
                                        pullToRefreshManager.isEnabled = true;
                                        setTimeout(function () {
                                            pullToRefreshManager.scrollbar.mCustomScrollbar("scrollTo", "-=10", {
                                                scrollInertia: 0,
                                                moveDragger: false,
                                                timeout: 0
                                            });
                                            pullToRefreshManager.datFeedElem.css('padding-top', 10);
                                        }, 10);
                                    },
                                    animateFeed: function () {
                                        pullToRefreshManager.scrollbar.mCustomScrollbar("scrollTo", "-10", {
                                            scrollInertia: 0,
                                            moveDragger: false,
                                            timeout: 0
                                        });
                                    },
                                    showUpdatedNow: function () {
                                        $("#datFeedUpdatedJustNow").removeClass("controlhide").addClass("datfeedspinneractive");
                                    },
                                    onPull: function () {
                                        pullToRefreshManager.showUpdatedNow();
                                        return pnl["feedFilterUpdate"](false, 0).then(function (xr) {
                                            pullToRefreshManager.animateFeed();
                                            setTimeout(function () {
                                                $("#datFeedUpdatedJustNow").removeClass("datfeedspinneractive").addClass("controlhide");
                                            }, 500);
                                            return xr;
                                        });
                                    },
                                    dispose: false
                                };
                                //#endregion pullToRefreshManager
                                //#region scroller options
                                var scroptions = {
                                    theme: "minimal-dark",
                                    callbacks: {
                                        alwaysTriggerOffsets: false,
                                        onTotalScrollOffset: 200,
                                        onTotalScrollBackOffset: 9,
                                        advanced: { updateOnImageLoad: false },
                                        onScrollStart: function () {
                                            pullToRefreshManager.scrollStartPosition = this.mcs.top;
                                            pullToRefreshManager.scrollDraggerTop = this.mcs.topPct;
                                        },
                                        onScroll: function () {
                                            pullToRefreshManager.scrollDraggerTop = this.mcs.topPct;
                                        },
                                        onTotalScrollBack: function () {
                                            try {
                                                pullToRefreshManager.scrollbar.mCustomScrollbar("stop");
                                                var c = pullToRefreshManager.scrollDraggerTop == 0;
                                                var b = pullToRefreshManager.scrollStartPosition == -10;
                                                if (pullToRefreshManager.isEnabled && b && c) {
                                                    pullToRefreshManager.scrollDraggerTop == 1;
                                                    pullToRefreshManager.scrollStartPosition == -11;
                                                    return pullToRefreshManager.onPull();
                                                    

                                                } else {
                                                    pullToRefreshManager.scrollDraggerTop == 1;
                                                    pullToRefreshManager.scrollStartPosition == -11;
                                                    pullToRefreshManager.scrollbar.mCustomScrollbar("scrollTo", "-10", {
                                                        scrollInertia: 0,
                                                        moveDragger: false,
                                                        timeout: 0
                                                    });
                                                }
                                                //var cool = true;
                                                //datFeedSpinner.activate(cmodelarray.length);
                                                //showthese(this);
                                                //var skipval = cmodelarray.length || 0;
                                                //pnl["feedFilterUpdate"](false, skipval);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        onTotalScroll: function () {
                                            try {

                                                //var felems = $("#scrollrootdatFeed1:mcsInView");
                                                //var xfelem = $("#scrollrootdatFeed1").is(":mcsInView");
                                                //var ovfelems = $(".datfeed1elem:mcsOverflow");
                                                //var xovfelem = $(".datfeed1elem").is(":mcsOverflow");
                                                //var sigtfelems = $("#scrollrootdatFeed1t:mcsOverflow");
                                                //var kodata = ko.dataFor(Enumerable.From(ovfelems).FirstOrDefault());
                                                var cool = true;
                                                datFeedSpinner.activate(cmodelarray.length);
                                                hidethese(this);
                                                var skipval = cmodelarray.length || 0;
                                                return pnl["feedFilterUpdate"](false, skipval).then(function (xr) {
                                                    datFeedSpinner.stop();
                                                    return true;
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        }
                                    }
                                };
                                //#endregion scrolleroptions
                                self._initiateMalihuScroll("scrollrootdatFeed1", scroptions);
                                
                                bindingContext.$data["widgetizeDatFeedColxn"] = function (elem, e) {
                                //    $("#scrollrootdatFeed1").mCustomScrollbar("disable");
                                    if (needsScroller) {
                                        needsScroller = false;
                                        
                                        //return prweb.parseManager.loadMyDats({ limit: 20, skip: cmodelarray.length }).then(function (xr) {
                                        //    populatecontentmodel(xr.datFeedElements);
                                        //    bindingContext.$data.contentmodelcolxn(cmodelarray);
                                        //});
                                        
                                    } else {
                                        //$(elem[1]).children().addClass("controlhide");
                                        //$("#scrollrootdatFeed1").mCustomScrollbar('stop');
                                        //datFeedSpinner.stop();
                                    }
                                    
                                };
                                pnl["feedFilterUpdate"] = function (xuserfilter, skipval) {
                                    //datFeedSpinner.activate(cmodelarray.length);
                                    var xff = pnl["feedFilterManager"].toFeedFilter();
                                    var userfilter = xuserfilter || xff;
                                    //$("#scrollrootdatFeed1").mCustomScrollbar("disable");
                                    return prweb.parseManager.updateUserFilter({ limit: 15, skip: skipval || 0, userFilter: userfilter }).then(function (xr) {
                                        //return prweb.parseManager.loadMyDats({ limit: 10, skip: skipval || 0, userFilter: userfilter }).then(function (xr) {
                                        var isskipvalmorethan0 = skipval > 0 || false;
                                        if (!isskipvalmorethan0) {
                                            cmodelarray = [];
                                            populatecontentmodel(xr.datFeedElements);
                                            bindingContext.$data.contentmodelcolxn(cmodelarray);
                                            pullToRefreshManager.enable();
                                        } else {
                                            populatecontentmodel(xr.datFeedElements);
                                            bindingContext.$data.contentmodelcolxn.valueHasMutated();
                                            pullToRefreshManager.enable();
                                        }
                                        //datFeedSpinner.activate(cmodelarray.length);
                                        
                                        
                                        
                                        //datFeedSpinner.stop();
                                        //SEE widgetizedDatFeedColxn above....happens after the cmodelarray is rendered...
                                        return true;
                                    });
                                }
                                var availableUpdates = ko.observableArray();//this gets new cmodels from feedElementUpdate();
                                var testnumber = 100;
                                pnl["lastNavFromDatFeedElem"] = false;
                                var onAvailableUpdates = availableUpdates.subscribe(function (newval) {
                                    var updatescount = availableUpdates().length;
                                    if (updatescount > 0) {
                                        var what = newval[0];
                                        var updatescount = availableUpdates().length;
                                        var updatecmodel = function (item, ndx) {
                                            var cntmdlclxn = pnl.contentmodelcolxn();
                                            cntmdlclxn[ndx] = newval[0];
                                            pnl.contentmodelcolxn(cntmdlclxn);
                                            availableUpdates([]);
                                            var yes = true;
                                        };

                                        var arrayitem = Enumerable.From(pnl.contentmodelcolxn())
                                            .Where(function (c) {
                                                return c.datId == what.datId
                                            })
                                            .Select(function (itemx) {
                                                //could make cmodel equal newval right here...updatcmodel()
                                                var yes = itemx;
                                                return itemx;
                                            }).FirstOrDefault();
                                        var ndx = Enumerable.From(pnl.contentmodelcolxn()).IndexOf(arrayitem);
                                        updatecmodel(arrayitem, ndx);// or not if you dont want to...
                                        
                                    }
                                    return true;
                                });
                                pnl["onShow"] = function () {
                                    $("#datcreateplusbutton").show();
                                    $("#datfeedfilterbutton").show();
                                    //take the feedElementUpdates you have, and update the feedElements..
                                    //then clear the availableUpdates array....
                                    var cmodelcount = cmodelarray.length;
                                    var updatescount = availableUpdates.length;
                                    //var newcmodelarray = Enumerable.From([]).Union(cmodelarray).Take(10).ToArray();
                                    //cmodelarray = newcmodelarray;
                                    //bindingContext.$data.contentmodelcolxn(cmodelarray);
                                    var yes = true;
                                    navMgr.DxnryT = {};
                                    if (pullToRefreshManager.isEnabled) {
                                        pullToRefreshManager.enable();//is redundant...ok...other navigations
                                    }
                                    //var lastDFElem = pnl["lastNavFromDatFeedElem"] || false;
                                    //if (lastDFElem) {
                                    //    lastDFElem();
                                    //}
                                };
                                pnl["feedElementUpdate"] = function (feedelem, datviewedobj) {
                                    //so methods could use this method to post an updated feedElement back to the datFeed....
                                    //find the cmodel via objectid....update the properties...or add a new cmodel, and delete the old one...
                                    //need to sort by updatedAt to put them back in order ???
                                    //THIS SHOULD BE USED TO DISPLAY UPDATES AVAILABLE GADGET ON DATFEED...
                                    if (datviewedobj) {
                                        //put this datMetadata in the feedelem...
                                        var arrayitem = Enumerable.From(pnl.contentmodelcolxn())
                                            .Where(function (c) {
                                                return c.datId == datviewedobj.datId
                                            })
                                            .Select(function (itemx) {
                                                //could make cmodel equal newval right here...updatcmodel()
                                                var yes = itemx;
                                                return itemx;
                                            }).FirstOrDefault();
                                        if (arrayitem) {
                                            var ndx = Enumerable.From(pnl.contentmodelcolxn()).IndexOf(arrayitem);
                                            arrayitem.views((datviewedobj.datMetadata.views += 1) + " views*");
                                            var availarray = availableUpdates();
                                            availarray.push(arrayitem);
                                            availableUpdates(availarray);
                                        }
                                        
                                        var xyes = true;
                                    }
                                    if (feedelem) {
                                        var newcmodel = populatecontentmodel([feedelem], true)[0];//this sends one, expects one...
                                        var availarray = availableUpdates();
                                        availarray.push(newcmodel);
                                        availableUpdates(availarray);//triggers onAvailableUpdatessubscription....ko...
                                    }
                                   
                                    
                                    var yes = true;
                                };
                                
                                var ffm = function () {
                                    var me = {
                                        toFeedFilter: function(){
                                            Enumerable.From(me.feedFilterObservable).ForEach(function(f){
                                                Enumerable.From(f.members).ForEach(function (r) {
                                                    me.feedFilter[r.key] = r.val();
                                                })
                                            });
                                            return me.feedFilter;
                                        },
                                        feedFilterObservable: {},
                                        feedFilter:{
                                            "updatedAt": "",
                                            "datsAll": false,
                                            "datsPublic_All": true,
                                            "datsPublic_Recent": false,
                                            "datsPublic_Closed": false,
                                            "datsIcreated_All": true,
                                            "datsIcreated_Recent": false,
                                            "datsIcreated_Closed": false,
                                            "datsToMe_All": true,
                                            "datstome_Waiting": false,
                                            "datstome_Recent": false,
                                            "datstome_Closed": false,
                                            "datsIfollowed_All": false,
                                            "datsIfollowed_Recent": false,
                                            "datsIfollowed_Closed": false,
                                            "datsIshared_All": false,
                                            "datsIshared_Recent": false,
                                            "datsIshared_Closed": false
                                        }
                                    };
                                    return me;
                                };
                                pnl["feedFilterManager"] = ffm();
                                
                                pnl["toUserProfile"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var tocntrlT = navMgr.me(prweb.datControls2).to(prweb.datControlsUserProfile);
                                    cntrlMgr.showControl(tocntrlT);
                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    var dc = data.dat.userId;//establish datacontext for the addedPanel...
                                    //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                    
                                    pnlMgr.hide(300);
                                    var toT = navMgr.me(prweb.datFeed1).to(prweb.datUserProfile1);
                                    var topnl = pnlMgr.show(200, toT);//.backtoT(prweb.datFeed1);
                                    topnl.datacontext(dc);
                                    //pnlMgr.hide(300, prweb.datFeed1);
                                    //#endregion
                                };
                                //#region populatecontentModelColxn - This does Cloud.loadMyDats
                                //#region populatecontentmodel 
                                
                                var populatecontentmodel = function (datscolxn, isupdate) {
                                    var updatesarray = [];
                                    //#region cmodel definition and push to array foreach dat from getDats
                                    toPluralText = function (count, basetext, blankonzero) {
                                        var rslt = "";
                                        if (count > 0) {
                                            rslt += count + " " + basetext;
                                            if (count > 1) {
                                                rslt += "s";
                                            }
                                        } else {
                                            if (!blankonzero) {
                                                rslt = "No " + basetext +"s";
                                            }

                                        }
                                        return rslt;
                                    };
                                    for (var n in datscolxn) {
                                        //#region cmodel definition and push
                                        try {
                                            var cmodel = function () {
                                                var that = {};
                                                try {
                                                    that = {
                                                        dat: datscolxn[n],
                                                        datcomplete: datscolxn[n],
                                                        datId: datscolxn[n].objectId,
                                                        datcountableitemVmx: false,
                                                        btntext: ko.observable("Answer 'dat"),
                                                        presenterT: "datFeedElem1",
                                                        ownerPhoto: ko.observable(),//prweb.toImgUrl(datscolxn[n].datOwner)),
                                                        userName: ko.observable(datscolxn[n].datUsername),
                                                        elementImage: ko.observable(),
                                                        responsePercent: ko.observable("0%"),
                                                        totResponses: ko.observable(toPluralText(datscolxn[n].totalResponses || 0, "respondent", false)),
                                                        timeago: ko.observable(),
                                                        views: ko.observable(toPluralText(datscolxn[n].datMetadata.views || 0, "view", false)),
                                                        comments: ko.observable(toPluralText(datscolxn[n].datMetadata.comments || 0, "comment", true)),
                                                        headerText: ko.observable(datscolxn[n].headerText),
                                                        updateSelected: null
                                                    };
                                                    
                                                    that["jsonModel"] = datscolxn[n]["jsonModel"] || false;
                                                    if (that.dat.datType == "11") {
                                                        var countables = that.dat.countables || false;
                                                        if (!(datscolxn[n].headerText)) {
                                                            if (countables.length == 1) {
                                                                that.headerText(countables[0].headerText || countables[0].titleText);
                                                            } else {
                                                                that.headerText(that.dat.winner.headerText || that.dat.winner.titleText);
                                                            }
                                                        }
                                                    //    
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                
                                                if (datscolxn[n].statusObject.IsUserHasVoted) {
                                                    var x = 2;
                                                }
                                                that.toOwnerImage = function () {
                                                    var rslt = prweb.pCElemHtmlDxnry['datGroupsIcon1'].resourceFile.url();
                                                    if (datscolxn[n].datOwner) {
                                                        try {
                                                            rslt = datscolxn[n].datOwner.url() || datscolxn[n].datOwner.url || false;
                                                        }
                                                        catch (ex) {

                                                        }
                                                    } else {

                                                    }
                                                    that.ownerPhoto(rslt);
                                                };
                                                that.toOwnerImage();
                                                that.timeago("Updated " + prweb.timeAgoFromParseTime(datscolxn[n].updatedAt));
                                                that.toElementImage = function () {
                                                    var rslt = false;
                                                    try {
                                                        switch (true) {
                                                            case (that.dat.datType == 12):
                                                                var imgj = false;
                                                                if (that.dat.otherdcelems[0]) {
                                                                    imgj = that.dat.otherdcelems[0].elementImage || false;
                                                                }
                                                                if (imgj == false) {
                                                                    imgj = that.dat.winner.elementImage;
                                                                }
                                                                if(imgj) {
                                                                    rslt = imgj.url() || imgj.url;
                                                                }
                                                                break;
                                                            case (that.dat.datType == 11):
                                                                var imgj = false;
                                                                if (that.dat.otherdcelems[0]) {
                                                                    imgj = that.dat.otherdcelems[0].elementImage || false;
                                                                }
                                                                if (imgj == false) {
                                                                    imgj = that.dat.winner.elementImage;
                                                                }
                                                                if (imgj) {
                                                                    rslt = imgj.url() || imgj.url;
                                                                }
                                                                break;
                                                            case (that.dat.datType == 1):
                                                                var imgj = false;
                                                                if (that.dat.otherdcelems[0]) {
                                                                    imgj = that.dat.otherdcelems[0].elementImage || false;
                                                                }
                                                                //.toJSON();
                                                                if (imgj == false) {
                                                                    imgj = that.dat.winner.elementImage;
                                                                }
                                                                if (imgj) {
                                                                    rslt = imgj.url() || imgj.url;
                                                                }
                                                                break;
                                                            case (that.dat.datType == 2):
                                                                var imgj = that.dat.otherdcelems[0].elementImage || false;
                                                                if (imgj) {
                                                                    rslt = imgj.url() || imgj.url;
                                                                }
                                                                break;
                                                            case (that.dat.datType == 3):
                                                                var imgj = that.dat.otherdcelems[0].elementImage || false;
                                                                if (imgj) {
                                                                    rslt = imgj.url() || imgj.url;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                    catch (ex) {
                                                        var yyy = that.dat.datOwner.toJSON();
                                                        var imgj = yyy;
                                                        rslt = imgj.url;
                                                        var x = true;
                                                    }

                                                    that.elementImage(rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel);
                                                };
                                                that.updateSelected = function (updatetime) {
                                                    try {
                                                        var timeago = prweb.timeAgoFromParseTime(that.datcomplete.dat.updatedAt);
                                                        if (!(undefined == updatetime)) { timeago = prweb.timeAgoFromParseTime(updatetime) }
                                                        that.timeago("Updated " + timeago);
                                                        var totResp = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).Sum(function (dce) { return dce.responseCount });
                                                        that.totResponses(totResp + ' respondents');
                                                        var maxRespdce = Enumerable.From(that.datcomplete.dcecolxn).Where(function (dce) { return dce.type == 5 }).OrderByDescending(function (dce) { return dce.responseCount }).FirstOrDefault();
                                                        if (maxRespdce) {
                                                            var mypct = (maxRespdce.responseCount / totResp) * 100;
                                                            var pctstr = ((Math.round(mypct * Math.pow(10, 1)) / Math.pow(10, 1)).toString() + '%');

                                                            that.responsePercent(pctstr);
                                                            if (maxRespdce.hasOwnProperty('elementImage')) {
                                                                that.elementImage(maxRespdce.elementImage.imageFile.url);
                                                            }
                                                        }
                                                    }
                                                    catch (ex) {
                                                        prweb.log("prweb.datwebappmain.datFeed1.updateSelected reports catch exception..." + ex.Message);
                                                    }
                                                };
                                                //that.updateSelected();
                                                //#region todatcountableitemVMx
                                                that.todatcountableitemVMx = function () {
                                                    var rslt = {};
                                                    try {

                                                    }
                                                    catch (ex) {
                                                        var no = true;
                                                    }
                                                    that.datcountableitemVmx = rslt;
                                                };
                                                that.todatcountableitemVMx();
                                                //#endregion
                                                that.toElementImage();
                                                return that;
                                            };
                                            if (isupdate) {
                                                updatesarray.push(cmodel());
                                            } else {
                                                cmodelarray.push(cmodel());
                                                
                                            }
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        
                                        //#endregion
                                    };
                                    //var newcmodelarray = Enumerable.From(cmodelarray).Union(xarray).ToArray();
                                    //cmodelarray = newcmodelarray;
                                    if (isupdate) {
                                        return updatesarray;
                                    }
                                    //#endregion
                                };
                                //#endregion
                                //#region Cloude.loadMyDats
                                cmodelarray = [];
                                //pnlMgr.show(0, prweb.datFeed1);
                                pnlMgr.appPositionRefresh();
                                pnlMgr.show(1800, prweb.datFeed1);
                                return prweb.parseManager.loadMyDats({ limit: 20, skip: 0 }).then(function (xr) {
                                    //pnlMgr.show(0, prweb.datFeed1);
                                    
                                    populatecontentmodel(xr.datFeedElements);
                                    // pnlMgr.show(0, prweb.datFeed1);
                                    bindingContext.$data.contentmodelcolxn(cmodelarray);
                                    pullToRefreshManager.enable();
                                    //pnlMgr.resizeWindowSvc().xOnResizeHandler();
                                    //pnlMgr.appPositionRefresh();
                                    
                                        
                                        
                                    
                                    
                                }).fail(function (ex) {
                                    pnlMgr.show(0, prweb.datFeed1);
                                        prweb.log("prweb.datwebappmain.loadMyDats promise catch..." + ex.message);
                                    });
                                //#endregion
                                //#endregions
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datFeed1.init reports catch exception... " + ex.Message);
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //pnlMgr.resizeWindowSvc().xOnResizeHandler();
                            return;
                        }
                    };
                };
                //#region datFeedElem1
                if (!ko.bindingHandlers.datFeedElem1) {
                    ko.bindingHandlers.datFeedElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try { 
                            //so lets say we do the little datcountableitem databinding here...
                            //create an observable property...populate it
                            //bindingContext should have a property .datcountableitemVmx
                            //lets make it observable...
                            bindingContext.$data["datcountableitemVmx"] = ko.observable();
                            //now lets populate it...
                            //pageplayer gives us the content...same as in datResponseFeedElem1...except we are doing results..
                            ///AND...results is what we use/get on datSingle1!!!!!!! we just call init with a datfeedElem...gives us a result....
                            bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                            var xcolxn = bindingContext.$data["datPageEntry"].init(bindingContext.$data.datcomplete);
                            // there are different kind of dats...they have different html...rates/sentiments....
                            //so feedElem needs to have html that allows both...and a Vmx too....
                            var rateiscircle = bindingContext.$data.datcomplete.countables[0].isCircle  || false;
                            xcolxn[0]["isCircle"] = ko.observable(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                            xcolxn[0]["isNotCircle"] = ko.observable(!rateiscircle);
                            xcolxn[0]["datcountableitemholder"] = ko.observableArray();
                            xcolxn[0]["widgetizedatCountableItemResults"] = function (elem, model) {
                                var mymodel = ko.dataFor(elem[1]);
                                var T = "." + "datcountableitem";
                                var echild = $(T, $(elem[1]));
                                ko.applyBindings(mymodel, echild[0]);
                                return;
                            };
                            bindingContext.$data["datcountableitemVmx"](xcolxn[0]);
                            var navigateToMe = function () {
                                try {
                                    var isr = pnlMgr.panel(prweb.datFeed1).panelprops()['initScrollRoot'] || false;

                                    var target = $(elem).prev().find(".datcountableitemhtmlparent");
                                    $(isr).mCustomScrollbar('scrollTo', target, {
                                        timeout: 0,
                                        scrollInertia: 0
                                    });
                                }
                                catch (ex) { }
                                
                                //$(isr).mCustomScrollbar('stop');
                                //$(isr).mCustomScrollbar('scrollTo', '+=10', {
                                //    timeout: 500,
                                //    scrollInertia: 3000
                                //});
                                
                            };
                            var yes = true;
                            //#region Show me Dat button...Navigates to datSingle1...Populates datSingle.contentmodelcolxn
                            bindingContext.$data["answerDatHandler"] =
                                function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var tocntrlT = navMgr.me(prweb.datControls2).to(prweb.datControlsSingleDat1);
                                
                                    //#region Navigate to datSingle1 uses pnlMgr
                                    var hiddenT = pnlMgr.hide(300) || false;
                                    if (hiddenT) {
                                        bindingContext.$data["lastNavFromDatFeedElem"] = true;
                                        hiddenT["lastNavFromDatFeedElem"] = navigateToMe;//
                                        var fromT = hiddenT["presenterT"];
                                        var toT = navMgr.me(fromT).to(prweb.datSingle1);
                                        //var pnl = pnlMgr.show(200, toT);
                                        bindingContext.$data["fromT"] = fromT;
                                        bindingContext.$data["datfiveresponsefeedid"] = false;
                                        cntrlMgr.showControl(tocntrlT);
                                        pnlMgr.show(300, toT).datacontext(bindingContext.$data);//invokes datSingle1 bindings update:()
                                    } else {
                                        var wtf = true;
                                    }
                                    return false;
                                
                                    // pnl.datacontext(bindingContext.$data);//invokes datSingle1 bindings update:()
                                    //#endregion
                                };
                            //$('.datfeed1btn', $(elem)).bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    var tocntrlT = navMgr.me(prweb.datControls2).to(prweb.datControlsSingleDat1);
                                
                            //    //#region Navigate to datSingle1 uses pnlMgr
                            //    var hiddenT = pnlMgr.hide(300) || false;
                            //    if (hiddenT) {
                            //        bindingContext.$data["lastNavFromDatFeedElem"] = true;
                            //        hiddenT["lastNavFromDatFeedElem"] = navigateToMe;//
                            //        var fromT = hiddenT["presenterT"];
                            //        var toT = navMgr.me(fromT).to(prweb.datSingle1);
                            //        var pnl = pnlMgr.show(200, toT);
                            //        bindingContext.$data["fromT"] = fromT;
                            //        bindingContext.$data["datfiveresponsefeedid"] = false;
                            //        cntrlMgr.showControl(tocntrlT);
                            //        pnl.datacontext(bindingContext.$data);
                            //    } else {
                            //        var wtf = true;
                            //    }
                                
                            //   // pnl.datacontext(bindingContext.$data);//invokes datSingle1 bindings update:()
                            //    //#endregion
                            //});
                            //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var datable = bindingContext.$data["datcountableitemVmx"]();
                                var makedatcountableitemholder = function () {
                                    var pnlpresenterT = datable.modelcore.presenterT;;
                                    //this viewmodel is ko.apply() in the panel panelentry?... it is a method named ?
                                    var vmx = [{
                                        presenterT: "",
                                        responseImage: ko.observable(),
                                        html: ko.observable(),
                                        datRateShrink1: ko.observable(),
                                        datSentimentShrink1: ko.observable(),
                                        datCompareShrink1: ko.observable()
                                    }];
                                    if (pnlpresenterT == "datRate1") {
                                        var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data.datcomplete);//, modeparams);
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datRateShrink1"].resourceModel);
                                        vmx[0].datRateShrink1(newvmx[0]);
                                    } else if (pnlpresenterT == "datSentiment1") {
                                        var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data.datcomplete);
                                        //cmdl.responseImage(dce.emoji);
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datSentimentShrink1"].resourceModel);
                                        vmx[0].datSentimentShrink1(newvmx[0]);
                                        var xyes = datable;// set the vmx so that classes attach to the html...in bindings...hide or show emoji etc...
                                    } else if (pnlpresenterT == "dat5" || pnlpresenterT == "dat115" || pnlpresenterT == "dat125") {
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datCompareShrink1"].resourceModel);
                                        var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data.datcomplete);
                                        var winner = Enumerable.From(newvmx).MaxBy(function (r) {
                                            return r.modelcore.responseCount();
                                        }).modelcore.responsePercent();
                                        vmx[0].datCompareShrink1({ responsePctStr: ko.observable(winner) });
                                    }
                                    return vmx;
                                };
                                datable["datcountableitemholder"](makedatcountableitemholder());
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        }
                    };
                };
                //#endregion
                //#endregion datFeed1

                
                //#region datTypeSelector1
                if (!ko.bindingHandlers.datTypeSelector1) {
                    ko.bindingHandlers.datTypeSelector1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$data;
                                self._initiateMalihuScrollhoriz("scrollrootdatTypeSelector1");
                                pnl["scrollToCurrentUniverseMember"] = function () {
                                    var id = pnl["currentDatUniverseMember"].id;
                                    var datuniversekey = ".datuniversekey" + id.toString();
                                    var xtarget = $(datuniversekey).last();
                                    $("#scrollrootdatTypeSelector1").mCustomScrollbar('scrollTo', xtarget, { timeout: 100 });
                                };
                                pnl["ShowHideDatTypeSelector"] = function (context) {
                                    pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                    $("#dattypeselector1holder").off(self.xevent);
                                    
                                    var showSelector = function () {
                                        $("#dattypeselector1holder").off(self.xevent);
                                        $("#datTypeSelector1").removeClass("dattypeselectorhide");
                                        $("#dattypeselector1holder").css('max-height', "").css('margin', '').css('margin-right', '0.5em').css('margin-left', '0.5em').removeClass('datwhite');
                                        setTimeout(function () {
                                            //pnl["reviseHeight"]("showdattypeselector");
                                            pnlMgr.resizeWindowSvc().xOnResizeHandler();
                                            pnl["scrollToCurrentUniverseMember"]();
                                        }, 100);
                                    };
                                    if (context.hide) {
                                        $("#datTypeSelector1").addClass("dattypeselectorhide");
                                        $("#dattypeselector1holder").css('min-height', "1em").css('margin-bottom', '1em').css('margin-right', '6em').css('margin-left', '6em').addClass('datwhite');
                                        
                                        var addSelectorHolderHandler = function () {
                                            $("#dattypeselector1holder").on(self.xevent, function (e) {
                                                e.preventDefault();
                                                e.cancelBubble = true;
                                                showSelector();
                                            });
                                        };
                                        setTimeout(function () {
                                            //pnl["reviseHeight"]("hidedattypeselector");
                                            pnlMgr.resizeWindowSvc().xOnResizeHandler();
                                            addSelectorHolderHandler();
                                        }, 100);
                                    } else {
                                        if ($("#datTypeSelector1").hasClass("dattypeselectorhide")) {
                                            showSelector();
                                        } else {
                                            var hmmm = true;
                                        }
                                    };
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try { }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                //#endregion datTypeSelector1

                //#region datTypeSelectorElem1
                if (!ko.bindingHandlers.datTypeSelectorElem1) {
                    ko.bindingHandlers.datTypeSelectorElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var datuniversekey = "datuniversekey" + bindingContext.$data.id.toString();
                                $(elem).addClass(datuniversekey);
                                var toElementImage = function (datuniversitem) {
                                    var rslt = false;
                                    var dat = datuniversitem.datcomplete;
                                    try {
                                        switch (true) {
                                            case (dat.datType == 1):
                                                var imgj = dat.otherdcelems[0].elementImage;//.toJSON();
                                                if (imgj) {
                                                    rslt = imgj || imgj.url() || img.url;
                                                }
                                                break;
                                            case (dat.datType == 2):
                                                var imgj = dat.otherdcelems[0].elementImage;//.toJSON();
                                                if (imgj) {
                                                    rslt = imgj || imgj.url() || img.url;
                                                }
                                                break;
                                            case (dat.datType == 3):
                                                var imgj = dat.otherdcelems[0].elementImage;//.toJSON();
                                                if (imgj) {
                                                    rslt = imgj || imgj.url() || img.url;
                                                }
                                                break;
                                        }
                                    }
                                    catch (ex) {
                                        //var yyy = dat.datOwner.toJSON();
                                        //var imgj = yyy;
                                        //rslt = imgj.url;
                                        var x = true;
                                    }

                                    return rslt || prweb.pCElemHtmlDxnry['datBlue1'].resourceModel;

                                };
                                bindingContext.$data["datpictureurl"] = ko.observable(toElementImage(bindingContext.$data));
                                bindingContext.$data["tapDatTypeSelectorElem"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    e.stopPropagation();
                                    //$("#dattypeselector1holder").off(self.xevent);
                                    try {
                                        var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                        var newid = x.id || 0;
                                        var showNewSelectedDatType = function () {
                                            pnl["lastUniverseId"] = newid;
                                            pnl["currentDatUniverseMember"] = pnl.datUniverse[newid];
                                            pnl["dattypeSelectorsvc"].hide({ inEdit: true });
                                            pnl.datacontext({ addNew: true });
                                            pnl.datacontext.valueHasMutated();
                                        };
                                        if (pnl["lastUniverseId"]) {
                                            if (pnl["lastUniverseId"] === newid) {
                                                pnl["lastUniverseId"] = true;
                                                pnl["dattypeSelectorsvc"].hide({ inEdit: true, isTapDatType: true });
                                                //pnl["lastUniverseId"] = false;
                                            } else {
                                                pnl["lastUniverseId"] = false;
                                                pnl["currentDatUniverseMember"] = pnl.datUniverse[newid];
                                                pnl["dattypeSelectorsvc"].hide({ inEdit: true, isTapDatType: true });
                                                pnl.datacontext({ addNew: true });
                                                pnl.datacontext.valueHasMutated();
                                            }
                                        } else {
                                            showNewSelectedDatType();
                                        }
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return false;
                                };
                                //#region Make the html countables...
                                var dfe = bindingContext.$data;

                                
                                bindingContext.$data["datcountableitemVmx"] = ko.observable();
                                bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                                var jsdat = bindingContext.$data.datcomplete || false;

                                var xcolxn = [];
                                if (jsdat.datType == 1 || jsdat.datType == 11 || jsdat.datType == 12) {
                                    //xcolxn = bindingContext.$data["datPageEntry"].init(jsdat);
                                    xcolxn = bindingContext.$data["xcolxn"];
                                    var rateiscircle = false;
                                    xcolxn[0]["isCircle"] = ko.observable(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                                    xcolxn[0]["isNotCircle"] = ko.observable(!rateiscircle);
                                } else {
                                    xcolxn = bindingContext.$data["xcolxn"];//["datPageEntry"].init(jsdat);
                                    xcolxn[0].ratecaptioncolxn = [];
                                    var rateiscircle = ko.unwrap(xcolxn[0]["countableColxn"])[0]["isCircle"] || false;//jsdat.countables[0].isCircle || false;
                                    xcolxn[0]["isCircle"] = ko.observable(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                                    xcolxn[0]["isNotCircle"] = ko.observable(!rateiscircle);
                                }
                                if (xcolxn) {
                                    
                                    xcolxn[0]["datcountableitemholder"] = ko.observableArray();
                                    xcolxn[0]["widgetizedatCountableItemResults"] = function (elem, model) {
                                        try {
                                            var mymodel = ko.dataFor(elem[1]);
                                            var T = "." + "dateditcountableitem";
                                            var echild = $(T, $(elem[1]));
                                            ko.applyBindings(mymodel, echild[0]);
                                        }
                                        catch (ex) {
                                            var wtf = truel
                                        }
                                        return;
                                    };
                                    bindingContext.$data["datcountableitemVmx"](xcolxn[0]);
                                    var yes = true;
                                } else if (jsdat.datType == 1) {
                                    var hmm = true;
                                }
                                //#endregion make the html countables...
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var datable = bindingContext.$data["datcountableitemVmx"]();
                                var makedatcountableitemholder = function () {
                                    var pnlpresenterT = datable.modelcore.presenterT;
                                    //this viewmodel is ko.apply() in the panel panelentry?... it is a method named ?
                                    var vmx = [{
                                        presenterT: "",
                                        responseImage: ko.observable(),
                                        html: ko.observable(),
                                        datRateShrink1: ko.observable(),
                                        datSentimentShrink1: ko.observable(),
                                        datCompareShrink1: ko.observable()
                                    }];
                                    if (pnlpresenterT == "datRate1") {
                                        //var jsdat = bindingContext.$data.datcomplete || false;
                                        //var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(jsdat);//, modeparams);
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datRateSelector1"].resourceModel);
                                        bindingContext.$data["xcolxn"][0].ratecaptioncolxn = [];
                                        vmx[0].datRateShrink1(bindingContext.$data["xcolxn"][0]);//(newvmx[0]);
                                    } else if (pnlpresenterT == "datSentiment1") {
                                        var jsdat = bindingContext.$data.datcomplete || false;
                                        var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(jsdat);
                                        //cmdl.responseImage(dce.emoji);
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datSentimentSelector1"].resourceModel);
                                        vmx[0].datSentimentShrink1(newvmx[0]);
                                        var xyes = datable;// set the vmx so that classes attach to the html...in bindings...hide or show emoji etc...
                                    } else if (pnlpresenterT == "dat5" || pnlpresenterT == "dat115" || pnlpresenterT == "dat125") {
                                        vmx[0].html(prweb.pCElemHtmlDxnry["datCompareSelector1"].resourceModel);
                                        //var jsdat = bindingContext.$data.datcomplete || false;
                                        //var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(jsdat);
                                        //var winner = Enumerable.From(newvmx).MaxBy(function (r) {
                                        //    return r.modelcore.responseCount();
                                        //}).modelcore.responsePercent();
                                        vmx[0].datCompareShrink1({ responsePctStr: ko.observable("0%") });
                                    }
                                    return vmx;
                                };
                                datable["datcountableitemholder"](makedatcountableitemholder());
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                //#endregion datTypeSelectorElem1
                //#region datTypeSelectorSvc
                var datTypeSelectorSvc = function (xdc) {
                    var me = {
                        datTypeUniverse: function (isedit) {
                            if (isedit) {
                                me.hide();
                            } else {
                                me.show();
                            }
                            return prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().datTypeUniverse(isedit || false);
                        },
                        defaultDatType: function () {
                            var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                            pnl["lastUniverseId"] = pnl.datUniverse[2].id;
                            return pnl.datUniverse[2];
                        },
                        hide: function (context) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                if (context) {
                                    if (context.inEdit) {
                                        context["hide"] = true;
                                        pnl["ShowHideDatTypeSelector"](context);
                                        context.inEdit = false;
                                    }
                                } else {
                                    $("#dattypeselector1host").css("display", "none");
                                }
                            } catch (ex) {
                                var wtf = true;
                            }
                        },
                        show: function () {
                            $("#dattypeselector1host").css("display", "");
                        },
                        nextType: function () {
                            var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                            var newid = pnl["currentDatUniverseMember"].id + 1;
                            if (newid > 4) {
                                newid = 0;
                            }
                            pnl["currentDatUniverseMember"] = pnl.datUniverse[newid];
                            pnl.datacontext.valueHasMutated();
                        },
                        getIt: function (pnl) {
                            var rslt = {};
                            rslt["newxcolxn"] = pnl["currentDatUniverseMember"].xcolxn;
                            //var editorTDxnry = {
                            //    "datRate1": "datRateEdit1",
                            //    "datSentiment1": "datSentimentEdit1",
                            //    "dat5": "datFiveEdit1",
                            //    dispose: false
                            //};
                            //Enumerable.From(rslt["newxcolxn"]).ForEach(function (r) {
                            //    var edT = editorTDxnry[r.modelcore.presenterT];
                            //    r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                            //    r.modelcore.presenterT = edT;
                            //});
                            rslt["currentDatUniverseMember"] = pnl["currentDatUniverseMember"];
                            return rslt;
                        },
                        buildDatType: function (bindingContext) {
                            try {
                                bindingContext.$data["datcountableitemVmx"] = ko.observable();
                                var currentdattype = bindingContext.$data.pnl["currentDatUniverseMember"];
                                var xcolxn = currentdattype.xcolxn;
                                var editorTDxnry = {
                                    "datRateEdit1": "datRateShrink1",
                                    "datRateShrink1": "datRateShrink1",
                                    "datSentimentEdit1": "datSentimentShrink1",
                                    "datSentimentShrink1": "datSentimentShrink1",
                                    "datCompareShrink1": "datCompareShrink1",
                                    "datFiveEdit1": "datCompareShrink1",
                                    dispose: false
                                };
                                Enumerable.From(xcolxn).ForEach(function (r) {
                                    var edT = editorTDxnry[r.modelcore.presenterT];
                                    r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel);
                                    r.modelcore.presenterT = edT;
                                });
                                // there are different kind of dats...they have different html...rates/sentiments....
                                //so feedElem needs to have html that allows both...and a Vmx too....
                                var rateiscircle = false;
                                if (currentdattype.datcomplete.countables.length > 0) {
                                    rateiscircle = currentdattype.datcomplete.countables[0].isCircle
                                }
                                xcolxn[0]["isCircle"] = ko.observable(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                                xcolxn[0]["isNotCircle"] = ko.observable(!rateiscircle);
                                xcolxn[0]["datcountableitemholder"] = ko.observableArray();
                                xcolxn[0]["widgetizedatCountableItemResults"] = function (elem, model) {
                                    var mymodel = ko.dataFor(elem[1]);
                                    var T = "." + "datcountableitem";
                                    var echild = $(T, $(elem[1]));
                                    ko.applyBindings(mymodel, echild[0]);
                                    return;
                                };
                                bindingContext.$data["datcountableitemVmx"](xcolxn[0]);
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        dispose: false
                    };
                    return me;
                };
                //#endregion datTypeSelectorSvc

                //#region datEmojiSelector1
                if (!ko.bindingHandlers.datEmojiSelector1) {
                    ko.bindingHandlers.datEmojiSelector1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                $("#emojiselectorcontrolspanel").off(self.xevent);
                                var pnl = bindingContext.$data.pnl;
                                pnl["ShowHideEmojiPanel"] = function (e, action) {
                                    if (action) {
                                        if (action.show) {
                                            $("#datEmojiSelector1").removeClass('dathide');
                                        }
                                    } else {
                                        if ($("#datEmojiSelector1").hasClass('dathide')) {
                                            $("#datEmojiSelector1").removeClass('dathide');
                                        } else {
                                            $("#datEmojiSelector1").addClass('dathide');
                                        }
                                    }
                                    var yes = true;
                                };
                                $("#emojiselectorcontrolspanel").on(self.xevent, pnl["ShowHideEmojiPanel"]);
                                self._initiateMalihuScrollhoriz("scrollrootdatEmojiSelector1");
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try { }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                //#endregion datTypeSelector1
                //#region datEmojiSelectorElem1
                if (!ko.bindingHandlers.datEmojiSelectorElem1) {
                    ko.bindingHandlers.datEmojiSelectorElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                //bindingContext.$data["emoji"] = ko.observable(toElementImage(bindingContext.$data));

                                bindingContext.$data["tapDatEmojiSelectorElem"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        
                                        var xrslt = !ko.unwrap(x.selected);
                                        x.selected(xrslt);
                                        x.isnotselected(!xrslt);
                                        var cntblecolxn = ko.unwrap(bindingContext.$parent.localCountableColxn) || false;
                                        var sourcecountablecolxn = ko.unwrap(bindingContext.$parent.countableColxn) || false;
                                        if (!xrslt) {
                                            var sxcountable = Enumerable.From(sourcecountablecolxn).Where(function (c) {
                                                return ko.unwrap(c.emojiObj)["universeKey"] == x.universeKey;
                                            }).ToArray();
                                            if (sxcountable.length > 0) {
                                                sxcountable[0].emoji = "";
                                                sxcountable[0].datElementText = "";
                                                sxcountable[0].emojiObj()["emoji"] = "";
                                                sxcountable[0].emojiObj()["universeKey"] = false;
                                                sxcountable[0].emojiObj()["caption"] = "";
                                                sxcountable[0].emojiObj().selected(xrslt);
                                                sxcountable[0].emojiObj().isnotselected(!xrslt);
                                            }
                                            var xcountable = Enumerable.From(cntblecolxn).Where(function (c) {
                                                return c.emojiObj["universeKey"] == x.universeKey;
                                            }).ToArray();
                                            if (xcountable.length > 0) {
                                                xcountable[0].xemoji("");
                                                xcountable[0].xdatElementText("");
                                                xcountable[0].emojiObj["emoji"] = "";
                                                xcountable[0].emojiObj["universeKey"] = false;
                                                xcountable[0].emojiObj.selected(xrslt);
                                                xcountable[0].emojiObj.isnotselected(!xrslt);
                                            }
                                            
                                        }
                                        if (xrslt) {
                                            var countable = Enumerable.From(cntblecolxn).Where(function (c) {
                                                return ko.unwrap(c.xemoji) == "";
                                            }).ToArray();
                                            if(countable.length > 0){
                                                countable[0].xemoji(ko.unwrap(x.emoji));
                                                countable[0].xdatElementText(x.caption);
                                                countable[0].emojiObj["emoji"] = x.emoji;
                                                countable[0].emojiObj["universeKey"] = x.universeKey;
                                                countable[0].emojiObj["caption"] = x.caption;
                                                countable[0].emojiObj.selected(xrslt);
                                                countable[0].emojiObj.isnotselected(!xrslt);
                                            };
                                            var scountable = Enumerable.From(sourcecountablecolxn).Where(function (c) {
                                                return ko.unwrap(c.emoji) == "";
                                            }).ToArray();
                                            if (scountable.length > 0) {
                                                scountable[0].emoji = (ko.unwrap(x.emoji));
                                                scountable[0].datElementText = x.caption;
                                                scountable[0].emojiObj()["caption"] = x.caption;
                                                scountable[0].emojiObj()["emoji"] = ko.unwrap(x.emoji);
                                                scountable[0].emojiObj()["universeKey"] = x.universeKey;
                                                scountable[0].emojiObj().selected(xrslt);
                                                scountable[0].emojiObj().isnotselected(!xrslt);
                                            };
                                        }
                                        
                                        bindingContext.$parent.pnl["datSingleEditSvc"].resetDonePostControl();
                                        var bc = bindingContext;
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                //#endregion datEmojiSelectorElem1

                //#region datLinkePasteEntry1
                if (!ko.bindingHandlers.datLinkePasteEntry1) {
                    ko.bindingHandlers.datLinkePasteEntry1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                //var toNewLinkedMediaObject = function () {
                                //    return {
                                //        putativeUrl: ko.observable(),
                                //    };
                                //};
                                var ToContextLinkedMediaObject = function () {
                                    var context = {
                                        ismediapopulated: false,
                                        isimagepopulated: false,
                                        linkedMediaObject: {
                                            url: ko.observable(false),
                                            sourceeditfield: ko.observable(false),
                                            resolved: ko.observable(false),
                                            resolvedUrlImage: ko.observable(false),
                                            resolvedUrlText: ko.observable(false),
                                            putativeUrl: ko.observable("http://datmoments.com"),
                                            dispose: false
                                        }
                                    };
                                    try {
                                        Enumerable.From(context).ForEach(function (prop) {
                                            if (ko.unwrap(bindingContext.$data[prop.Key])) {
                                                context[prop.Key] = bindingContext.$data[prop.Value];
                                            } else if (prop.Key = "linkedMediaObject") {
                                                lmo = ko.unwrap(bindingContext.$data[prop.Key])
                                                Enumerable.From(context[prop.Key]).ForEach(function (xprop) {
                                                    var value = lmo[xprop.Key] || xprop.Value;
                                                    context[prop.Key][xprop.Key] = ko.observable(value);
                                                    var xx = 1;
                                                });
                                                bindingContext.$data[prop.Key](context[prop.Key]);
                                                var yes = true;
                                            }
                                        });
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                    return context;
                                };
                                var context = ToContextLinkedMediaObject();
                                var onDoneHandler = function (xkodata, $this) {
                                    var methodDxnry = {
                                        updateBoundItems: function (xr) {
                                            try {
                                                bindingContext.$data["EDITOBJtitleText"]()["vanillaValue"](xr.title);
                                                bindingContext.$data["EDITOBJtitleText"]()["vanillaValue"].valueHasMutated();
                                                bindingContext.$data["EDITOBJtitleText"]()["titleText"](xr.title);
                                                bindingContext.$data["EDITOBJtitleText"]()["titleText"].valueHasMutated();
                                                bindingContext.$data["isimagepopulated"](true);
                                                bindingContext.$data["islinkedmediapopulated"](true);
                                                return true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return false;
                                            }

                                        },
                                        datFiveEdit1: function (xr) {
                                            try {
                                                bindingContext.$data["modelcore"]["elementImage"](xr.image);
                                                return true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return false;
                                            }
                                        },
                                        isimagepopulated: function () { },
                                        populateMainImageObject: function (xr, dimgxr, T) {
                                            if (T == prweb.datSingleEditor1) {
                                                bindingContext.$data["mainImageObject"]["datImgId"] = dimgxr.datimgid;
                                            }
                                            //["mainImageObject"] = { url: false, datImgId: false };
                                            bindingContext.$data["mainImageObject"]["url"] = xr.image;

                                            return true;
                                        },
                                        populateLinkedMediaObject: function (xr) {
                                            try {
                                                var xlmo = ko.unwrap(bindingContext.$data["linkedMediaObject"]);
                                                var datmap = { contentUrl: "url", image: "resolvedUrlImage", title: "resolvedUrlText" }
                                                Enumerable.From(xr).ForEach(function (xprop) {
                                                    var value = ko.unwrap(xprop.Value);
                                                    if (datmap[xprop.Key]) {
                                                        xlmo[datmap[xprop.Key]](xprop.Value);
                                                    }
                                                });
                                                //linkedMediaObject: {
                                                //        url: false,
                                                //        sourceeditfield: false,
                                                //        resolved: false,
                                                //        resolvedUrlImage: false,
                                                //        resolvedUrlText: false,
                                                //        putativeUrl: "http://datmoments.com",
                                                //        }
                                                return true;
                                            }
                                            catch (ex) {
                                                alert("paste Link populateLinkedMediaObject is unhappy...");
                                                var wtf = true;
                                                return false;
                                            }
                                        },
                                        createDatImageForLinkedMediaImage: function (xr) {
                                            try {
                                                var parms = {
                                                    url: xr["image"] || false
                                                };
                                                if (parms.url) {
                                                    var pnl = bindingContext.$data.pnl || pnlMgr.panel(prweb.datSingleEditor1);
                                                    var imgSizingSvc = datImageSizingSvc(pnl["datSingleEditSvc"]);
                                                    var T = bindingContext.$data["presenterT"] || bindingContext.$data["modelcore"]["presenterT"];
                                                    var bindingTarget = false;
                                                    var xselimghost = "." + T + "imghost"
                                                    if (T == prweb.datSingleEditor1) {
                                                        bindingTarget = bindingContext.$data["mainImage"];//(xr.image);
                                                        xselimghost = ".datSingleEditQestion1imghost";
                                                    } else if (T == "datFiveEdit1" || T == "dat115Edit1" || T == "dat125Edit1") {
                                                        //#datSingleEditQestion1imageholder || #datSingleEditQestion1imghost...

                                                        bindingTarget = bindingContext.$data["modelcore"]["elementImage"];//(xr.image);
                                                        xselimghost = ".datFiveEdit1imghost"
                                                    } else {
                                                        bindingTarget = bindingContext.$data["mainImage"];//(xr.image);
                                                    };
                                                    var imgelement = $("img", $(xselimghost));
                                                    return prweb.parseManager.createDatImageFromUrl(parms).then(function (preimgxr) {
                                                        return imgSizingSvc.toScaledUrlImage(imgelement, preimgxr.datimgurl, bindingTarget, preimgxr.datimgpntr, xkodata).then(function (xximgxr) {
                                                            var imgxr = preimgxr;
                                                            //return prweb.parseManager.createDatImageFromUrl(parms).then(function (imgxr) {
                                                            var xlmo = ko.unwrap(bindingContext.$data["linkedMediaObject"]) || false;
                                                            if (xlmo) {
                                                                xlmo["datImageFileObject"] = imgxr;
                                                                Enumerable.From(xr).ForEach(function (xprop) {
                                                                    var value = ko.unwrap(xprop.Value);
                                                                    xlmo[xprop.Key] = xprop.Value;
                                                                });
                                                                var pnl = bindingContext.$data.pnl || pnlMgr.panel(prweb.datSingleEditor1);
                                                                if (pnl) {
                                                                    var me = pnl["datSingleEditSvc"];
                                                                    me.datimgscolxn.push({
                                                                        datimagespntr: imgxr.datimgpntr,
                                                                        url: imgxr.datimgurl,
                                                                        id: imgxr.datimgid,
                                                                        sourceUrl: imgxr.sourceUrl
                                                                    });
                                                                }
                                                                return xlmo["datImageFileObject"] || false;
                                                                //imgxr{
                                                                //    datimgurl: url || false,
                                                                //    datimgid: datimgid || false,
                                                                //    sourceUrl: xurl
                                                                //}
                                                            } else {
                                                                return xlmo;
                                                            }
                                                        
                                                        });
                                                    });
                                                }

                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return Parse.Promise.as(false);
                                            }
                                        },
                                        getUrl: function (xcontext) {
                                            try {
                                                var lmo = ko.unwrap(xcontext["linkedMediaObject"]) || context.linkedMediaObject;
                                                if (lmo) {
                                                    var maybeurl = ko.unwrap(lmo.putativeUrl);
                                                    var pnl = bindingContext.$data['pnl'] || bindingContext.$data;
                                                    return pnl["datSingleEditSvc"].isUrl(maybeurl).then(function (xr) {
                                                        context["isUrl"] = xr;
                                                        return xr;
                                                    });
                                                } else {
                                                    alert("no linkedMediObject");
                                                    xcontext["getUrlMessage"] = ("no linkedMediObject");
                                                    return Parse.Promise.as(xcontext);
                                                }
                                                
                                                var yes = true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return Parse.Promise.as(false);
                                            }

                                        }
                                    };
                                    return methodDxnry["getUrl"](xkodata).then(function (xr) {
                                        try {
                                            if (xr) {
                                                //var $textarea = bindingContext.$data["EDITOBJtitleText"]()["$textarea"];//$(".EDITOBJtitleText").last();
                                                var T = bindingContext.$data["presenterT"] || bindingContext.$data["modelcore"]["presenterT"];
                                                
                                                if (T == "datFiveEdit1" || T == "dat115Edit1" || T == "dat125Edit1") {
                                                    methodDxnry["datFiveEdit1"](xr);
                                                } else {
                                                    bindingContext.$data["mainImage"](xr.image);
                                                };
                                                xr["updateBoundItems"] = methodDxnry["updateBoundItems"](xr);
                                                xr["populateMainImageObject"] = methodDxnry["populateMainImageObject"](xr);
                                                xr["populateLinkedMediaObject"] = methodDxnry["populateLinkedMediaObject"](xr);
                                                xr["toDatImageObjectFromUrl"] = methodDxnry["createDatImageForLinkedMediaImage"];//function only..
                                                return methodDxnry["createDatImageForLinkedMediaImage"](xr).then(function (dimgxr) {
                                                    xr["datImageObjectFromUrl"] = dimgxr;
                                                    if (bindingContext.$data["mainImageObject"]) {
                                                        bindingContext.$data["mainImageObject"]["datImageObjectFromUrl"] = dimgxr;
                                                        xr["populateMainImageObject"] = methodDxnry["populateMainImageObject"](xr, dimgxr, T);
                                                    }
                                                    
                                                    
                                                    
                                                    return xr;
                                                }).fail(function () {
                                                    return xr;
                                                });
                                                //$textarea.change();//forces resize in textare
                                                
                                            }
                                        }
                                        catch (ex) {
                                            return Parse.Promise.as(false);
                                        }
                                    });
                                };
                                var onPasteHandler = function (xthis, xval) {
                                    try {
                                        var xkodata = ko.dataFor(xthis);

                                        setTimeout(function () {
                                            try {
                                                var val = xval || $('.linkPasteEntryAreainput', $(element)).val();
                                                var lmo = ko.unwrap(xkodata["linkedMediaObject"]) || context.linkedMediaObject;
                                                lmo.putativeUrl(val);
                                                xkodata["linkedMediaObject"](lmo);
                                                //ko.unwrap(xkodata["linkedMediaObject"]).putativeUrl(val);
                                                return onDoneHandler(xkodata, $(xthis)).then(function () {
                                                    try {
                                                        var  testig = xkodata["linkedMediaObject"]() || "lmo still empty";
                                                        xkodata["exposeLinkPasteArea"](false);
                                                        var $textarea = xkodata["EDITOBJtitleText"]()["$textarea"] || false;
                                                        if ($textarea) {
                                                            $($textarea).val(xkodata["EDITOBJtitleText"]().vanillaValue());
                                                            var txtval = $($textarea).val();
                                                            //var sh = $textarea.scrollHeight;
                                                            $($textarea).height(0).height($textarea.scrollHeight);//forces resize in textare
                                                            
                                                        } else {
                                                            
                                                        }
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    pnlMgr.appPositionRefresh();
                                                    return false;
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return false;
                                            }

                                        }, 100);

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    $(xthis).off('paste');
                                };
                                var onRemoveHandler = function (xkodata, $this) {
                                    xkodata.islinkedmediapopulated(false);
                                    xkodata["exposeLinkPasteArea"](false);
                                    xkodata["linkedMediaObject"](false);
                                    //TODO: SHOULD THIS REMOVE PICTURE AND TEXT TOO?
                                };
                                var addButtonHandlers = function (kodata, $this) {
                                    kodata = bindingContext.$data;
                                    var showExistingUrl = function () {
                                        try {
                                            var djmdl = kodata.pnl.currentDatUniverseMember.datcomplete.datJsonModel;
                                            var ispopulated = ko.unwrap(kodata.islinkedmediapopulated);
                                            var lmo = ko.unwrap(kodata.linkedMediaObject) || false;
                                            var $textarea = $('.linkPasteEntryAreainput', $(element));
                                            if ($textarea && ispopulated && lmo) {
                                                $textarea.val(lmo.url());
                                                $($textarea).height(0).height($textarea.scrollHeight);
                                                pnlMgr.appPositionRefresh();
                                                $(".removeurlpastebtn", $(element)).on(self.xevent, function () {
                                                    onRemoveHandler(kodata, $(this));
                                                });
                                            }
                                        }
                                        catch (ex) {
                                            self.wtf(ex);
                                            //return false;
                                        }
                                    };
                                    showExistingUrl();
                                    ko.unwrap(kodata["EDITOBJtitleText"])["onPasteHandler"] = onPasteHandler;
                                    $(".cancelurlpastebtn", $(element)).on(self.xevent, function () {
                                        //$(this).off(self.xevent);
                                        var xkodata = ko.dataFor(this);
                                        xkodata["exposeLinkPasteArea"](false);
                                        var $textarea = xkodata["EDITOBJtitleText"]()["$textarea"] || false;
                                        if ($textarea) {
                                            $($textarea).height(0).height($textarea.scrollHeight);
                                        }
                                    });
                                    
                                    $(".doneurlpastebtn", $(element)).on(self.xevent, function () {
                                        try {
                                            //$(this).off(self.xevent);
                                            var xkodata = ko.dataFor(this);
                                            xkodata["exposeLinkPasteArea"](false);
                                            var val = $('.linkPasteEntryAreainput', $(element)).val();
                                            ko.unwrap(xkodata["linkedMediaObject"]).putativeUrl(val);
                                            

                                            //$textarea.change();//forces resize in textare

                                            return onDoneHandler(xkodata, $(this)).then(function () {
                                                try {
                                                    //xkodata["exposeLinkPasteArea"](false);
                                                    var $textarea = xkodata["EDITOBJtitleText"]()["$textarea"] || false;
                                                    if ($textarea) {
                                                        $($textarea).val(xkodata["EDITOBJtitleText"]().vanillaValue());
                                                        var txtval = $($textarea).val();
                                                        //var sh = $textarea.scrollHeight;
                                                        $($textarea).height(0).height($textarea.scrollHeight);//forces resize in textare
                                                        //return true;
                                                    } else {
                                                        //return false;
                                                    }
                                                    pnlMgr.appPositionRefresh();
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                    //return false;
                                                }
                                            });
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    });
                                    if (ko.unwrap(bindingContext.$data["isimagepopulated"]) == false) {
                                        $('.linkPasteEntryAreainput', $(element)).on('paste', function () {
                                            try {
                                                var xkodata = ko.dataFor(this);
                                                var xthis = this;
                                                onPasteHandler(xthis);

                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            $(this).off('paste');

                                        });
                                    }

                                };
                                addButtonHandlers();

                                bindingContext.$data["tapCancelHandler"] = function (x, e) { };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#endregion datLinkePasteEntry1

                //#region datLinkedMediaPopup1
                if (!ko.bindingHandlers.datLinkedMediaPopup1) {
                    ko.bindingHandlers.datLinkedMediaPopup1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var exposeLinkPasteArea = function (kodata, $this) {
                                    kodata["exposeLinkPasteArea"](true);
                                    var $textarea = kodata["EDITOBJtitleText"]()["$textarea"] || false;
                                    if ($textarea) {
                                        //var sh = $textarea.scrollHeight;
                                        $($textarea).height(0).height($textarea.scrollHeight);//forces resize in textare
                                    }

                                    //setTimeout(function () {
                                    //    $(".cancelurlpastebtn").on(self.xevent, function () {
                                    //        var xkodata = ko.dataFor(this);
                                    //        xkodata["exposeLinkPasteArea"](false);
                                    //        $(this).off(self.xevent);
                                    //    });

                                    //}, 10);
                                };
                                var attachTextAreaPasteEventHandler = function (kodata, $this) {
                                    kodata["exposeLinkPasteArea"](true);
                                    var $textarea = kodata["EDITOBJtitleText"]()["$textarea"] || false;
                                    if ($textarea) {
                                        $($textarea).off('paste.datLinkedMediaPopup1');
                                        $($textarea).on('paste.datLinkedMediaPopup1', function () {
                                            try {
                                                var $elem = $(this);
                                                var val = false;
                                                setTimeout(function () {
                                                    val = $elem.val() || $elem.html() || false;
                                                    ko.unwrap(kodata["EDITOBJtitleText"])["onPasteHandler"](element, val);
                                                }, 10);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            //$(this).off('paste.datLinkedMediaPopup1');
                                        });
                                    }
                                };
                                
                                var tapHandler = function (kodata, $this) {
                                    var yes = true;
                                    if (yes) {
                                        exposeLinkPasteArea(kodata, $this);
                                        attachTextAreaPasteEventHandler(kodata, $this);
                                    } else {
                                        var hmmm = true;
                                    }
                                };
                                $(element).off(self.xevent);
                                $(element).on(self.xevent, function (e) {
                                    try {
                                        var kodata = ko.dataFor(this);
                                        var $this = $(this);
                                        tapHandler(kodata, $this);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                });
                                bindingContext.$data["tapLinkedMediaPopup"] = function (x, e) {
                                    try {
                                        var kodata = ko.dataFor(this) || x;
                                        var $this = $(this);
                                        tapHandler(kodata, $this);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#endregion datLinkedMediaPopup1

                var datEditBehaviorSvc = function (xdatjsonmodel) {
                    var me = {
                        datJsonModel: false,
                        shareOptions: false,
                        populateBehaviorsObject: function () {
                            var rslt = {};
                            try {
                                var props = ["singlevote", "comments", "revisevote", "allrespondents", "onlyme", "selecteddatters"];
                                var methods = {
                                    singlevote: function () {
                                        var rslt = true;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["singleVote"] || false;
                                        }
                                        return rslt;
                                    },
                                    comments: function () {
                                        var rslt = true;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["comments"] || false;
                                        }
                                        return rslt;
                                    },
                                    revisevote: function () {
                                        var rslt = false;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["revisevote"] || false;
                                        }
                                        return rslt;
                                    },
                                    allrespondents: function () {
                                        var rslt = true;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["allrespondents"] || false;
                                        }
                                        return rslt;
                                    },
                                    onlyme: function () {
                                        var rslt = true;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["onlyme"] || false;
                                        }
                                        return rslt;
                                    },
                                    selecteddatters: function () {
                                        var rslt = false;
                                        if (me.shareOptions) {
                                            rslt = me.shareOptions["selecteddatters"] || false;
                                        }
                                        return rslt;
                                    }

                                }
                                Enumerable.From(props).ForEach(function (prop) {
                                    rslt[prop] = ko.observable(methods[prop]());
                                   // me.shareOptions[prop] = rslt[prop];
                                });

                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt;
                        },
                        datBehaviorsObject: function () {
                            var rslt = {};
                            try {
                                rslt = me.populateBehaviorsObject();
                                rslt["commentstapoptionhandler"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.comments);
                                        x.comments(!current);
                                        //if (!current) {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "")
                                        //}
                                        
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                rslt["revisevotetapoptionhandler"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.revisevote);
                                        x.revisevote(!current);
                                        //if (!current) {
                                        //    $('.datsingleeditbehaviorsoption',$(this)).css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "")
                                        //}

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                rslt["singlevotetapoptionhandler"] = function (x, e) {
                                    //$(".datsingleeditbehaviorsoptionbtn").on(self.xevent, function (e){
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.singlevote);
                                        x.singlevote(!current);
                                        //if (current) {
                                        //    $('.datsingleeditbehaviorsoption', "#singlevotetapoptionhandler").css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', "#singlevotetapoptionhandler").css("color", "")
                                        //}

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    //});
                                };
                                rslt["allrespondentstapoptionhandler"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.allrespondents);
                                        x.allrespondents(!current);
                                        //if (!current) {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "")
                                        //}

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                rslt["onlymetapoptionhandler"] = function (x, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.onlyme);
                                        x.onlyme(!current);
                                        //if (!current) {
                                        //    $('.datsingleeditbehaviorsoption',$(this)).css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', $(this)).css("color", "")
                                        //}

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                rslt["selecteddatterstapoptionhandler"] = function (x, e) {
                                    //$(".datsingleeditbehaviorsoptionbtn").on(self.xevent, function (e){
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var current = ko.unwrap(x.selecteddatters);
                                        x.selecteddatters(!current);
                                        //if (current) {
                                        //    $('.datsingleeditbehaviorsoption', "#singlevotetapoptionhandler").css("color", "red");
                                        //} else {
                                        //    $('.datsingleeditbehaviorsoption', "#singlevotetapoptionhandler").css("color", "")
                                        //}

                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    //});
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt;
                        },
                        dispose: false
                    };
                    if (xdatjsonmodel) {
                        me.shareOptions = xdatjsonmodel["shareOptions"] || false;
                        me.datJsonModel = xdatjsonmodel || false;
                    }
                    return me;
                };
                //#region datEditorPostOptions1
                if (!ko.bindingHandlers.datEditorPostOptions1) {
                    ko.bindingHandlers.datEditorPostOptions1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$data;
                                
                                //= datEditBehaviorSvc;//["datBehaviorsObject"]();
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };

                //#endregion datEditorPostOptions1

                

                //#region datSingleEditSvc
                var datSingleEditSvc = function (xdc) {
                    var me = {
                        pnlcontxt: xdc,
                        isEdit: function () {
                            var rslt = false;
                            try {
                                var dc = ko.unwrap(me.pnlcontxt.$data.datacontext);
                                if (dc["editDat"]) {
                                    rslt = true;
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt;
                        },
                        datimgscolxn: [],
                        showDoneButtonIfOk: function () {
                            $("#datcontrolssingleeditoreditbtn").addClass("dathide");
                            var showbutton = function () {
                                $("#datcontrolssingleeditoreditbtn").removeClass("dathide");
                            };
                            try {
                                var pnl = me.pnlcontxt.$data;
                                var curdat = pnl["currentDatUniverseMember"];
                                
                                var isdefaultimage = true;
                                if (curdat.datType != "1") {
                                    var xcolxn0 = curdat.xcolxn[0] || false;
                                    if (xcolxn0) {
                                        isdefaultimage = ko.unwrap(xcolxn0.mainImage) == prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile.url();
                                        if (!isdefaultimage) {
                                            if (curdat.datType == "3") {
                                                var isemojiok = true;
                                                Enumerable.From(ko.unwrap(xcolxn0.localCountableColxn)).ForEach(function (c) {
                                                    if (!c.emojiObj.universeKey) {
                                                        isemojiok = false;
                                                    }
                                                });
                                                if (isemojiok) {
                                                    showbutton();
                                                }
                                            } else {
                                                showbutton();
                                            } 
                                        }
                                    }
                                    var xyes = true;
                                } else if (curdat.datType == "1") {
                                    //is datFive...enumerable.from(xcolxn).ForEach(function(){});
                                    var isdatfivecolxnok = true;
                                    var xcolxn = curdat.xcolxn;
                                    Enumerable.From(xcolxn).ForEach(function (c) {
                                        isdefaultimage = (ko.unwrap(c["modelcore"]["elementImage"])) == prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile.url();
                                        if (isdefaultimage && isdatfivecolxnok && !ko.unwrap(c.isdatfiveeditaddnew)) {
                                            isdatfivecolxnok = false;
                                        }
                                    });
                                    if (isdatfivecolxnok && xcolxn.length > 2) {
                                        showbutton();
                                    }
                                    
                                    var isdatfive = true;
                                }
                                var yes = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        datPostSpinner: {
                            activate: function (count) {
                                var pokealittle = function () { };
                                $("#datPostSpinnerEdit").removeClass("controlhide").addClass("datpostspinneractive");
                                try {
                                    //$.magnificPopup.open({
                                    //    items: {
                                    //        src: '<div class="datfeedspinneractive"> popup</div>'
                                    //    },
                                    //    type: 'inline',
                                    //    modal: true
                                    //});
                                    //$("#scrollrootdatFeed1").mCustomScrollbar('disable', true);
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            },
                            stop: function () {
                                $("#datPostSpinnerEdit").removeClass("datpostspinneractive").addClass("controlhide");
                                //$("#scrollrootdatFeed1").mCustomScrollbar('update');
                                try {
                                    //$.magnificPopup.close();
                                }
                                catch (ex) {
                                    var wtf = true;
                                }

                            },

                            dispose: false
                        },
                        
                        resetDonePostControl: function (xhdng) {
                            
                            $("#datsingleeditorpostinghost").css('display', "none");
                            $("#datcontrolssingleeditoreditbtn").removeClass("dathide");
                            if (me.isEdit()) {
                                me.controlheading("Edit 'dat");
                                $("#dattypeselector1host").css('display', "none");
                                $("#datsingleeditorpostoptionshost").css('display', "");
                            } else {
                                me.controlheading(xhdng);
                                $("#dattypeselector1host").css('display', "");
                                $("#datsingleeditorpostoptionshost").css('display', "none");
                                //$(".datsingleeditbehaviorsoptionbtn").off(self.xevent);
                            }
                            me.controlbuttontext("Post");
                            $("#datsingleeditorpostpublicbtn").off(self.xevent);
                            $("#datsingleeditorpostprivatebtn").off(self.xevent);
                            
                            if (!me.isEdit()) {
                                me.showDoneButtonIfOk();
                            }
                            me.pnlcontxt.$data["reviseHeight"]("init");
                        },

                        postDat: function () {
                            return me.save().then(function (xr) {
                                return xr;
                            });
                        },
                        postDatHandler: function () {
                            try {
                                var navigateToDatFeed = function () {
                                    try {
                                        var cbackto = navMgr.me(prweb.datControlsSingleEditor1).returnfromlast();//clears the lastsource...always go back to datFeed1
                                        cntrlMgr.showControl(prweb.datControls2);
                                        pnlMgr.hide(300);
                                        navMgr.me(prweb.datSingleEditor1).returnfromlast();//clears the lastsource...always go back to SingleDat1
                                        pnlMgr.show(200, prweb.datFeed1);
                                        //pnlMgr.panel(prweb.datSingleEditor1).datacontext(false);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                //navigateToDatFeed();
                                me.datPostSpinner.activate();
                                return me.postDat().then(function (xr) {
                                    setTimeout(function () {
                                        return pnlMgr.panel(prweb.datFeed1)["feedFilterUpdate"]().then(function (xxr) {
                                            var z = xr;
                                            var zz = xxr;
                                            me.datPostSpinner.stop();
                                            navigateToDatFeed();
                                        });
                                    }, 1500);
                                    return xr;
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },

                        manageShareResponsesToUI: function (showhide) {
                            try {
                                var xrsltcurrentDat = ko.unwrap(me.pnlcontxt.$data["currentDatUniverseMember"]);
                                var isdattype11 = (xrsltcurrentDat["datType"] == 11) || false;
                                if (isdattype11) {
                                    if (showhide == "show") {
                                        $("#datsingleeditordat115showresponsestoheading").removeClass("datdisplaynone");
                                        $("#datsingleeditordat115showresponsestobtn").removeClass("datdisplaynone");
                                    }
                                    if (showhide == "hide") {
                                        $("#datsingleeditordat115showresponsestoheading").addClass("datdisplaynone");
                                        $("#datsingleeditordat115showresponsestobtn").addClass("datdisplaynone");
                                    }
                                } else {
                                    $("#datsingleeditordat115showresponsestoheading").addClass("datdisplaynone");
                                    $("#datsingleeditordat115showresponsestobtn").addClass("datdisplaynone");
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        },

                        showDoneUI: function (kodata) {
                            me.controlheading("Post");
                            if (me.isEdit()) {
                                $("#datsingleeditorpostinghost").css('display', "none");
                                me.manageShareResponsesToUI("hide");
                            } else {
                                $("#datsingleeditorpostinghost").css('display', "");
                                me.manageShareResponsesToUI("show");
                            }
                            $("#datsingleeditorpostoptionshost").css('display', "");
                            $("#dattypeselector1host").css('display', "none");
                            //me.controlheading("Post");
                            me.controlbuttontext("Edit");
                            //$("#datcontrolssingleeditoreditbtn").addClass("dathide");
                            $("#datsingleeditorpostpublicbtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    me.pnlcontxt.$data["PublicPrivatePost"] = "PUBLIC";
                                    me.postDatHandler();
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            });
                            $("#datsingleeditorpostprivatebtn").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var navigateToShare = function () {
                                    try {
                                        navMgr.me(prweb.datControlsSingleEditor1).to(prweb.datControlsShare1);
                                        cntrlMgr.showControl(prweb.datControlsShare1).backtoT(prweb.datControlsSingleEditor1);
                                        pnlMgr.hide(300);
                                        var toT = navMgr.me(prweb.datSingleEditor1).to(prweb.datShare1);
                                        var pnl = pnlMgr.show(200, toT).backtoT(prweb.datSingleEditor1);
                                        //bindingContext.$data["rightmenueventsource"] = xpnl;
                                        me.pnlcontxt.$data["PublicPrivatePost"] = "PRIVATE";
                                        pnl["datacontext"](me.pnlcontxt);//bindContext
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return false;
                                };
                                navigateToShare();
                            });
                            
                            me.pnlcontxt.$data["reviseHeight"]("post");
                            var yes = true;
                        },

                        showBackToEditUI: function (kodata) {
                            me.resetDonePostControl("Edit");
                        },
                        controlheading: function (xhdng) {
                            var heading = xhdng || "Create 'dat";
                            cntrlMgr.control(prweb.datControlsSingleEditor1).panelprops()['username'](heading);
                        },
                        controlbuttontext: function (xbtntext) {
                            var btntext = xbtntext || "Post";
                            cntrlMgr.control(prweb.datControlsSingleEditor1).panelprops()['rightbuttontext'](btntext);
                        },

                        isUrl: function (xstring) {
                            var rslt = true;
                            try {
                                var matcher = /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/;

                                if (matcher.test(xstring)) {
                                    return prweb.parseManager.processUrl({ url: xstring }).then(function (xr) {
                                        return xr;
                                    }).fail(function (ex) {
                                        return Parse.Promise.as(false);
                                    });
                                } else {
                                    return Parse.Promise.as(false);
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt;
                        },

                        linkencountered: function (xr, kodata, xeditfield, editcontent) {
                            try {
                                var dat = kodata.$parent["currentDatUniverseMember"] || kodata.$parent["pnl"]["currentDatUniverseMember"];
                                var dattype = dat["datType"];
                                dat["linkedmedia"] = xr;
                                dat["linkedmedia"]["url"] = editcontent;
                                dat["linkedmedia"]["sourceeditfield"] = xeditfield;
                                if (dattype == 1) {
                                    kodata.$parent["linkedmedia"] = xr;
                                    kodata.$parent["linkedmedia"]["sourceeditfield"] = xeditfield;
                                    if (kodata.$parent["modelcore"]) {
                                        kodata.$parent["modelcore"]["linkedmedia"] = xr;
                                        kodata.$parent["modelcore"]["linkedmedia"]["sourceeditfield"] = xeditfield;
                                    }
                                }
                                if (xr["image"]) {
                                    try {
                                        var updateUniverse = function () {
                                            try {
                                                var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                                Enumerable.From(pnl["datUniverse"]).ForEach(function (dt) {
                                                    if (dt.datType == 1) {
                                                        dt.xcolxn[0]["modelcore"]["elementImage"](xr["image"]);
                                                    } else {
                                                        dt.xcolxn[0].mainImage(xr["image"]);
                                                    }

                                                    dt.datpictureurl(xr["image"]);
                                                    return true;
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        };
                                        if (dattype == 1) {
                                            if (kodata.$parent["modelcore"]) {
                                                kodata.$parent["modelcore"]["elementImage"](xr["image"]);
                                                updateUniverse();
                                            } else {
                                                updateUniverse();
                                            }
                                            
                                        } else {
                                            if (kodata.$parent["contentmodelcolxn"]) {
                                                kodata.$parent["contentmodelcolxn"]()[0]["mainImage"](xr["image"]);
                                            } else {
                                                kodata.$parent["pnl"]["contentmodelcolxn"]()[0]["mainImage"](xr["image"]);
                                            }
                                            updateUniverse();
                                        }
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    
                                }
                                if (xr["title"]) {
                                    if (kodata.$data["titleText"]) {
                                        kodata.$data["titleText"](xr["title"]);
                                        kodata.$parent["EDITOBJseeStoryUrl"]()["seeStoryUrl"]("Linked Story");
                                    }
                                    if (kodata.$data["seeStoryUrl"]) {
                                        kodata.$data["seeStoryUrl"]("Linked Story");
                                        
                                        if (kodata.$parent["EDITOBJtitleText"]) {
                                            var wtf1 = kodata.$parent["EDITOBJtitleText"]()["titleText"]();
                                            var wtf2 = kodata.$parent["EDITOBJtitleText"]()["vanillaValue"]();
                                            kodata.$parent["EDITOBJtitleText"]()["titleText"](xr["title"]);
                                            kodata.$parent["EDITOBJtitleText"]()["titleText"].valueHasMutated();
                                        } else if (kodata.$parent["pnl"]["EDITOBJtitleText"]) {
                                            var wtf3 = kodata.$parent["pnl"]["EDITOBJtitleText"]()["titleText"]();
                                            var wtf4 = kodata.$parent["pnl"]["EDITOBJtitleText"]()["vanillaValue"]();
                                            kodata.$parent["pnl"]["EDITOBJtitleText"]()["titleText"](xr["title"]);
                                            kodata.$parent["pnl"]["EDITOBJtitleText"]()["titleText"].valueHasMutated();
                                        }
                                        var yes = true;
                                    }
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        },

                        textAreaChangeHandler: function (kodata, $elem) {
                            $("#singleedittextarea").off('blur');
                            xdc.$data["showTextArea"](false);
                            var currenteditfield = kodata.$data["fieldName"];
                            var xeditfield = currenteditfield;
                            var editcontent = kodata.$data[currenteditfield]();
                            if ($elem) {
                                $elem.show();
                            }
                            return me.isUrl(editcontent).then(function (xr) {
                                if (xr) {
                                    me.linkencountered(xr, kodata, xeditfield, editcontent);
                                }
                                me.showDoneButtonIfOk(kodata);
                                pnlMgr.appPositionRefresh();
                                return xr;
                            });
                        },

                        scrollTo: function (target) {
                            var methodsDxnry = {
                                addnew: function (kodata) {
                                    var xtarget = $(".datfiveshowing").last();
                                    $("#scrollrootdatSingleEditor1").mCustomScrollbar('scrollTo', xtarget, { timeout: 100 });
                                },
                                remove: function (kodata) {
                                    if (kodata["islast"]) {
                                        //is last item in colxn...
                                        var xtarget = $(".datfiveshowing").last();
                                        $("#scrollrootdatSingleEditor1").mCustomScrollbar('scrollTo', xtarget, { timeout: 100 });
                                    } else {
                                        $("#scrollrootdatSingleEditor1").mCustomScrollbar('scrollTo', '-=10', { timeout: 100 });
                                    }
                                    
                                }
                            };
                            methodsDxnry[target.source](target.kodata);
                            
                        },

                        addNewDatFive: function (kodata, newitem) {
                            //this is called by the addNewItemHandler in datwebplayersvc...in defaultdat5object..
                            try {
                                var adddatacontext = function () {
                                    var editorTDxnry = {
                                        "dat5": "datFiveEdit1",
                                        dispose: false
                                    };
                                    Enumerable.From([newitem]).ForEach(function (r) {
                                        var edT = editorTDxnry[r.modelcore.presenterT];
                                        r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                        r.modelcore.presenterT = edT;
                                    });
                                };
                                adddatacontext();
                                me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.push(newitem);
                                me.pnlcontxt.$data.contentmodelcolxn.valueHasMutated();
                                me.imgEditor(".datFiveEdit1imghost", ".datFiveEdit1imagesopener");
                                var dispose = function () {
                                    $(".editsingleglyph").parent().off(self.xevent);
                                    $(".datfiveeditremove").off(self.xevent);
                                };
                                dispose();
                                me.showDatFiveRemovables();
                                //$(".editsingleglyph").removeClass("singleedithosthide").parent().on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    me.editsingleglyphHandler($(this));
                                //});
                                
                                //$(".datfiveeditremove").removeClass(" datfiveeditremovehide").on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var $elem = $(e.currentTarget);
                                //    var mynode = $elem[0];//.children()[1];
                                //    var kodata = ko.contextFor(mynode);
                                //    me.removeDatFive(kodata);
                                //});
                                me.showDoneButtonIfOk();
                                me.scrollTo({ source: 'addnew', kodata: kodata });
                                kodata["toTextAreasColxn"]();
                                Enumerable.From(kodata["textAreasColxn"]).ForEach(function (txtareaobject) {
                                    //{ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) }
                                    try {
                                        var methodname = txtareaobject.datafor["fieldName"];
                                        me.EDITOBJfieldNameMethods[methodname]($(txtareaobject.txtarea));
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        },
                        addNewDat115: function (kodata, newitem) {
                            //this is called by the addNewItemHandler in datwebplayersvc...in defaultdat5object..
                            try {
                                var adddatacontext = function () {
                                    var editorTDxnry = {
                                        "dat115": "dat115Edit1",
                                        dispose: false
                                    };
                                    Enumerable.From([newitem]).ForEach(function (r) {
                                        var edT = editorTDxnry[r.modelcore.presenterT];
                                        r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                        r.modelcore.presenterT = edT;
                                    });
                                };
                                adddatacontext();
                                me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.push(newitem);
                                me.pnlcontxt.$data.contentmodelcolxn.valueHasMutated();
                                me.imgEditor(".datFiveEdit1imghost", ".datFiveEdit1imagesopener");
                                var dispose = function () {
                                    $(".editsingleglyph").parent().off(self.xevent);
                                    $(".datfiveeditremove").off(self.xevent);
                                };
                                dispose();
                                me.showDatFiveRemovables();
                                //$(".editsingleglyph").removeClass("singleedithosthide").parent().on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    me.editsingleglyphHandler($(this));
                                //});
                                
                                //$(".datfiveeditremove").removeClass(" datfiveeditremovehide").on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var $elem = $(e.currentTarget);
                                //    var mynode = $elem[0];//.children()[1];
                                //    var kodata = ko.contextFor(mynode);
                                //    me.removeDatFive(kodata);
                                //});
                                me.showDoneButtonIfOk();
                                me.scrollTo({ source: 'addnew', kodata: kodata });
                                kodata["toTextAreasColxn"]();
                                Enumerable.From(kodata["textAreasColxn"]).ForEach(function (txtareaobject) {
                                    //{ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) }
                                    try {
                                        var methodname = txtareaobject.datafor["fieldName"];
                                        me.EDITOBJfieldNameMethods[methodname]($(txtareaobject.txtarea));
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }

                        },
                        addNewDat125: function (kodata, newitem) {
                            //this is called by the addNewItemHandler in datwebplayersvc...in defaultdat5object..
                            try {
                                var adddatacontext = function () {
                                    var editorTDxnry = {
                                        "dat125": "dat125Edit1",
                                        dispose: false
                                    };
                                    Enumerable.From([newitem]).ForEach(function (r) {
                                        var edT = editorTDxnry[r.modelcore.presenterT];
                                        r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                        r.modelcore.presenterT = edT;
                                    });
                                };
                                adddatacontext();
                                me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.push(newitem);
                                me.pnlcontxt.$data.contentmodelcolxn.valueHasMutated();
                                me.imgEditor(".datFiveEdit1imghost", ".datFiveEdit1imagesopener");
                                var dispose = function () {
                                    $(".editsingleglyph").parent().off(self.xevent);
                                    $(".datfiveeditremove").off(self.xevent);
                                };
                                dispose();
                                me.showDatFiveRemovables();
                                //$(".datfiveeditremove").removeClass(" datfiveeditremovehide").on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var $elem = $(e.currentTarget);
                                //    var mynode = $elem[0];//.children()[1];
                                //    var kodata = ko.contextFor(mynode);
                                //    me.removeDatFive(kodata);
                                //});
                                me.showDoneButtonIfOk();
                                me.scrollTo({ source: 'addnew', kodata: kodata });
                                kodata["toTextAreasColxn"]();
                                Enumerable.From(kodata["textAreasColxn"]).ForEach(function (txtareaobject) {
                                    //{ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) }
                                    try {
                                        var methodname = txtareaobject.datafor["fieldName"];
                                        me.EDITOBJfieldNameMethods[methodname]($(txtareaobject.txtarea));
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }

                        },

                        removeDatFive: function (kodata) {
                            $(".datfiveeditremove").off(self.xevent).addClass("datfiveeditremovehide");
                            var cmcolxn = me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn || [];
                            var ndxof = Enumerable.From(cmcolxn).IndexOf(kodata.$data);
                            var xxcolxn = Enumerable.From(me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn).Except([kodata.$data]).ToArray();
                            var islast = xxcolxn.length == ndxof + 1
                            kodata["islast"] = islast;
                            me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn = xxcolxn;
                            me.pnlcontxt.$data.contentmodelcolxn(xxcolxn);
                            me.pnlcontxt.$data.contentmodelcolxn.valueHasMutated();
                            me.showDoneButtonIfOk();

                            me.scrollTo({ source: 'remove', kodata: kodata });
                            if (me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.length > 2) {
                                me.showDatFiveRemovables();
                            }
                            var yes = true;
                        },
                        showDatFiveRemovables: function () {
                            $(".datfiveeditremove").off(self.xevent);
                            $(".datfiveeditremove").removeClass("datfiveeditremovehide").on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var $elem = $(e.currentTarget);
                                var mynode = $elem[0];//.children()[1];
                                var kodata = ko.contextFor(mynode);
                                me.removeDatFive(kodata);
                            });
                        },
                        

                        hidden$elem: false,
                        editsingleglyphHandler: function (e$this) {
                            me.resetDonePostControl();
                            try {
                                var $elem = e$this;//$(e.currentTarget);
                                me.hidden$elem = $elem;
                                var mynode = $elem.children()[1];
                                var kodata = ko.contextFor(mynode);
                                
                                $(".editsingleglyph").parent().removeClass("singleedithostfieldnameediting");
                                $elem.addClass("singleedithostfieldnameediting");
                                var currenteditfield = kodata.$data["fieldName"];
                                if (kodata.$parent["showTextArea"]) {
                                    kodata.$parent["showTextArea"](true);
                                } else if (kodata.$parent["pnl"]) {
                                    kodata.$parent["pnl"]["showTextArea"](true);
                                } else {
                                    kodata.$root["pnl"]["showTextArea"](true);
                                }

                                //xdc.$data["showTextArea"](true);
                                var editvmx = xdc.$data["editorVmx"];//editorVmxis the observable...
                                editvmx(kodata.$data);//set it ()...puts the current field stuff in the editor binding...
                                $("#singleedittextarea").attr('placeholder', kodata.$data["placeholdertext"]);
                                if (ko.unwrap(kodata.$data["vanillaValue"]) == kodata.$data["placeholdertext"]) {
                                    editvmx()["vanillaValue"]("");
                                    var yes = true;
                                } else {
                                    $("#singleedittextarea").val(kodata.$data[currenteditfield]());
                                };
                                
                                xdc.$data["showTextArea"](true);

                                if (!me.isEdit()) {
                                    xdc.$data["dattypeSelectorsvc"].hide({ inEdit: true });
                                }
                                $("#datsingleedithost").removeClass("singleedithosthide");
                                
                                $("#datsingleedithost").addClass("datnomarpad, text-center").show(0, function () {
                                    var fieldNameMethods = {
                                        "seeStoryUrl": function () {
                                            $("#singleedittextarea").attr('type', 'url');
                                        },
                                        "titleText": function () {
                                            if (prweb.isMobile.any()) {
                                                $("#datsingleeditformsubmit").remove();
                                                var yes = true;
                                            }
                                            $("#singleedittextarea").attr('type', 'text');
                                            $("#singleedittextarea").css('min-height', '3em');
                                            $("#singleedittextarea").on('change keyup keydown paste cut', function () {
                                                $(this).height(0).height(this.scrollHeight);
                                            }).change();
                                        },
                                        "datElementText": function () {
                                            if (prweb.isMobile.any()) {
                                                var yes = true;
                                            }
                                            $("#singleedittextarea").attr('type', 'text');
                                            $("#singleedittextarea").css('min-height', '2em');
                                        }
                                    };
                                    var positionEditTextArea = function () {
                                        try {
                                            var $elemparent = $elem.parent();
                                            var $holder = $elemparent;//.parent();
                                            //var holderposition = $holder.position();
                                            //var holderwidth = $holder.width();
                                            //var revisedwidth = holderwidth - holderposition.left;
                                            me.hidden$elem.hide();
                                            $holder.css({ position: 'relative' });
                                            Enumerable.From(["text-right", "text-center", "text-left"]).ForEach(function (c) {
                                                if ($holder.hasClass(c)) {
                                                    $("#singleedittextarea").addClass(c);
                                                } else {
                                                    $("#singleedittextarea").removeClass(c);
                                                }
                                            });
                                            fieldNameMethods[currenteditfield]();
                                            $("#datsingleedithost").prependTo($holder);
                                            $("#datsingleedithost").css({
                                                position: '',
                                                zIndex: '',
                                                left: '',
                                                top: '',
                                            }).prependTo($holder);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    };
                                    positionEditTextArea();
                                    $("#singleedittextarea").focus();
                                    
                                    setTimeout(function () {
                                        $("#singleedittextarea").focus();
                                        setTimeout(function () {
                                            $("#singleedittextarea").blur(function () {
                                                //$("#datsingleedithost").prependTo("#scrollrootdatSingleEditor1");
                                                me.hidden$elem.show();
                                                $("#singleedittextarea").off('blur');
                                                var currenteditfield = kodata.$data["fieldName"];
                                                var xeditfield = currenteditfield;
                                                var editcontent = kodata.$data[currenteditfield]();
                                                editcontent = $("#singleedittextarea").val();
                                                //editcontent = editcontent.replace(/\n\r?/g, '&#013;&#010;');
                                                editcontent = editcontent.replace(/\n\r?/g, '<br>');
                                                kodata.$data[currenteditfield](editcontent);
                                                return me.textAreaChangeHandler(kodata).then(function (isurl) {
                                                    $("#datsingleedithost").css({
                                                        position: 'absolute',
                                                        zIndex: 1000,
                                                        left: 0,
                                                        top: 0,
                                                    }).prependTo("#scrollrootdatSingleEditor1");
                                                });
                                            });
                                        }, 200);
                                        
                                    }, 200);
                                    
                                });
                                
                                var cool = true;
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        submitFormHandler: function () {
                            try {
                                me.hidden$elem.show();
                                $("#singleedittextarea").off('blur');
                                //$("#datsingleedithost").prependTo("#scrollrootdatSingleEditor1");
                                var mynode = $("#singleedittextarea")[0];//$elem;//.children()[1];
                                var kodata = ko.contextFor(mynode);
                                return me.textAreaChangeHandler(kodata).then(function (isurl) {
                                    $("#datsingleedithost").css({
                                        position: 'absolute',
                                        zIndex: 1000,
                                        left: 0,
                                        top: 0,
                                    }).prependTo.prependTo("#scrollrootdatSingleEditor1");
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        },

                        init: function () {
                            var editorTDxnry = {
                                "datRate1": "datRateEdit1",
                                "datSentiment1": "datSentimentEdit1",
                                "dat5": "datFiveEdit1",
                                dispose: false
                            };
                            //adds a bunch of handlers for editable elements...
                            try {
                                me.imgEditor(".datSingleEditQestion1imghost", ".datSingleEditQestion1imagesopener");
                                me.imgEditor(".datFiveEdit1imghost", ".datFiveEdit1imagesopener");
                                me.imgEditor(".datRateEdit1imghost", ".datRateEdit1imagesopener");
                                me.imgEditor(".datSentimentEdit1imghost", ".datSentimentEdit1imagesopener");
                                xdc.$data["submitHandler"] = function (e) {
                                    return me.submitFormHandler(e);
                                    ////e.preventDefault();
                                    ////e.cancelBubble = true;
                                    ////var $elem = $(this);
                                    //$("#datsingleedithost").prependTo("#scrollrootdatSingleEditor1");
                                    //var mynode = $("#singleedittextarea")[0];//$elem;//.children()[1];
                                    //var kodata = ko.contextFor(mynode);
                                    ////var xkodata = x;
                                    //return me.textAreaChangeHandler(kodata);
                                };
                                if (me.isEdit()) {

                                } else {
                                    xdc.$data["datacontext"]({ addNew: false, init: true });
                                }
                                var dispose = function () {
                                    $(".editsingleglyph").parent().off(self.xevent);
                                };
                                dispose();
                                //$(".editsingleglyph").removeClass("singleedithosthide").parent().on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    me.editsingleglyphHandler($(this));
                                //});
                                me.attachEditableTextAreaHandlers();
                                var dattype = me.pnlcontxt.$data["currentDatUniverseMember"].datType;
                                if (dattype == 1 || dattype == 11 || dattype == 12) {
                                    if (me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.length > 2) {
                                        me.showDatFiveRemovables();
                                    }
                                }
                            //#region PRIOR IMAGES Handlers
                                //var xd5kodata = false;
                                //$(".datFiveEdit1imghost").on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var c = ko.contextFor(this);
                                //    xd5kodata = ko.dataFor(this);
                                //    $(this).next().children().trigger("click");
                                //    //$(".datFiveEdit1imagesopener").trigger("click");
                                //    return false;
                                //});
                                //$(".datFiveEdit1imagesopener").on("change", function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var updateBoundImages = function (newfxr) {
                                //        try {
                                //            var url = newfxr.url();
                                //            var feed = pnlMgr.panel(prweb.datFeed1).contentmodelcolxn();
                                //            Enumerable.From(feed).Where(function (r) {
                                //                var pu = Parse.User.current();
                                //                var parseuserid = pu.id;
                                //                return r.dat.userId == parseuserid;
                                //            }).ForEach(function (ur) {
                                //                ur.ownerPhoto(url);
                                //                return true;
                                //            });
                                //            var cool = true;
                                //        }
                                //        catch (ex) {
                                //            var wtf = true;
                                //        }

                                //    };
                                //    var saveDatImageParse = function (ximg) {
                                //        try {
                                //            //var userrow = Parse.User.current();
                                //            //var userphoto = userrow.get('user_photo');
                                //            //var parseFile = new Parse.File('userprof', ximg);
                                //            //return parseFile.save().then(function (fxr) {
                                //            //    userrow.set('user_photo', fxr);
                                //            //    updateBoundImages(fxr);
                                //            //    return userrow.save().then(function (xr) {
                                //            //        var excellent = true;
                                //            //    }).fail(function (ex) {
                                //            //        var wtf = true;
                                //            //    });
                                //            //}).catch(function (ex) { var wtf = true; })

                                //            //var newdatimagerow = new Parse.Object('DatImages');
                                //            var cool = true;
                                //        }
                                //        catch (ex) {
                                //            var wtf = true;
                                //        }

                                //    };

                                //    try {
                                //        var ximage = this.files[0] || false;
                                //        if (ximage) {
                                //            var url = window.URL ? window.URL : window.webkitURL;
                                //            var newsrc = url.createObjectURL(ximage);
                                //            var xrslt = ko.dataFor(this) || xd5kodata;
                                //            xrslt.modelcore.elementImage(newsrc);

                                //            saveDatImageParse(ximage);
                                //            var cool = true;
                                //        }

                                //    }
                                //    catch (ex) {
                                //        var wtf = true;
                                //    }

                                //});
                                //$(".edituserprofileglyph").removeClass("edithosthide").parent().on(self.xevent, function (e) {
                                //    e.preventDefault();
                                //    e.cancelBubble = true;
                                //    var $elem = $(e.currentTarget);
                                //    var mynode = $elem.children()[1];
                                //    var kodata = ko.contextFor(mynode);
                                //    $("#datuserprofileedithost").addClass("datnomarpad, text-center").show(10, function () {
                                //        $("#datuserprofileedithost").removeClass("edithosthide");
                                //    }).animate({ left: ["+=1", "swing"] }).animate({ left: ["-=1", "swing"] });
                                //    $(".edituserprofileglyph").parent().removeClass("edithostfieldnameediting");
                                //    $elem.addClass("edithostfieldnameediting");
                                //    var currenteditfield = kodata.$data["fieldName"];
                                //    kodata.$parent["showTextArea"](true);
                                //    $("#userprofileedittextarea").val(kodata.$data[currenteditfield]());
                                //    xdc["contentmodelcolxn"]()[0]["showTextArea"](true);
                                //    var editvmx = xdc["contentmodelcolxn"]()[0]["editorVmx"];//is the observable...set it ()
                                //    editvmx(kodata.$data);//puts the current field stuff in the editor binding...
                                //    var cool = true;
                                //});
                                //#endregion PRIOR IMAGES Handlers
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return me;
                        },

                        hide: function () {
                            //$("#userprofileimghost").off(self.xevent);
                            //$("#userprofileimagesopener").off("change");
                            //$(".edituserprofileglyph").addClass("edithosthide").parent().off(self.xevent).removeClass("edithostfieldnameediting");
                            

                            //$("#datuserprofileedithost").addClass("edithosthide");
                            //xdc["contentmodelcolxn"]()[0]["showTextArea"](false);
                            //xdc["contentmodelcolxn"]()[0]["editorVmx"](false);
                            return me;
                        },

                        toOriginateParams: function (isOriginate, isEditPost) {
                            var rslt = false;
                            try {
                                var xrsltcurrentDat = me.pnlcontxt.$data["currentDatUniverseMember"];
                                var toInfoDxnry = function (source) {
                                    var toChangedFieldsDxnry = function () {
                                        //#region fieldDxnry
                                        var fieldDxnry = {
                                            "titleText": {},
                                            "seeStoryUrl": {}
                                        };
                                        //#endregion fieldDxnry
                                        var changedfieldsDxnry = {};
                                        try {
                                            var xrslt = source || me.pnlcontxt.$data;
                                            Enumerable.From(fieldDxnry).Where(function (xp) {
                                                return xrslt["EDITOBJ" + xp.Key] || false;
                                            }).ForEach(function (p) {
                                                var xeditobj = xrslt["EDITOBJ" + p.Key]();
                                                var x$textarea = false;
                                                var toIsChanged = function () {
                                                    var rslt = true;
                                                    try {
                                                        x$textarea = xeditobj["$textarea"] || false;
                                                        if (x$textarea) {
                                                            
                                                            var xrslt = !(xeditobj["fieldValue"] == $(x$textarea).val());
                                                        } else {
                                                            rslt = false;
                                                        }
                                                        //xeditobj["vanillaValue"]());

                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                        rslt = false;
                                                    }
                                                    return rslt;
                                                };
                                                if (toIsChanged()) {
                                                    changedfieldsDxnry[p.Key] = $(x$textarea).val();//xeditobj["vanillaValue"]();
                                                }
                                            });
                                            return changedfieldsDxnry;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                            return false;
                                        }
                                    };
                                    return toChangedFieldsDxnry();
                                };
                                var datInfo = toInfoDxnry();
                                var toCountablesColxn = function () {
                                    var rslt = {};
                                    try {
                                        var xcolxn = xrsltcurrentDat.xcolxn;
                                        switch (true) {
                                            case (xrsltcurrentDat["datType"] == 1): {
                                                rslt["xcolxn"] = xcolxn;
                                                rslt["countablesColxn"] = Enumerable
                                                .From(xcolxn).Where(function (row) {
                                                    var rslt = !ko.unwrap(row["isdatfiveeditaddnew"]);//!==true
                                                    return rslt;
                                                })
                                                .Select(function (r) {
                                                    var rrslt = {
                                                        titleText: false,
                                                        headerText: false,
                                                        seeStoryUrl: false,
                                                        datImageId: false,
                                                        dceelementId: false
                                                        //rrslt["datElementText"]
                                                    };
                                                    Enumerable.From(rrslt).ForEach(function (prop) {
                                                        rrslt[prop.Key] = ko.unwrap(r["modelcore"][prop.Key]);
                                                        return true;
                                                    });
                                                    rrslt["countablesIndex"] = r["countablesIndex"];
                                                    var countableInfo = toInfoDxnry(r);
                                                    Enumerable.From(countableInfo).ForEach(function (prop) {
                                                        rrslt[prop.Key] = countableInfo[prop.Key];
                                                        });
                                                    //var toDatImagesPointer = function () {
                                                    //    return Enumerable.From(me.datimgscolxn).Where(function (ir) {
                                                    //        var is = ir["countablesIndex"] == rrslt["countablesIndex"];
                                                    //        return is;
                                                    //    }).Select(function (xir) {
                                                    //        return xir;
                                                    //    }).FirstOrDefault();
                                                    //};
                                                    //rrslt["elementImage"] = toDatImagesPointer() || false;
                                                    return rrslt;
                                                }).ToArray();
                                                break;
                                            }
                                            case (xrsltcurrentDat["datType"] == 2): {
                                                rslt["rateCaptionColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["rateeditcaptioncolxn"]))
                                                    .Select(function (r, rndx) {
                                                        var rrslt = {};
                                                        rrslt["datElementText"] = ko.unwrap(r.EDITOBJdatElementText).vanillaValue();
                                                        rrslt["elementIndex"] = rndx;
                                                        return rrslt;
                                                    }).ToArray();
                                                rslt["countablesColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["countableColxn"]))
                                                    .Select(function (r, rndx) {
                                                        var rrslt = {};
                                                        rrslt["datElementText"] = rslt["rateCaptionColxn"][rndx];
                                                        rrslt["elementIndex"] = rndx;
                                                        return rrslt;
                                                    }).ToArray();
                                                break;
                                            }
                                            case (xrsltcurrentDat["datType"] == 3): {
                                                rslt["countablesColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["countableColxn"]))
                                                    .Select(function (r) {
                                                        var rrslt = {};
                                                        rrslt["datElementText"] = ko.unwrap(r["datElementText"]);
                                                        if (r["emojiObj"]) {
                                                            rrslt["universeKey"] = ko.unwrap(r["emojiObj"])["universeKey"] || false;
                                                        }
                                                        if (r["elementIndex"]) {
                                                            rrslt["elementIndex"] = r["elementIndex"] || false;
                                                        }
                                                        return rrslt;
                                                    }).ToArray();
                                                break;
                                            }
                                        }


                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return rslt;
                                };
                                var countables = toCountablesColxn();
                                var datImgsColxnIDs = [];
                                var toDatImgsColxn = function () {
                                    var rslt = [];
                                    try {
                                        Enumerable.From(me.datimgscolxn).ForEach(function (imgobj) {
                                            var xrslt = {};
                                            //Enumerable.From(imgobj).Where(function (prop) {
                                            //    return (prop.Key !== "kodata");
                                            //}).ForEach(function (xprop) {
                                            //    xrslt[xprop.Key] = xprop.Value;
                                            //});
                                            datImgsColxnIDs.push(imgobj.id);
                                            return rslt.push(imgobj.id);
                                        });
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return rslt;
                                };
                                var toShareOptions = function () {
                                    var rslt = {};
                                    try {
                                        var publicprivate = me.pnlcontxt.$data["PublicPrivatePost"] || false;
                                        var bdoShareOptions = ko.unwrap(me.pnlcontxt.$data["datBehaviorsObject"]) || false;
                                        if (bdoShareOptions) {
                                            rslt["allDatFriends"] = false;
                                            rslt["public"] = (publicprivate == "PUBLIC");
                                            rslt["showResultsBeforeVote"] = ko.unwrap(bdoShareOptions["showresultsbeforevote"]) || false;
                                            rslt["singleVote"] = ko.unwrap(bdoShareOptions["singlevote"]) || false;
                                            rslt["comments"] = ko.unwrap(bdoShareOptions["comments"]) || false;
                                            rslt["revisevote"] = ko.unwrap(bdoShareOptions["revisevote"]) || false;
                                            rslt["globalanon"] = ko.unwrap(bdoShareOptions["globalanon"]) || false;
                                            rslt["allrespondents"] = ko.unwrap(bdoShareOptions["allrespondents"]) || false;
                                            rslt["onlyme"] = ko.unwrap(bdoShareOptions["onlyme"]) || false;
                                            rslt["selecteddatters"] = ko.unwrap(bdoShareOptions["selecteddatters"]) || false;
                                            rslt["webappextension"] = JSON.stringify(bdoShareOptions);
                                        }
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return rslt;
                                };
                                var toJsonModel = function () {
                                    var rslt = {};
                                    try {
                                        xrsltcurrentDat = ko.unwrap(me.pnlcontxt.$data["currentDatUniverseMember"]);

                                        var xcolxn = xrsltcurrentDat.xcolxn;
                                        rslt["linkedMediaObject"] = ko.toJS(me.pnlcontxt.$data["linkedMediaObject"]);
                                        rslt["mainImageObject"] = ko.toJS(me.pnlcontxt.$data["mainImageObject"]);
                                        
                                        var methodDxnry = {
                                            mX1X: function () {
                                                rslt["countablesColxn"] = Enumerable
                                                .From(xcolxn).Where(function (row) {
                                                    var rslt = !ko.unwrap(row["isdatfiveeditaddnew"]);//!==true
                                                    return rslt;
                                                })
                                                .Select(function (r) {
                                                    var rrslt = {
                                                        titleText: false,
                                                        headerText: false,
                                                        seeStoryUrl: false,
                                                        datImageId: false,
                                                        dceelementId: false,
                                                        linkedMediaObject: false,
                                                        mainImageObject: false,
                                                        guid: false 
                                                        //rrslt["datElementText"]
                                                    };
                                                    Enumerable.From(rrslt).ForEach(function (prop) {
                                                        rrslt[prop.Key] = ko.unwrap(r["modelcore"][prop.Key]);
                                                        return true;
                                                    });
                                                    rrslt["countablesIndex"] = r["countablesIndex"];
                                                    if (isOriginate && !r["objectId"]) {
                                                        rrslt["guid"] = prweb.NewGuid();
                                                    } else {
                                                        rrslt["guid"] = r["guid"] || false;
                                                        rrslt["objectId"] = r["objectId"] || false;
                                                        rrslt["dceelementId"] = r["objectId"] || false;
                                                    }

                                                    //var countableInfo = toInfoDxnry(r);
                                                    //Enumerable.From(countableInfo).ForEach(function (prop) {
                                                    //    rrslt[prop.Key] = countableInfo[prop.Key];
                                                    //});
                                                    rrslt["textEditables"] = toInfoDxnry(r);
                                                    rrslt["linkedMediaObject"] = ko.toJS(ko.unwrap(r.linkedMediaObject)) || false;
                                                    rrslt["mainImageObject"] = ko.toJS(ko.unwrap(r.mainImageObject));
                                                    if (isOriginate) {
                                                        if (rrslt["mainImageObject"]) {
                                                            var difo = rrslt["mainImageObject"]["datImageObjectFromUrl"] || false;
                                                            if (!rrslt["mainImageObject"]["datImgId"]) {
                                                                if (difo) {
                                                                    rrslt["mainImageObject"]["datImgId"] = difo["datimgid"];
                                                                    rrslt["mainImageObject"]["url"] = difo["datimgurl"];
                                                                }
                                                            }
                                                            if (difo) {
                                                                difo["datimgpntr"] = false;
                                                            }
                                                        }
                                                    }
                                                    return rrslt;
                                                }).ToArray();
                                                rslt["textEditables"] = toInfoDxnry(me.pnlcontxt.$data);
                                            },
                                            mX2X: function () {
                                                rslt["rateCaptionColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["rateeditcaptioncolxn"]))
                                                    .Select(function (r, rndx) {
                                                        var rrslt = {};
                                                        var toValue = function (key) {
                                                            var rslt = false;
                                                            try {
                                                                var xeditobj = r["EDITOBJ" + key]();
                                                                var x$textarea = xeditobj["$textarea"] || false;
                                                                if (x$textarea) {
                                                                    rslt = $(x$textarea).val();
                                                                } else {
                                                                    rslt = xeditobj["fieldValue"];
                                                                };
                                                            }
                                                            catch (ex) {
                                                                var wtf = true;
                                                                rslt = false;
                                                            }
                                                            return rslt;
                                                        };
                                                        rrslt["datElementText"] = toValue("datElementText");
                                                        rrslt["elementIndex"] = rndx;
                                                        return rrslt;
                                                    }).ToArray();
                                                var methodDxnry = {
                                                    "3": function (cndx, rrslt) {
                                                        var dxnry = { "0": 0, "1": 1, "2": 2 };
                                                        if (cndx == 0 || cndx == 1 || cndx == 2) {
                                                            var ndx = dxnry[cndx];
                                                            rrslt["datElementText"] = rslt["rateCaptionColxn"][ndx]["datElementText"];
                                                        }
                                                        return rslt;
                                                    },
                                                    "5": function (cndx, rrslt) {
                                                        var dxnry = {"0": 0, "2":1, "4":2};
                                                        if (cndx == 0 || cndx == 2 || cndx == 4) {
                                                            var ndx = dxnry[cndx];
                                                            rrslt["datElementText"] = rslt["rateCaptionColxn"][ndx]["datElementText"];
                                                        }
                                                        return rslt; 
                                                    },
                                                    "10": function (cndx, rrslt) {
                                                        var dxnry = { "0": 0, "5": 1, "9": 2 };
                                                        if (cndx == 0 || cndx == 5 || cndx == 9) {
                                                            var ndx = dxnry[cndx];
                                                            rrslt["datElementText"] = rslt["rateCaptionColxn"][ndx]["datElementText"];
                                                        }
                                                        return rslt;
                                                    }
                                                };
                                                rslt["countablesColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["countableColxn"]))
                                                    .Select(function (r, rndx) {
                                                        var rrslt = {};
                                                        rrslt["elementIndex"] = rndx;
                                                        rrslt["dceelementId"] = r.objectId;
                                                        rrslt["objectId"] = r.objectId;
                                                        try {
                                                            methodDxnry[xcolxn[0]["countableColxn"].length](rndx, rrslt);
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        return rrslt;
                                                    }).ToArray();
                                                rslt["textEditables"] = toInfoDxnry(xcolxn[0]);
                                                rslt["linkedMediaObject"] = ko.toJS(ko.unwrap(xcolxn[0]["linkedMediaObject"]));
                                                rslt["mainImageObject"] = xcolxn[0]["mainImageObject"];
                                            },
                                            mX3X: function () {
                                                rslt["countablesColxn"] = Enumerable
                                                    .From(ko.unwrap(xcolxn[0]["countableColxn"]))
                                                    .Select(function (r) {
                                                        var rrslt = {};
                                                        try {
                                                            rrslt["datElementText"] = ko.unwrap(r["datElementText"]);
                                                            rrslt["dceelementId"] = r.objectId;
                                                            rrslt["objectId"] = r.objectId;
                                                            if (r["emojiObj"]) {
                                                                rrslt["universeKey"] = ko.unwrap(r["emojiObj"])["universeKey"] || false;
                                                                r["elementIndex"] = rrslt["universeKey"].split("datEmoji")[1];
                                                            }
                                                            if (r["elementIndex"]) {
                                                                rrslt["elementIndex"] = Number(r["elementIndex"]) - 1 || false;
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        return rrslt;
                                                    }).ToArray();
                                                rslt["textEditables"] = toInfoDxnry(xcolxn[0]);
                                                rslt["linkedMediaObject"] = ko.toJS(ko.unwrap(xcolxn[0]["linkedMediaObject"]));
                                                rslt["mainImageObject"] = xcolxn[0]["mainImageObject"];
                                            }
                                        };
                                        var mKey = function () {
                                            var rslt = "mX" + xrsltcurrentDat["datType"] + "X";
                                            if (xrsltcurrentDat["datType"] == 11 || xrsltcurrentDat["datType"] == 12) {
                                                rslt = "mX1X";
                                            }
                                            return rslt;
                                        }
                                        methodDxnry[mKey()]();
                                        rslt["clientAppID"] = "web" || false;
                                        rslt["platform"] = navigator.platform || [];
                                        rslt["datType"] = xrsltcurrentDat["datType"] || false;
                                        toDatImgsColxn();
                                        rslt["datImagesColxnIDs"] = datImgsColxnIDs;
                                        //rslt["datImagesColxn"] = toDatImgsColxn();
                                        rslt["shareOptions"] = toShareOptions();
                                        if (isOriginate || isEditPost) {
                                            if (rslt["linkedMediaObject"]) {
                                                var difolmo = rslt["linkedMediaObject"]["datImageFileObject"] || false;
                                                if (difolmo) {
                                                    difolmo["datimgpntr"] = false;
                                                }
                                            }
                                            if (rslt["mainImageObject"]) {
                                                var difomio = rslt["mainImageObject"]["datImageObjectFromUrl"] || false;
                                                if (isOriginate && !rslt["mainImageObject"]["datImgId"]) {
                                                    if (difomio) {
                                                        rslt["mainImageObject"]["datImgId"] = difomio["datimgid"];
                                                        rslt["mainImageObject"]["url"] = difomio["datimgurl"];
                                                    }
                                                } else {
                                                    if (difomio) {
                                                        rslt["mainImageObject"]["datImgId"] = difomio["datimgid"];
                                                        rslt["mainImageObject"]["url"] = difomio["datimgurl"];
                                                    }
                                                }
                                                if (difomio) {
                                                    difomio["datimgpntr"] = false;
                                                }
                                            }
                                        }
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        rslt = false;
                                    }
                                    return rslt;
                                };
                                var jsonModel = toJsonModel();
                                rslt = {
                                    "shareOptions": jsonModel["shareOptions"],
                                    "jsonModel": jsonModel || false,
                                    "linkedMediaObject": jsonModel["linkedMediaObject"],
                                    "mainImageObject": jsonModel["mainImageObject"],
                                    "clientAppID": jsonModel["clientAppID"],
                                    "platform": jsonModel["platform"],
                                    "datType": jsonModel["datType"],
                                    "datHeaderText": jsonModel["textEditables"]["titleText"] || false,
                                    "seeStoryUrl": jsonModel["linkedMediaObject"],
                                    "countablesColxn": jsonModel["countablesColxn"] || [],
                                    "rateCaptionColxn": jsonModel["rateCaptionColxn"] || [],
                                    //"datImagesColxn": me.datimgscolxn || [],
                                    "datImagesColxnIDs": jsonModel["datImagesColxnIDs"] || []
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt;
                        },
                        save: function () {
                            var changes = 1;//Enumerable.From(params.userInfoDict).Count() || 0;
                            if (changes > 0) {
                                try {
                                    
                                    var params = me.toOriginateParams(true) || false;
                                    return prweb.parseManager.originateDat(params).then(function (xr) {
                                        return xr;
                                    }).fail(function (ex) {
                                        return pnlMgr.panel(prweb.datFeed1)["feedFilterUpdate"]().then(function (xr) {
                                            return Parse.Promise.as(params);
                                        });
                                    });
                                    //return Parse.Promise.as(params);
                                    
                                }
                                catch (ex) {
                                    var wtf = true;
                                    return Parse.Promise.as(params);
                                }
                            } else {
                                return Parse.Promise.as(false);
                            }

                        },

                        persistedParamsObject: false,
                        toPersistedParams: function () {
                            me.persistedParamsObject = JSON.parse(JSON.stringify(me.toOriginateParams(false)));//creates a separate object...
                            //is called in datSingleEditor1.update.edit....represents the state of the dat before any editing...
                            //is used by me.toSaveEditParams to identify deltas in the state of the dat after editing...
                        },

                        toSaveEditParams: function () {
                            var rslt = {};
                            try {
                                rslt["deltas"] = [];
                                var drslt = {};
                                //rslt["deltas"].push(drslt);
                                rslt["persistedParms"] = me.persistedParamsObject || false;
                                if (rslt["persistedParms"]) {
                                    rslt["originateParms"] = me.toOriginateParams(false, true);
                                    var examineObjects = function () {
                                        //#region xobjects
                                        var xobjects = [
                                            {
                                                object: "shareOptions",
                                                props: ["allDatFriends", "public", "showResultsBeforeVote", "singleVote", "comments", "revisevote","allrespondents","onlyme","selecteddatters" ],
                                                objects: [],
                                                collections: []
                                            },
                                            {
                                                object: "linkedMediaObject",
                                                props: ["title", "image", "url"],
                                                objects: [{
                                                    object: "datImageFileObject",
                                                    props: ["datimgid", "datimgurl"],
                                                    objects: [],
                                                    collections: []
                                                }],
                                                collections: []
                                            },
                                            {
                                                object: "mainImageObject",
                                                props: ["datImgId", "url"],
                                                objects: [{
                                                    object: "datImageObjectFromUrl",
                                                    props: ["datimgid", "datimgurl"],
                                                    objects: [],
                                                    collections: []
                                                }],
                                                collections: []
                                            }
                                        ];
                                        //#endregion xobjects
                                        //#region xcollections
                                        var xcollections = [
                                            {
                                                object: "rateCaptionColxn",
                                                iscollection: true,
                                                props: ["objectId", "datElementText", "elementIndex", "dceelementId"],
                                                objects: [],
                                                collections: []
                                            },
                                            {
                                                object: "countablesColxn",
                                                iscollection: true,
                                                props: ["objectId", "datElementText", "headerText", "titleText", "elementIndex", "dceelementId", "guid", "universeKey"],
                                                objects: [{
                                                    object: "textEditables",
                                                    props: ["titleText", "datElementText", "seeStoryUrl"],
                                                    objects: []
                                                }, {
                                                    object: "mainImageObject",
                                                    props: ["datImgId", "url"],
                                                    objects: [{ object: "datImageObjectFromUrl", props: ["datimgid", "url"] }]
                                                }, {
                                                    object: "linkedMediaObject",
                                                    props: ["datImgId", "url"],
                                                    objects: [{ object: "datImageFileObject", props: ["datimgid", "url"] }]
                                                }],
                                                collections: []
                                            }
                                        ];
                                        //#endregion xcollections
                                        var datObject = {
                                            prior: rslt["persistedParms"],
                                            current: rslt["originateParms"],
                                            object: "datObject",
                                            props: ["datHeaderText"],
                                            objects: xobjects,
                                            collections: xcollections
                                        };
                                        var compareObjProps = function (objprop, props, xprior, xcurrent) {
                                            var xrslt = { count: 0, deltas: {}};
                                            try {
                                                var prior = xprior || rslt["persistedParms"][objprop] || rslt["persistedParms"]["jsonModel"][objprop];
                                                var current = xcurrent || rslt["originateParms"][objprop] || rslt["originateParms"]["jsonModel"][objprop];
                                                Enumerable.From(props).ForEach(function (p) {
                                                    try {
                                                        var isdif = prior[p] !== current[p];
                                                        if (isdif) {
                                                            xrslt.count += 1;
                                                            xrslt.deltas[p] = current[p];
                                                            //if (!xrslt) {
                                                            //    xrslt = {};
                                                            //}
                                                            //if (!xrslt[objprop]) {
                                                            //    xrslt[objprop] = {};
                                                            //    xrslt[objprop][p] = current[p];
                                                            //    //rslt["deltas"].push(drslt);
                                                            //} else {
                                                            //    xrslt[objprop][p] = current[p];
                                                            //}
                                                        }
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return xrslt;
                                        };
                                        var lastcontext = false;
                                        var toDelta = function (context, prior, current, objectid, ck) {
                                            try {
                                                var rslt = compareObjProps(context["object"], context["props"], prior, current);
                                                //xdrslt = rslt;
                                                var objectlabel = context["object"];
                                                if (rslt) {
                                                    //var objectlabel = context["object"];
                                                    //if (objectid || ck) {
                                                    //    if (objectid) {
                                                    //        rslt["objectid"] = objectid;
                                                    //        objectlabel += "ID" + objectid;
                                                    //    }
                                                    //    if (!drslt[ck]) {
                                                    //        drslt[ck] = [];
                                                    //    }
                                                    //    if (lastcontext.objectlabel != objectlabel) {
                                                    //        rslt.lastcontext = lastcontext;
                                                    //        lastcontext = context;
                                                    //        lastcontext.objectlabel = objectlabel;
                                                    //        rslt.context = context;
                                                    //        drslt[ck].push(rslt);
                                                    //    } else {
                                                    //        drslt[lastcontext.objectlabel][objectlabel] = rslt;
                                                    //    }
                                                    //} else {
                                                    //    if (lastcontext.objectlabel != objectlabel) {
                                                    //        lastcontext = context;
                                                    //        lastcontext.objectlabel = objectlabel;
                                                    //        rslt.context = context;
                                                    //        drslt[objectlabel] = rslt;
                                                    //    } else {
                                                    //        drslt[lastcontext.objectlabel][objectlabel] = rslt;
                                                    //    }
                                                    //}
                                                    
                                                } else {
                                                    //xdrslt = {};
                                                    var nopropsdifferent = true;
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        var compareColxn = function (xdrslt, ck, xolxn, xsource, ysource) {
                                            try {
                                                var xprior = xsource || rslt["persistedParms"];//, ..implied
                                                var xcurrent = ysource || rslt["originateParms"];//,..implied
                                                if (xprior && xcurrent) {
                                                    Enumerable.From(xprior[ck]).ForEach(function (priorrow, pndx) {
                                                        try {
                                                            var currentrow = Enumerable.From(xcurrent[ck])
                                                            .Where(function (row, cndx) {
                                                                var istrue = false;
                                                                if (priorrow.objectId) {
                                                                    istrue = priorrow.objectId == row.objectId;
                                                                } else {
                                                                    istrue = pndx == cndx;
                                                                }
                                                                return istrue;
                                                            })
                                                            .Select(function (crow) {
                                                                if (!priorrow.objectId) {
                                                                    priorrow.objectId = prweb.NewGuid();
                                                                    crow.objectId = priorrow.objectId;
                                                                }
                                                                return crow;
                                                            }).FirstOrDefault();
                                                            if (currentrow) {
                                                                var xcreateDeltas = function () {
                                                                    xdrslt[priorrow.objectId] = { props: { count: 0, deltas: {} }, objects: {} };
                                                                    xdrslt[priorrow.objectId]["props"] = toDelta(xolxn, priorrow, currentrow, priorrow.objectId, ck);
                                                                    Enumerable.From(xolxn.objects).ForEach(function (xobject) {
                                                                        try {
                                                                            var xprior = priorrow[xobject.object];
                                                                            var xcurrent = currentrow[xobject.object];
                                                                            xdrslt[priorrow.objectId]["objects"][xobject.object] = { props: { count: 0, deltas: {} }, objects: {} };
                                                                            if (xprior && xcurrent) {
                                                                                xdrslt[priorrow.objectId]["objects"][xobject.object]["props"] = toDelta(xobject, xprior, xcurrent, priorrow.objectId, ck);
                                                                                Enumerable.From(xobject.objects).ForEach(function (xxobject) {
                                                                                    try {
                                                                                        var xxprior = xprior[xxobject.object];
                                                                                        var xxcurrent = xcurrent[xxobject.object];
                                                                                        xdrslt[priorrow.objectId]["objects"][xobject.object]["objects"][xxobject.object] = { props: { count: 0, deltas: {} } };
                                                                                        if (xxprior && xxcurrent) {
                                                                                            xdrslt[priorrow.objectId]["objects"][xobject.object]["objects"][xxobject.object]["props"] = toDelta(xxobject, xxprior, xxcurrent, priorrow.objectId, ck);
                                                                                        } else {
                                                                                            if (xxcurrent) {
                                                                                                xdrslt[priorrow.objectId]["objects"][xobject.object]["objects"][xxobject.object]["props"] = { count: -1, deltas: xxcurrent };
                                                                                            }
                                                                                            //var xxdelta = xxprior || xxcurrent;
                                                                                        }
                                                                                    }
                                                                                    catch (ex) {
                                                                                        var wtf = true;
                                                                                    }
                                                                                });
                                                                            } else {
                                                                                if (xcurrent) {
                                                                                    xdrslt[priorrow.objectId]["objects"][xobject.object]["props"] = { count: 0, deltas: xcurrent };
                                                                                }
                                                                                //var xdelta = xprior || xcurrent;
                                                                            }
                                                                        }
                                                                        catch (ex) {
                                                                            var wtf = true;
                                                                        }
                                                                    });
                                                                    //Enumerable.From(xolxn.collections).ForEach(function (xcolxn) {
                                                                    //    compareColxn(xcolxn.Key, xcolxn.Value);
                                                                    //});
                                                                };
                                                                xcreateDeltas();
                                                            } else {
                                                                if (!rslt["deleted" + ck]) {
                                                                    rslt["deleted" + ck] = [];
                                                                }
                                                                rslt["deleted" + ck].push(priorrow.objectId);
                                                                
                                                            }
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                    });
                                                    var additionalRows = function () {
                                                        return Enumerable.From(xcurrent[ck]).Where(function (r) {
                                                            return !r.objectId;
                                                        }).Select(function (row) {
                                                            row.guid = prweb.NewGuid();
                                                            if (row["linkedMediaObject"]) {
                                                                var difo = row["linkedMediaObject"]["datImageFileObject"] || false;
                                                                if (difo) {
                                                                    difo["datimgpntr"] = false;
                                                                }
                                                            }
                                                            if (row["mainImageObject"]) {
                                                                var difo = row["mainImageObject"]["datImageObjectFromUrl"] || false;
                                                                if (!row["mainImageObject"]["datImgId"]) {
                                                                    if (difo) {
                                                                        row["mainImageObject"]["datImgId"] = difo["datimgid"];
                                                                        row["mainImageObject"]["url"] = difo["datimgurl"];
                                                                    }
                                                                }
                                                                if (difo) {
                                                                    difo["datimgpntr"] = false;
                                                                }
                                                            }
                                                            return row;
                                                        }).ToArray();
                                                    };
                                                    rslt["new"+ck] = additionalRows();
                                                    var xx = true;
                                                } else {
                                                    var xdelta = xprior || xcurrent;
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            
                                            
                                        };
                                        drslt["datObject"] = { props: {}, objects: {}, collections: {} };
                                        drslt["datObject"]["props"] = toDelta(datObject, datObject.prior, datObject.current);
                                        Enumerable.From(datObject.objects).ForEach(function (xobject) {
                                            try {
                                                var xprior = datObject.prior[xobject.object] || false;
                                                var xcurrent = datObject.current[xobject.object] || false;
                                                drslt["datObject"]["objects"][xobject.object] = { props: { count: 0, deltas: {} }, objects: {} };
                                                if (xprior && xcurrent) {
                                                    drslt["datObject"]["objects"][xobject.object]["props"] = toDelta(xobject, xprior, xcurrent);
                                                    Enumerable.From(xobject.objects).ForEach(function (xxobject) {
                                                        var xxprior = xprior[xxobject.object] || false;
                                                        var xxcurrent = xcurrent[xxobject.object] || false;
                                                        drslt["datObject"]["objects"][xobject.object]["objects"][xxobject.object] = { props: { count: 0, deltas: {} } };
                                                        if (xxprior && xxcurrent) {
                                                            drslt["datObject"]["objects"][xobject.object]["objects"][xxobject.object]["props"] = toDelta(xxobject, xxprior, xxcurrent);
                                                        } else {
                                                            if (xxcurrent) {
                                                                drslt["datObject"]["objects"][xobject.object]["objects"][xxobject.object] = { props: { count: -1, deltas: xxcurrent } };
                                                                //rslt["deltas"].push(drslt);
                                                            }
                                                        }
                                                    });
                                                } else {
                                                    if (xcurrent) {
                                                        drslt["datObject"]["objects"][xobject.object]["props"] = { count: -1, deltas: xcurrent };
                                                    }
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        });
                                        Enumerable.From(datObject.collections).ForEach(function (xcolxn) {
                                            drslt["datObject"]["collections"][xcolxn.object] = {};
                                            compareColxn(drslt["datObject"]["collections"][xcolxn.object], xcolxn.object, xcolxn);//xprior and xcurrent are implied
                                        });
                                    };
                                    examineObjects();
                                    var extractDeltas = function () {
                                        var rslt = {};
                                        try {
                                            var isPropsCountNonZero = function (xobject) {
                                                var rslt = false;
                                                if (xobject["props"]) {
                                                    if ((xobject["props"].count != 0)) {
                                                        rslt = xobject["props"]["deltas"];
                                                    }
                                                }
                                                return rslt;
                                            };
                                            var chaseObjects = function (xobject, key, cobj) {
                                                try {
                                                    var hasdelta = isPropsCountNonZero(xobject);
                                                    if (hasdelta) {
                                                        cobj = {};
                                                        cobj[key] = hasdelta;
                                                    }
                                                    if (xobject["objects"]) {
                                                        Enumerable.From(xobject["objects"]).ForEach(function (kvp) {
                                                            var isx = chaseObjects(kvp.Value, kvp.Key);
                                                            if (isx.hasdeltax || isx.cobjx) {
                                                                if (!cobj) {
                                                                    cobj = {};
                                                                }
                                                                if (!cobj[key]) {
                                                                    cobj[key] = {};
                                                                }
                                                                cobj[key][kvp.Key] = isx.cobjx[kvp.Key];
                                                            }
                                                        });
                                                    }
                                                    if (xobject["collections"]) {
                                                        Enumerable.From(xobject["collections"]).ForEach(function (xkvp) {
                                                            Enumerable.From(xkvp.Value).ForEach(function (kvp) {
                                                                var isx = chaseObjects(kvp.Value, kvp.Key);
                                                                if (isx.hasdeltax || isx.cobjx) {
                                                                    if (!cobj) {
                                                                        cobj = {};
                                                                    }
                                                                    if (!cobj[xkvp.Key]) {
                                                                        cobj[xkvp.Key] = [];
                                                                    }
                                                                    var xcobj = {};
                                                                    xcobj[kvp.Key] = isx.cobjx[kvp.Key];
                                                                    cobj[xkvp.Key].push(xcobj);
                                                                }
                                                            });
                                                        });
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return {hasdeltax: hasdelta, cobjx: cobj};
                                            };
                                            rslt = chaseObjects(drslt["datObject"], "datObject").cobjx;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    };
                                    //rslt["deltas"] = extractDeltas();
                                    var toParams = function () {
                                        var xrslt = {};
                                        try {
                                            xrslt["params"] = {};
                                            Enumerable.From(extractDeltas()).ForEach(function (kvp) {
                                                if (kvp.Key !== "datObject") {
                                                    xrslt["params"][kvp.Key] = kvp.Value;
                                                    rslt["deltas"].push(kvp);
                                                } else {
                                                    Enumerable.From(kvp.Value).ForEach(function (xkvp) {
                                                        xrslt["params"][xkvp.Key] = xkvp.Value;
                                                        rslt["deltas"].push(xkvp);
                                                    });
                                                }
                                            });
                                            if (rslt["newcountablesColxn"]) {
                                                if (rslt["newcountablesColxn"].length > 0) {
                                                    xrslt["params"]["newcountablesColxn"] = rslt["newcountablesColxn"];
                                                    rslt["deltas"].push(rslt["newcountablesColxn"]);
                                                }
                                            }
                                            if (rslt["deletedcountablesColxn"]) {
                                                if (rslt["deletedcountablesColxn"].length > 0) {
                                                    xrslt["params"]["deletedcountablesColxn"] = rslt["deletedcountablesColxn"];
                                                    rslt["deltas"].push(rslt["deletedcountablesColxn"]);
                                                }
                                            }
                                            if (rslt["deltas"].length > 0) {
                                                xrslt["params"]["datImagesColxnIDs"] = rslt["originateParms"]["datImagesColxnIDs"];
                                                rslt["originateParms"]["jsonModel"]["editedAt"] = prweb.dateTime();
                                                xrslt["params"]["jsonModel"] = JSON.stringify(rslt["originateParms"]["jsonModel"]);
                                                xrslt["params"]["datType"] = rslt["originateParms"]["datType"];
                                                xrslt["params"]["clientAppID"] = rslt["originateParms"]["clientAppID"];
                                                xrslt["params"]["datObjectId"] = me.pnlcontxt.$data.datacontext().editDatDc.datcomplete.objectId;
                                            } else {
                                                xrslt = false;
                                            }
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                            xrslt = false;
                                        }
                                        return xrslt;
                                    };
                                    rslt["params"] = toParams();
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return rslt["params"] || false;
                        },
                        saveEdit: function () {
                            var params = me.toSaveEditParams().params || false;
                            //var changes = params["deltas"].length;//Enumerable.From(params.userInfoDict).Count() || 0;
                            if (params) {
                                try {
                                    me.datPostSpinner.activate();
                                    //updateTarget = datEdit  ...datStatusService.utils.applyDatEdits

                                    return prweb.parseManager.editDat(params).then(function (xr) {
                                        return xr;
                                    }).fail(function (ex) {
                                        alert("our apologies...there was an error posting your changes...returning to feed.");
                                        return pnlMgr.panel(prweb.datFeed1)["feedFilterUpdate"]().then(function (xr) {
                                            return Parse.Promise.as(params);
                                        });
                                    });
                                    return Parse.Promise.as(params);
                                }
                                catch (ex) {
                                    var wtf = true;
                                    return Parse.Promise.as(params);
                                }
                            } else {
                                return Parse.Promise.as(false);
                            }
                        },
                        editPostDat: function () {
                            return me.saveEdit().then(function (xr) {
                                return xr;
                            });
                        },
                        editPostDatHandler: function () {
                            try {
                                var navigateToDatFeed = function () {
                                    try {
                                        var cbackto = navMgr.me(prweb.datControlsSingleEditor1).returnfromlast();//clears the lastsource...always go back to datFeed1
                                        cntrlMgr.showControl(prweb.datControls2);
                                        pnlMgr.hide(300);
                                        navMgr.me(prweb.datSingleEditor1).returnfromlast();//clears the lastsource...always go back to SingleDat1
                                        pnlMgr.show(200, prweb.datFeed1);
                                        //pnlMgr.panel(prweb.datSingleEditor1).datacontext(false);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return false;
                                };
                                navigateToDatFeed();
                                //me.datPostSpinner.activate();
                                return me.editPostDat().then(function (xr) {
                                    return pnlMgr.panel(prweb.datFeed1)["feedFilterUpdate"]().then(function (xr) {
                                        setTimeout(function () {
                                            me.datPostSpinner.stop();
                                        }, 100);
                                        return xr;
                                    });

                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },

                        //#region addEditorVmx for datSingleEditor
                        addEditorVmx: function (xrslt, xsource, xcolxn) {
                            //#region fieldDxnry
                            var defaultfieldDxnry = {
                                "seeStoryUrl": {
                                    captiontext: "",
                                    placeholdertext: "paste a link",
                                    isInput: true,
                                    isTextarea: false,
                                    "default": ""
                                },
                                "titleText": {
                                    captiontext: "",
                                    placeholdertext: "Ask a question?...",
                                    isInput: false,
                                    isTextarea: true,
                                    "default": ""
                                },
                                "captionText": {
                                    captiontext: "",
                                    placeholdertext: "caption...",
                                    isInput: false,
                                    isTextarea: true,
                                    "default": ""
                                }
                            };
                            //#endregion fieldDxnry
                            var toFieldDxnry = function () {
                                var rslt = defaultfieldDxnry;
                                try {
                                    if (xrslt["currentDatUniverseMember"]) {
                                        if (xrslt["currentDatUniverseMember"]["headerQuestionTextEditables"]) {
                                            rslt = xrslt["currentDatUniverseMember"]["headerQuestionTextEditables"];
                                        }
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                return rslt;
                            };
                            try {
                                var fieldDxnry = toFieldDxnry();
                                Enumerable.From(fieldDxnry).Where(function (xp) {
                                    return xsource[xp.Key] || xp.Value;
                                }).ForEach(function (p) {
                                    var xdeflt = fieldDxnry[p.Key]["default"];//|| fieldDxnry[p.Key]["placeholdertext"];
                                    var valordflt = ko.unwrap(xsource[p.Key]) || xdeflt;
                                    xrslt[p.Key] = ko.observable(valordflt);
                                    var xeditobj = {};
                                    if (xrslt["EDITOBJ" + p.Key]) {
                                        xeditobj = ko.unwrap(xrslt["EDITOBJ" + p.Key]);
                                        if (me.isEdit()) {
                                            valordflt = ko.unwrap(xsource[p.Key]) || ko.unwrap(xeditobj[p.Key]) || xdeflt;
                                        } else {
                                            //valordflt = ko.unwrap(xsource[p.Key]) || ko.unwrap(xeditobj[p.Key]) || xdeflt;
                                        }
                                        xeditobj[p.Key](valordflt);
                                        xeditobj["vanillaValue"](valordflt);
                                        Enumerable.From(["isInput", "isTextarea", "placeholdertext"]).ForEach(function (prop) {
                                            xeditobj[prop](fieldDxnry[p.Key][prop]);
                                        });
                                        //xeditobj["placeholdertext"](fieldDxnry[p.Key]["placeholdertext"]);//fieldDxnry[p.Key][prop]
                                    } else {
                                        xeditobj = {
                                            fieldName: p.Key,
                                            fieldValue: valordflt,
                                        };
                                        xeditobj[p.Key] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p.Key];
                                        //xeditobj["placeholdertext"] = ko.observable(fieldDxnry[p.Key]["placeholdertext"]);
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p.Key]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                            
                                        });
                                        Enumerable.From(["isInput", "isTextarea", "placeholdertext"]).ForEach(function (prop) {
                                            xeditobj[prop] = ko.observable(fieldDxnry[p.Key][prop]);
                                        });
                                        xrslt["EDITOBJ" + p.Key] = ko.observable(xeditobj);
                                    }
                                });
                                if (xcolxn) {
                                    if (xcolxn.length > 0) {
                                        xcolxn[0]["pnl"] = xrslt;//this provides editobj to rate/sentiment/datfive bindings...
                                    }
                                }
                                

                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        //#endregion addEditorVmx
                        addNewDataContext: function (bindingContext) {
                            var rslt = {
                                newDatComplete: false,//needs to look like datcomplete...
                                newxcolxn: false
                            };
                            var toRslt = function () {
                                try {

                                    //bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                                    rslt["newxcolxn"] = bindingContext.$data["currentDatUniverseMember"].xcolxn;
                                    var editorTDxnry = {
                                        "datRate1": "datRateEdit1",
                                        "datSentiment1": "datSentimentEdit1",
                                        "dat5": "datFiveEdit1",
                                        "dat115": "dat115Edit1",
                                        "dat125": "dat125Edit1",
                                        dispose: false
                                    };
                                    Enumerable.From(rslt["newxcolxn"]).ForEach(function (r) {
                                        var edT = editorTDxnry[r.modelcore.presenterT];
                                        r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                        r.modelcore.presenterT = edT;
                                    });
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                            toRslt();
                            return rslt;
                        },
                        addEditDataContext: function (bindingContext) {
                            var rslt = {
                                newDatComplete: false,//needs to look like datcomplete...
                                newxcolxn: false
                            };
                            var toEditorT = function () {
                                var editorTDxnry = {
                                    "datRate1": "datRateEdit1",
                                    "datSentiment1": "datSentimentEdit1",
                                    "dat5": "datFiveEdit1",
                                    "dat115": "dat115Edit1",
                                    "dat125": "dat125Edit1",
                                    dispose: false
                                };
                                Enumerable.From(rslt["newxcolxn"]).ForEach(function (r) {
                                    var edT = editorTDxnry[r.modelcore.presenterT] || false;
                                    if (edT) {
                                        r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                        r.modelcore.presenterT = edT;
                                    }
                                });
                            };
                            var toRslt = function () {
                                try {
                                    var editDatDc = ko.unwrap(bindingContext.$data["datacontext"])["editDatDc"] || false;
                                    if (editDatDc) {
                                        var toNewXcolxn = function () {
                                            var xcolxn = [];
                                            try {
                                                var pnl = bindingContext.$data;
                                                var makeEditableDatUniverse = function () {
                                                    var rslt = {};
                                                    try {
                                                        var toIsEditObject = function () {
                                                            var rslt = {};
                                                            try {
                                                                var singlepnl = pnl.datacontext()["editDatDc"];
                                                                var singlepnldc = ko.unwrap(singlepnl["datacontext"]);
                                                                rslt["datJsonModel"] = singlepnldc["datJsonModel"];
                                                                
                                                                var datcountableitemVmx = ko.unwrap(singlepnldc["datcountableitemVmx"]);
                                                                rslt["datcountableitemVmx"] = datcountableitemVmx;
                                                                rslt["mainImage"] = datcountableitemVmx["mainImage"];
                                                                if (datcountableitemVmx["countableColxn"]) {
                                                                    rslt["countableColxn"] = datcountableitemVmx["countableColxn"];
                                                                } else {
                                                                    rslt["countableColxn"] = singlepnldc["datJsonModel"]["countablesColxn"]
                                                                }
                                                                rslt["contentmodelcolxn"] = ko.unwrap(singlepnl.contentmodelcolxn);
                                                                rslt["singlepnldc"] = singlepnldc;
                                                                rslt["datType"] = editDatDc.datcomplete["datType"];
                                                            }
                                                            catch (ex) {
                                                                rslt = false;
                                                                var wtf = true;
                                                            }
                                                            return rslt;
                                                        };
                                                        
                                                        var isEditObject = toIsEditObject();
                                                        pnl["datUniverse"] = pnl["dattypeSelectorsvc"].datTypeUniverse(isEditObject);
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    return rslt;
                                                };
                                                makeEditableDatUniverse();
                                                var editableDat = Enumerable.From(pnl.datUniverse)
                                                    //.Where(function (d) { 
                                                    //    var istype = editDatDc.datcomplete["datType"] == d.datType;
                                                    //    var iscolxncount = editDatDc.datcomplete["countables"].length == d.countablesCount;
                                                    //    return istype && iscolxncount;
                                                    //})
                                                    .Select(function (xd) {
                                                        return xd;
                                                    }).FirstOrDefault();
                                                pnl["currentDatUniverseMember"] = editableDat;
                                                xcolxn = pnl["currentDatUniverseMember"].xcolxn;//editableDat.xcolxn || [];
                                                var yes = true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return xcolxn;
                                        };
                                        rslt["newxcolxn"] = toNewXcolxn();//bindingContext.$data["currentDatUniverseMember"].xcolxn;
                                        toEditorT();
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                            toRslt();
                            return rslt;
                        },
                        
                        applyEDITOBJVmx: function (bindingContext) {
                            var pnl = bindingContext.$data.pnl;
                            //#region fieldDxnry
                            var fieldDxnry = {
                                "seeStoryUrl": {
                                    captiontext: "LINK ...See Story",
                                    placeholdertext: "paste a link...",
                                    "default": ""
                                },
                                "titleText": {
                                    captiontext: "",
                                    placeholdertext: "a caption...",
                                    "default": ""
                                },
                                "datElementText": {
                                    captiontext: "",
                                    placeholdertext: "datElementText...",
                                    "default": ""
                                }
                            };
                            //#endregion fieldDxnry
                            if (pnl["currentDatUniverseMember"]["textEditables"]) {
                                fieldDxnry = pnl["currentDatUniverseMember"]["textEditables"];
                            };
                            var toEditObj = function (p) {
                                try {
                                    var xrslt = bindingContext.$data;
                                    var xsource = pnl;//bindingContext.$data;
                                    var xdeflt = fieldDxnry[p]["default"]; //|| fieldDxnry[p]["placeholdertext"];
                                    var valordflt = ko.unwrap(xsource[p]) || xdeflt;
                                    xrslt[p] = ko.observable(valordflt);
                                    var xeditobj = {};
                                    if (xrslt["EDITOBJ" + p.Key]) {
                                        xeditobj = ko.unwrap(xrslt["EDITOBJ" + p.Key]);
                                        if (me.isEdit()) {
                                            valordflt = ko.unwrap(xsource[p.Key]) || ko.unwrap(xeditobj[p.Key]) || xdeflt;
                                        } else {
                                            //valordflt = ko.unwrap(xsource[p.Key]) || ko.unwrap(xeditobj[p.Key]) || xdeflt;
                                        }
                                        xeditobj[p.Key](valordflt);
                                        xeditobj["vanillaValue"](valordflt);
                                        Enumerable.From(["isInput", "isTextarea", "placeholdertext"]).ForEach(function (prop) {
                                            xeditobj[prop](fieldDxnry[p.Key][prop]);
                                        });
                                    } else {
                                        xeditobj = {
                                            fieldName: p,
                                            fieldValue: ko.unwrap(xsource[p])
                                        };
                                        xeditobj[p] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p];
                                        xeditobj["placeholdertext"] = ko.observable(fieldDxnry[p]["placeholdertext"]);
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                        });
                                        xrslt["EDITOBJ" + p] = ko.observable(xeditobj);
                                        var yes = true;
                                    }
                                    
                                }
                                catch (ex) {
                                    var wtf = true;
                                }

                            };
                            Enumerable.From(fieldDxnry).ForEach(function (prop) {
                                return toEditObj(prop.Key);
                            });

                        },
                        //#region EDITOBJfieldNameMethods
                        EDITOBJfieldNameMethods: {
                            "seeStoryUrl": function ($this) {
                                $this.attr('type', 'url');
                            },
                            "titleText": function ($this) {
                                //if (prweb.isMobile.any()) {
                                //    $("#datsingleeditformsubmit").remove();
                                //    var yes = true;
                                //}
                                $this.attr('type', 'text');
                                //$this.css('min-height', '3em');//.css('border', '0');//css('border', '1px solid #ccc');
                                $this.on('change keyup keydown paste cut', function (e) {
                                    //var kodata = ko.contextFor(this);
                                    //$(this).val(kodata.$data.vanillaValue());
                                    var txtval = $(this).val();
                                    $(this).height(0).height(this.scrollHeight);
                                }).change();

                                $this.on('blur', function (e) {
                                    pnlMgr.appPositionRefresh();
                                });

                            },
                            "datElementText": function ($this) {
                                if (prweb.isMobile.any()) {
                                    var yes = true;
                                }
                                $this.attr('type', 'text');
                                $this.on('change keyup keydown paste cut', function () {
                                    var txtval = $(this).val();
                                    $(this).height(0).height(this.scrollHeight);
                                }).change();

                                $this.on('blur', function (e) {
                                    pnlMgr.appPositionRefresh();
                                });
                            }
                        },
                        //#endregion EDITOBJfieldNameMethods
                        attachEditableTextAreaHandlers: function () {
                            
                            Enumerable.From($('.singleedittextareaeditable')).ForEach(function (txtarea) {
                                var kodata = ko.contextFor(txtarea);
                                var currenteditfield = kodata.$data["fieldName"];
                                kodata.$data["$textarea"] = txtarea;
                                var xxval =ko.unwrap(kodata.$data["vanillaValue"]) || "";
                                $(txtarea).val(xxval);
                                var xval = $(txtarea).val() || false;
                                var yes = true;
                            });
                            $('.singleedittextareaeditable').one('focus', function (e) {
                                var kodata = ko.contextFor(this);
                                var currenteditfield = kodata.$data["fieldName"];
                                me.EDITOBJfieldNameMethods[currenteditfield]($(this));
                            });
                        },

                        onImageSelected: function (imgxr) {
                            try {
                                if (imgxr.dispose) {
                                    imgxr.dispose();
                                    imgxr.dispose = null;
                                }
                                var updateUniverse = function (xsrc) {
                                    try {
                                        var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                        Enumerable.From(pnl["datUniverse"]).ForEach(function (dt) {
                                            try {
                                                if (imgxr.imghost !== ".datFiveEdit1imghost") {
                                                    if (dt.datType == 1 || dt.datType == 12) {
                                                        pnl["mainImage"](xsrc);
                                                        pnl["isimagepopulated"](true);

                                                    } else if (dt.datType == 11) {
                                                        dt.xcolxn[0]["modelcore"]["elementImage"](xsrc);
                                                        dt.xcolxn[0]["isimagepopulated"](true);
                                                    } else {
                                                        dt.xcolxn[0].mainImage(xsrc);
                                                        dt.xcolxn[0]["isimagepopulated"](true);
                                                    }
                                                } else {
                                                    //if multiple rows, create them in the dat compare/choice dat???
                                                    var notsureyet = true;
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return true;
                                        });
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                var elementDxnry = {
                                    "someimagerelated": function () {
                                        try {
                                            if (ko.unwrap(imgxr.kodata["islinkedmediapopulated"])) {
                                                var showotherstuff = true;
                                            }
                                            var xr = imgxr;
                                            var imghost = imgxr.imghost;
                                            var wtfkodata = imgxr.kodata;
                                            if (imghost == ".datSingleEditQestion1imghost") {
                                                //var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                                //wtfkodata["mainImage"](newsrc);
                                                wtfkodata["mainImageObject"]["url"] = xr.url;
                                                wtfkodata["mainImageObject"]["datImgId"] = xr["datImgId"];
                                                wtfkodata["mainImageObject"]["datImageObjectFromUrl"] = false;
                                                updateUniverse(imgxr.newsrc);
                                            } else if (imghost == ".datSingleEditQestionUrl1imghost") {
                                                var xx = 2;
                                            } else if (imghost == ".datFiveEdit1imghost") {
                                                wtfkodata.modelcore.elementImage(xr.url);
                                                wtfkodata["mainImageObject"]["url"] = xr.url;
                                                wtfkodata["mainImageObject"]["datImgId"] = xr["datImgId"];
                                                wtfkodata["mainImageObject"]["datImageObjectFromUrl"] = false;
                                                wtfkodata.modelcore["datImageId"] = xr["datImgId"];
                                                if (wtfkodata["countablesIndex"] == "0") {
                                                    updateUniverse(imgxr.newsrc);
                                                }
                                            } else {
                                                //wtfkodata.mainImage(newsrc);
                                                wtfkodata["mainImageObject"]["url"] = xr.url;
                                                wtfkodata["mainImageObject"]["datImgId"] = xr["datImgId"];
                                                wtfkodata["mainImageObject"]["datImageObjectFromUrl"] = false;
                                                wtfkodata["datImageId"] = xr["datImgId"];
                                                updateUniverse(imgxr.newsrc);
                                            }

                                            var yes = true;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    },
                                };
                                elementDxnry["someimagerelated"]();
                                if (me.isEdit()) {
                                    $("#datcontrolssingleeditoreditbtn").removeClass("dathide");
                                } else {
                                    $("#datcontrolssingleeditoreditbtn").removeClass("dathide");
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return true;
                        },
                        imgEditor: function (ximghost, ximagesopener) {
                            var xkodata = false;
                            var imghost = ximghost || ".datFiveEdit1imghost";
                            var imagesopener = ximagesopener || ".datFiveEdit1imagesopener";
                            var dispose = function () {
                                try {
                                    $(imghost).off(self.xevent);
                                    $(imagesopener).off("change");
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                            var imgSizingSvc = datImageSizingSvc(me);
                            var imgChangeHandler = function (xthis) {
                                try {
                                    var wtfkodata = ko.dataFor(xthis);
                                    //#region util functions
                                    var updateBoundImages = function (newfxr) {
                                        try {
                                            var url = newfxr.url();
                                            var cool = true;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }

                                    };
                                    var saveDatImageParse = function (ximg) {
                                        try {
                                            var parseFile = new Parse.File('file', ximg);
                                            return parseFile.save().then(function (fxr) {
                                                var newdatimagerow = new Parse.Object('DatImages');
                                                newdatimagerow.set('imageFile', fxr);
                                                updateBoundImages(fxr);
                                                return newdatimagerow.save().then(function (xr) {
                                                    var url = fxr.url();
                                                    var datimgid = xr.id;
                                                    me.datimgscolxn.push({
                                                        datimagespntr: xr,
                                                        url: url,
                                                        id: datimgid,
                                                        countablesIndex: wtfkodata["countablesIndex"] || false,
                                                        kodata: wtfkodata
                                                    });
                                                    var excellent = true;
                                                    return {
                                                        url: url || false,
                                                        datimgid: datimgid || false,
                                                        kodata: wtfkodata || false
                                                    };
                                                }).fail(function (ex) {
                                                    var wtf = true;
                                                    return Parse.Promise.as(false);
                                                });
                                            }).fail(function (ex) {
                                                var wtf = true;
                                                return Parse.Promise.as(false);
                                            });
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                            return Parse.Promise.as(false);
                                        }

                                    };
                                    
                                    var createMultipleRows = function (imgscolxn) {
                                        try {
                                            var pFindexDxnry = {};
                                            var parseFileColxn = [];
                                            var sizeDxnry = {};
                                            var datImageRowColxn = [];
                                            var saveMultipleDatImagesParse = function (xnewcmcolxn) {
                                                var start = true;
                                                try {
                                                    return Parse.Object.saveAll(parseFileColxn).then(function (fxrs) {
                                                        Enumerable.From(fxrs).ForEach(function (fxr, fndx) {
                                                            var newdatimagerow = new Parse.Object('DatImages');
                                                            newdatimagerow.set('imageFile', fxr);
                                                            var fname = "f" + fndx.toString();
                                                            newdatimagerow.set('imageWidth', sizeDxnry[fname].imageWidth);
                                                            newdatimagerow.set('imageHeight', sizeDxnry[fname].imageHeight);
                                                            datImageRowColxn.push(newdatimagerow);
                                                        });
                                                        return Parse.Object.saveAll(datImageRowColxn).then(function (xrs) {
                                                            start = true;
                                                            Enumerable.From(xrs).ForEach(function (xr, dindx) {
                                                                try {
                                                                    var fobj = xr.get('imageFile');
                                                                    var url = fobj.url();
                                                                    var datimgid = xr.id;
                                                                    var fname = "f" + dindx.toString();
                                                                    var checkit = pFindexDxnry[fname];//testing...
                                                                    var cndx = ndxof + dindx;
                                                                    me.datimgscolxn.push({
                                                                        datimagespntr: xr,
                                                                        url: url,
                                                                        id: datimgid,
                                                                        countablesIndex: cndx,//don't know...
                                                                        kodata: xnewcmcolxn[cndx]
                                                                    });
                                                                    xnewcmcolxn[cndx]["mainImageObject"]["datImgId"] = datimgid;
                                                                    xnewcmcolxn[cndx]["mainImageObject"]["url"] = url;
                                                                    xnewcmcolxn[cndx].modelcore["datImageId"] = datimgid;
                                                                    var isitworking = checkit == cndx;
                                                                    var yes = isitworking;
                                                                }
                                                                catch (ex) {
                                                                    var wtf = true;
                                                                }
                                                            });
                                                            return me.datimgscolxn;
                                                        }).fail(function (ex) {
                                                            var wtf = true;
                                                            return Parse.Promise.as(false);
                                                        });
                                                    }).fail(function (ex) {
                                                        var wtf = true;
                                                        return Parse.Promise.as(false);
                                                    });
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                            };
                                            var cmcolxn = me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn || [];
                                            var ndxof = Enumerable.From(cmcolxn).IndexOf(xkodata);

                                            var createNewRow = function (newsrc, fname) {
                                                var rslt = {};
                                                try {
                                                    var datfiveitem = xkodata["addNewItem"](false, xkodata.pnl, true);//true...isautoadded...
                                                    if (newsrc) {
                                                        //datfiveitem.modelcore.elementImage(newsrc);
                                                        datfiveitem.modelcore["newsrc"] = newsrc;
                                                        datfiveitem.modelcore["fname"] = fname;
                                                        datfiveitem["isdatfiveeditaddnew"](false);
                                                        //datfiveitem["isimagepopulated"](true);
                                                    } else {
                                                        datfiveitem["isdatfiveeditaddnew"](true);
                                                    }

                                                    var adddatacontext = function () {
                                                        var editorTDxnry = {
                                                            "dat5": "datFiveEdit1",
                                                            "dat115": "dat115Edit1",
                                                            "dat125": "dat125Edit1",
                                                            dispose: false
                                                        };
                                                        Enumerable.From([datfiveitem]).ForEach(function (r) {
                                                            var edT = editorTDxnry[r.modelcore.presenterT];
                                                            r.modelcore.html(prweb.pCElemHtmlDxnry[edT].resourceModel)
                                                            r.modelcore.presenterT = edT;
                                                        });
                                                    };
                                                    adddatacontext();
                                                    rslt = datfiveitem;
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }

                                                //me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn.push(datfiveitem);
                                                return rslt;
                                            };
                                            var imgdatfiverows = Enumerable.From(imgscolxn).Select(function (img, ndx) {
                                                var rslt = {}
                                                try {
                                                    var url = window.URL ? window.URL : window.webkitURL;
                                                    var newsrc = url.createObjectURL(img);
                                                    var fname = "f" + ndx.toString();
                                                    pFindexDxnry[fname] = ndxof + ndx;
                                                    //parseFileColxn.push(new Parse.File(fname, img));
                                                    rslt = createNewRow(newsrc, fname);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt;
                                            }).ToArray();
                                            var cmcolxnndxs = Enumerable.RangeTo(ndxof, imgscolxn.length + ndxof).ToArray();
                                            Enumerable.From(cmcolxnndxs).ForEach(function (xndx, ndx) {
                                                if (cmcolxn[xndx]) {
                                                    cmcolxn[xndx].modelcore["newsrc"] = imgdatfiverows[ndx].modelcore["newsrc"];
                                                    cmcolxn[xndx].modelcore["fname"] = imgdatfiverows[ndx].modelcore["fname"];
                                                    cmcolxn[xndx].modelcore.elementImage(imgdatfiverows[ndx].modelcore.elementImage());
                                                    cmcolxn[xndx]["isdatfiveeditaddnew"](false);
                                                    cmcolxn[xndx]["ispopulated"] = true;
                                                    cmcolxn[xndx]["isimagepopulated"](true);
                                                } else {
                                                    if (ndx == imgscolxn.length) {
                                                        cmcolxn.push(createNewRow(false));
                                                    } else {
                                                        cmcolxn.push(imgdatfiverows[ndx]);
                                                        //cmcolxn = Enumerable.From(cmcolxn).Insert(xndx, [imgdatfiverows[ndx]]).ToArray();
                                                    }
                                                }
                                            });
                                            var newcmcolxn = Enumerable.From(cmcolxn).Select(function (row, ndx) {
                                                var isright = (row.countablesIndex == ndx);
                                                if (!isright) {
                                                    row.countablesIndex = ndx;
                                                }
                                                return row;
                                            }).ToArray();
                                            me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn = newcmcolxn;//cmcolxn;
                                            //put this same newcmcolxn in the other dats that have multipleoptions/answers;
                                            //TODO: not sure about this...
                                            var updateOtherOptionDats = function () {
                                                try {
                                                    var currentdat = me.pnlcontxt.$data["currentDatUniverseMember"];
                                                    Enumerable.From(newcmcolxn).ForEach(function (item) {
                                                        return item;
                                                    });
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                            };
                                            updateOtherOptionDats();
                                            me.pnlcontxt.$data.contentmodelcolxn(me.pnlcontxt.$data["currentDatUniverseMember"].xcolxn);
                                            me.pnlcontxt.$data.contentmodelcolxn.valueHasMutated();//triggers init in dat5Edit binding
                                            var applyImgEditor = function () {
                                                me.imgEditor(".datFiveEdit1imghost", ".datFiveEdit1imagesopener");
                                                var dispose = function () {
                                                    $(".editsingleglyph").parent().off(self.xevent);
                                                    $(".datfiveeditremove").off(self.xevent);
                                                };
                                                dispose();
                                                //$(".editsingleglyph").removeClass("singleedithosthide").parent().on(self.xevent, function (e) {
                                                //    e.preventDefault();
                                                //    e.cancelBubble = true;
                                                //    me.editsingleglyphHandler($(this));
                                                //});
                                                $(".datfiveeditremove").removeClass(" datfiveeditremovehide").on(self.xevent, function (e) {
                                                    e.preventDefault();
                                                    e.cancelBubble = true;
                                                    var $elem = $(e.currentTarget);
                                                    var mynode = $elem[0];//.children()[1];
                                                    var kodata = ko.contextFor(mynode);
                                                    me.removeDatFive(kodata);
                                                });
                                                me.showDoneButtonIfOk();
                                            };
                                            applyImgEditor();
                                            return imgSizingSvc.toScaledImageColxn().then(function (pfcolxn) {
                                                parseFileColxn = pfcolxn.pfColxn;
                                                sizeDxnry = pfcolxn.sizeDxnry;
                                                return saveMultipleDatImagesParse(newcmcolxn).then(function (dixrs) {
                                                    return true;
                                                });
                                            });
                                            
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }

                                    };
                                    //#endregion

                                    //#region apply images to observables

                                    var ximage = xthis.files[0] || false;
                                    if (ximage) {
                                        var url = window.URL ? window.URL : window.webkitURL;
                                        var newsrc = url.createObjectURL(ximage);
                                        if (imghost == ".datSingleEditQestion1imghost") {
                                            imgSizingSvc.toScaledImage($("img", $(imghost)), wtfkodata, newsrc, imghost);
                                        } else if (imghost == ".datFiveEdit1imghost") {
                                            if (xthis.files.length > 1) {
                                                return createMultipleRows(xthis.files);
                                            } else {
                                                //var x$imghost = 
                                                imgSizingSvc.toScaledImage($("img", $(imghost)), wtfkodata, newsrc, imghost);
                                            }
                                        } else {
                                           imgSizingSvc.toScaledImage($("img", $(imghost)), wtfkodata, newsrc, imghost);
                                        }
                                        //return saveDatImageParse(ximage).then(function (xr) {
                                        //    me.showDoneButtonIfOk();
                                        //    return {
                                        //        newsrc: newsrc,
                                        //        imghost: imghost,
                                        //        kodata: wtfkodata,
                                        //        url: xr.url,
                                        //        datImgId: xr.datimgid
                                        //    };
                                        //});
                                    } else {
                                        //return Parse.Promise.as(false);
                                    }
                                    //#endregion
                                }
                                catch (ex) {
                                    var wtf = true;
                                    return Parse.Promise.as(false);
                                }
                            };
                            try {
                                dispose();

                                $(imghost).on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    e.stopPropagation();
                                    me.resetDonePostControl();
                                    var c = ko.contextFor(this);
                                    xkodata = ko.dataFor(this);
                                    $(this).next().children().trigger("click");
                                    return false;
                                });

                                $(imagesopener).on("change", function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    e.stopPropagation();
                                    if (me.isEdit()) {
                                        $("#datcontrolssingleeditoreditbtn").addClass("dathide");
                                    } else {
                                        $("#datcontrolssingleeditoreditbtn").addClass("dathide");
                                    }
                                    return imgChangeHandler(this);
                                    //return imgChangeHandler(this).then(function (xr) {
                                        //update ui for Image and Media Icon
                                        //css add classes/styles to a bunch of elements....
                                        //return me.onImageSelected(xr);
                                   // });
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },

                        dispose: function () {

                        }
                    };
                    return me;
                };
                //#region datImageSizing
                var datImageSizingSvc = function (editSvc) {
                    var me = {
                        smoothCanvas: null,
                        smoothCtx: null,
                        stepScale: 0.5,
                        targetScale: 0.45,
                        steppedScaling: function(img, width, step) {
                            width = Math.min(Math.max(width, 400), 600);
                            var canvas = document.createElement('canvas'),
                              ctx = canvas.getContext("2d"),
                              oc = document.createElement('canvas'),
                              octx = oc.getContext('2d');
                            canvas.width = width; // destination canvas size
                            canvas.height = canvas.width * img.height / img.width;

                            if (img.width * step > width) { // For performance avoid unnecessary drawing
                                var mul = 1 / step;
                                var cur = {
                                    width: Math.floor(img.width * step),
                                    height: Math.floor(img.height * step)
                                }

                                oc.width = cur.width;
                                oc.height = cur.height;

                                octx.drawImage(img, 0, 0, cur.width, cur.height);

                                while (cur.width * step > width) {
                                    cur = {
                                        width: Math.floor(cur.width * step),
                                        height: Math.floor(cur.height * step)
                                    };
                                    octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);
                                }

                                ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);
                            } else {
                                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                            }
                            me.imageWidth = canvas.width;
                            me.imageHeight = canvas.height;
                            me.smoothCanvas = canvas;
                            me.smoothCtx = ctx;
                        },
                        scale: 0.5,
                        myimage: false,
                        imageWidth: 0,
                        imageHeight: 0,
                        xkodata: false,
                        toScaledImage: function (xmyimage, wtfkodata, newsource, imghost) {
                            if (xmyimage) {
                                try {
                                    me.xkodata = wtfkodata;
                                    var toThisImage = function () {
                                        var rslt = xmyimage[0];
                                        try {
                                           rslt = Enumerable.From(xmyimage).Where(function (ximg) {
                                                var kodata = ko.dataFor(ximg);
                                                return kodata.objectId == wtfkodata.objectId;
                                            }).Select(function (img) { return img; }).FirstOrDefault();
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    };
                                    me.myimage = toThisImage();
                                    me.myimage.onload = function () {
                                        me.steppedScaling(me.myimage, me.myimage.width, me.stepScale);
                                        var imgdata = me.smoothCanvas.toDataURL();
                                        var saveDatImageParse = function (ximg, wtfkodata) {
                                            try {
                                                var parseFile = new Parse.File('file', ximg);
                                                return parseFile.save().then(function (fxr) {
                                                    var newdatimagerow = new Parse.Object('DatImages');
                                                    newdatimagerow.set('imageFile', fxr);
                                                    newdatimagerow.set('imageWidth', me.imageWidth);
                                                    newdatimagerow.set('imageHeight', me.imageHeight);
                                                    //updateBoundImages(fxr);
                                                    return newdatimagerow.save().then(function (xr) {
                                                        var url = fxr.url();
                                                        var datimgid = xr.id;
                                                        editSvc.datimgscolxn.push({
                                                            datimagespntr: xr,
                                                            url: url,
                                                            id: datimgid,
                                                            countablesIndex: wtfkodata["countablesIndex"] || false,
                                                            kodata: wtfkodata
                                                        });
                                                        var excellent = true;
                                                        return {
                                                            parseFile: fxr,
                                                            url: url || false,
                                                            datimgid: datimgid || false,
                                                            kodata: wtfkodata || false
                                                        };
                                                    }).fail(function (ex) {
                                                        var wtf = true;
                                                        return Parse.Promise.as(false);
                                                    });
                                                }).fail(function (ex) {
                                                    var wtf = true;
                                                    return Parse.Promise.as(false);
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                return Parse.Promise.as(false);
                                            }

                                        };
                                        return saveDatImageParse({ base64: imgdata }, me.xkodata).then(function (xr) {
                                            editSvc.showDoneButtonIfOk();
                                           
                                            return editSvc.onImageSelected({
                                                dispose: function () {
                                                    me.myimage.onload = null;
                                                },
                                                newsrc: newsource,
                                                imghost: imghost,
                                                kodata: wtfkodata,
                                                parseFile: JSON.stringify(xr.parseFile),
                                                url: xr.url,
                                                datImgId: xr.datimgid
                                            });
                                        });
                                    };
                                    if (imghost == ".datSingleEditQestion1imghost") {
                                        wtfkodata["mainImage"](newsource);
                                        wtfkodata["isimagepopulated"](true);
                                    } else if (imghost == ".datFiveEdit1imghost") {
                                        wtfkodata.modelcore.elementImage(newsource);
                                        wtfkodata["isimagepopulated"](true);
                                    } else {
                                        wtfkodata.mainImage(newsource);
                                        wtfkodata["isimagepopulated"](true);
                                    }
                                    
                                    //var data = { base64: null };
                                    //var imgdata = me.smoothCtx.getImageData(0, 0, me.smoothCanvas.width, me.smoothCanvas.height).data;
                                    //data.base64 = imgdata.buffer.toString('base64');
                                    //return data;
                                }
                                catch (ex) {
                                    var wtf = true;
                                    me.myimage.onload = null;
                                }
                               
                            }
                            
                        },
                        imageOnload: function (ximg, xsource, xdatfiveitem) {
                            var promise = new Parse.Promise();
                            try {
                                ximg.onload = function () {
                                    promise.resolve({ image: ximg, datfiveitem: xdatfiveitem });
                                };
                                xdatfiveitem.modelcore.elementImage(xsource);
                                xdatfiveitem["isdatfiveeditaddnew"](false);
                                xdatfiveitem["isimagepopulated"](true);
                            }
                            catch (ex) {
                                promise.reject(ex);
                            }

                            return promise;
                                
                        },
                        toScaledImageColxn: function () {
                            var imgscolxn = $("img", $(".datFiveEdit1imghost"));
                            var sourceimgColxn = Enumerable.From(imgscolxn).Select(function (ximgelem) {
                                var rslt = { ximg: ximgelem, source: "", datfiveitem: {} };
                                rslt.datfiveitem = ko.dataFor(ximgelem);
                                rslt.source = rslt.datfiveitem.modelcore.newsrc;
                                return rslt;
                            }).ToArray();
                            var proms = [];
                            Enumerable.From(sourceimgColxn).ForEach(function (kvp) {
                                if (!ko.unwrap(kvp.datfiveitem["isdatfiveeditaddnew"])) {
                                    try {
                                        proms.push(me.imageOnload(kvp.ximg, kvp.source, kvp.datfiveitem));
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                            });
                            return Parse.Promise.when(proms).then(function (ixrcolxn) {
                                var pfileColxn = [];
                                var fnameDxnry = {};
                                Enumerable.From(ixrcolxn).ForEach(function (ixr) {
                                    me.steppedScaling(ixr.image, ixr.image.width, me.stepScale);
                                    var imgdata = me.smoothCanvas.toDataURL();
                                    var fname = ixr.datfiveitem.modelcore["fname"];
                                    pfileColxn.push(new Parse.File(fname, { base64: imgdata }));
                                    fnameDxnry[fname] = {
                                        imageWidth: me.imageWidth,
                                        imageHeight: me.imageHeight
                                    };
                                });
                                return { pfColxn: pfileColxn, sizeDxnry: fnameDxnry };
                            }).fail(function (ex) {
                                var wtf = true;
                            });
                        },
                        toScaledUrlImage: function (image, srcurl, srcbindingtarget, datimgpntr, kodata) {
                            try {
                                var imgOnload = function (xsource, ximg, xsrcbindingtarget) {
                                    ximg.crossOrigin = "Anonymous";
                                    var promise = new Parse.Promise();
                                    try {
                                        ximg.onload = function () {
                                            promise.resolve({
                                                dispose: function () {
                                                    ximg.onload = null;
                                                },
                                                image: ximg, imgsrcurl: xsource, kodata: xsrcbindingtarget
                                            });
                                        };
                                        xsrcbindingtarget(xsource);
                                    }
                                    catch (ex) {
                                        alert(ex);
                                        ximg.onload = null;
                                        promise.reject(ex);
                                    }
                                    return promise;
                                };
                                var toXImage = function (ximage) {
                                    var rslt = ximage[0];
                                    try {
                                        rslt = Enumerable.From(ximage).Where(function (ximg) {
                                            var xkodata = ko.dataFor(ximg);
                                            return (kodata.objectId && xkodata.objectId == kodata.objectId) || xkodata.guid == kodata.guid;
                                        }).Select(function (img) {
                                            return img;
                                        }).FirstOrDefault();
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return rslt;
                                };
                                var XImage = toXImage(image);
                                return imgOnload(srcurl, XImage, srcbindingtarget).then(function (ixr) {
                                    try {
                                        ixr.dispose();
                                        me.steppedScaling(ixr.image, ixr.image.width, me.stepScale);
                                        var imgdata = me.smoothCanvas.toDataURL();
                                        var saveDatImageParse = function (ximg, wtfkodata) {
                                            try {
                                                var parseFile = new Parse.File('xfile', ximg);
                                                return parseFile.save().then(function (fxr) {
                                                    var newdatimagerow = datimgpntr;//new Parse.Object('DatImages');
                                                    newdatimagerow.set('imageFile', fxr);
                                                    newdatimagerow.set('imageWidth', me.imageWidth);
                                                    newdatimagerow.set('imageHeight', me.imageHeight);
                                                    //updateBoundImages(fxr);
                                                    return newdatimagerow.save().then(function (xr) {
                                                        var url = fxr.url();
                                                        var datimgid = xr.id;
                                                        editSvc.datimgscolxn.push({
                                                            datimagespntr: xr,
                                                            url: url,
                                                            id: datimgid,
                                                            countablesIndex: wtfkodata["countablesIndex"] || false,
                                                            kodata: wtfkodata
                                                        });
                                                        return {
                                                            url: url || false,
                                                            datimgid: datimgid || false,
                                                            kodata: wtfkodata || false
                                                        };
                                                    }).fail(function (ex) {
                                                        var wtf = true;
                                                        alert(ex);
                                                    });
                                                }).fail(function (ex) {
                                                    var wtf = true;
                                                    alert(ex);
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                alert(ex);
                                                return Parse.Promise.as(false);
                                            }

                                        };
                                        return saveDatImageParse({ base64: imgdata }, kodata).then(function (xr) {
                                            return {

                                                datimgpntr: xr
                                            };
                                        }).fail(function (ex) {
                                            var wtf = true;
                                            alert(ex);
                                        });
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        alert("ximg canvas catch: " + ex);
                                    }
                                    
                                }).fail(function (ex) {
                                    var wtf = true;
                                    alert("promise catch: " + ex);
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                                alert(ex);
                                return Parse.Promise.as(false);
                            }
                            
                            
                        },
                        dispose: function () {
                            me.smoothCanvas = null;
                            me.smoothCtx = null;
                        }
                    };
                    return me;
                };
                //#endregion datImageSizing
                //#endregion datSingleEditSvc
                //#region datControlsSingleEditor1
                if (!ko.bindingHandlers.datControlsSingleEditor1) {
                    ko.bindingHandlers.datControlsSingleEditor1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                bindingContext.$data["datcountableitemVmx"] = ko.observable();
                                cntrlMgr.control(prweb.datControlsSingleEditor1).panelprops()['username']("Edit 'dat");
                                cntrlMgr.control(prweb.datControlsSingleEditor1).panelprops()['rightbuttontext'] = ko.observable("Post");
                                $("#datcontrolssingleeditorbackbtn").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        //var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                        var backtoObj = navMgr.me(prweb.datSingleEditor1).returnfromlast(true);
                                        var backto = backtoObj["T"] || prweb.datSingle1;
                                        //var backto = pnlMgr.panel(prweb.datSingle1).backtoT();
                                        if (backto == backto) {
                                            var tocntrlT = navMgr.me(prweb.datControlsSingleEditor1).returnfromlast();
                                            //pnl.datacontext(false);
                                            pnlMgr.hide(300, prweb.datSingleEditor1).datacontext(false);
                                            pnlMgr.show(300, backto);
                                            cntrlMgr.showControl(tocntrlT);//(prweb.datControlsSingleDat1);
                                        }
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                });
                                $("#datcontrolssinglededitornamearea").on(self.xevent, function (e) {
                                    try {
                                        datTypeSelectorSvc().nextType();
                                        //bindingContext.$data["pnl"] = pnl;
                                        //datTypeSelectorSvc().buildDatType(bindingContext);
                                        //bindingContext.$data["datcountableitemVmx"]("Ignatz");
                                        //cntrlMgr.control(prweb.datControlsSingleEditor1).valueHasMutated();
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                });
                                $("#datcontrolssingleeditoreditbtn").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                        var kodata = ko.dataFor(this);
                                        var panelprops = ko.unwrap(kodata.panelprops);
                                        var methods = {
                                            Edit: function (kodata) {
                                                if (pnl["datSingleEditSvc"].isEdit()) {

                                                } else {
                                                    pnl["datSingleEditSvc"].showBackToEditUI(kodata);
                                                }
                                                
                                                var yes = true;
                                            },
                                            Post: function () {
                                                if (pnl["datSingleEditSvc"].isEdit()) {
                                                    pnl["datSingleEditSvc"].editPostDatHandler();
                                                } else {
                                                    pnl["datSingleEditSvc"].showDoneUI(kodata);
                                                }
                                            }
                                        }
                                        
                                        var rightbuttontext = ko.unwrap(panelprops["rightbuttontext"]);
                                        methods[rightbuttontext](kodata);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    return false;
                                });
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            //try {
                            //    var datable = bindingContext.$data["datcountableitemVmx"]() || false;
                            //    var makedatcountableitemholder = function () {
                            //        var pnlpresenterT = datable.modelcore.presenterT;
                            //        var vmx = [{
                            //            presenterT: "",
                            //            responseImage: ko.observable(),
                            //            html: ko.observable(),
                            //            datRateShrink1: ko.observable(),
                            //            datSentimentShrink1: ko.observable(),
                            //            datCompareShrink1: ko.observable()
                            //        }];
                            //        //if (pnlpresenterT == "datRate1") {
                            //        //    //var newvmx = ;//, modeparams);
                            //        //    vmx[0].html(prweb.pCElemHtmlDxnry["datRateShrink1"].resourceModel);
                            //        //    vmx[0].datRateShrink1(newvmx[0]);
                            //        //} else if (pnlpresenterT == "datSentiment1") {
                            //        //    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data.datcomplete);
                            //        //    //cmdl.responseImage(dce.emoji);
                            //        //    vmx[0].html(prweb.pCElemHtmlDxnry["datSentimentShrink1"].resourceModel);
                            //        //    vmx[0].datSentimentShrink1(newvmx[0]);
                            //        //    var xyes = datable;// set the vmx so that classes attach to the html...in bindings...hide or show emoji etc...
                            //        //} else if (pnlpresenterT == "dat5") {
                            //        //    vmx[0].html(prweb.pCElemHtmlDxnry["datCompareShrink1"].resourceModel);
                            //        //    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(bindingContext.$data.datcomplete);
                            //        //    var winner = Enumerable.From(newvmx).MaxBy(function (r) {
                            //        //        return r.modelcore.responseCount();
                            //        //    }).modelcore.responsePercent();
                            //        //    vmx[0].datCompareShrink1({ responsePctStr: ko.observable(winner) });
                            //        //}
                            //        return vmx;
                            //    };
                            //    if (datable) {
                            //        datable["datcountableitemholder"](makedatcountableitemholder());
                            //    } else {
                            //        var yes = true;
                            //    }
                            //}
                            //catch (ex) {
                            //    var wtf = true;
                            //}
                        }
                    };
                };
                //#endregion datControlsSingleEditor1
                //#region datSingleEditor1
                if (!ko.bindingHandlers.datSingleEditor1) {
                    ko.bindingHandlers.datSingleEditor1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var dattypeSelectorsvc = datTypeSelectorSvc();
                                var pnl = pnlMgr.initSize(prweb.datSingleEditor1, elem).hide(0, prweb.datSingleEditor1);
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"] = ko.observable(minheight);
                                self._initiateMalihuScroll("scrollrootdatSingleEditor1");
                                pnl.panelprops()['initScrollRoot'] = "scrollrootdatSingleEditor1";
                                bindingContext.$data["showTextArea"] = ko.observable(false);
                                bindingContext.$data["editorVmx"] = ko.observable();
                                bindingContext.$data["datBehaviorsObject"] = ko.observable();
                                pnl["datEditBehaviorSvc"] = datEditBehaviorSvc;
                                pnl["dattypeSelectorsvc"] = dattypeSelectorsvc;
                                pnl["datSingleEditSvc"] = datSingleEditSvc(bindingContext);
                                pnl["datSingleEditSvc"].addEditorVmx(bindingContext.$data, {});
                                bindingContext.$data["submitHandler"] = function (x, y, e) {
                                    alert("Submit YES");
                                };
                                pnl["datPageEntry"] = false;
                                pnl["datUniverse"] = dattypeSelectorsvc.datTypeUniverse();
                                pnl["currentDatUniverseMember"] = dattypeSelectorsvc.defaultDatType();//pnl["datUniverse"][1];
                                pnl["displayHeaderText"] = ko.observable(false);
                                pnl["exposeLinkPasteArea"] = ko.observable(false);
                                var linkedmediaicon = prweb.pCElemHtmlDxnry["datLinkedMediaIcon1"].resourceFile.url();
                                pnl["linkedMediaIcon"] = ko.observable(linkedmediaicon);
                                pnl["mainImage"] = ko.observable(prweb.pCElemHtmlDxnry["datPhotoVideoIcon1"].resourceFile.url());
                                pnl["mainImageObject"] = { url: false, datImgId: false };
                                pnl["isimagepopulated"] = ko.observable(false);
                                pnl["islinkedmediapopulated"] = ko.observable(false);
                                pnl["linkedMediaObject"] = ko.observable();
                                pnl["reviseHeight"] = function (action) {
                                    var methods = {
                                        init: function () {
                                            var xh = 0;
                                            if (pnl["datSingleEditSvc"].isEdit()) {
                                                $("#dattypeselector1host").css('display', "none");
                                                $("#datsingleeditormultiplechoicesbtn").css('display', "none");
                                            } else {
                                                $("#dattypeselector1host").css('display', "");
                                            }
                                            pnl.panelprops()["responsiveheight"](minheight);
                                            if (pnl["datSingleEditSvc"].isEdit()) {
                                                xh = $("#datsingleeditorpostoptionshost").outerHeight();
                                                //xh -= $("#datsingleeditormultiplechoicesbtn").height();
                                            } else {
                                                xh = $("#dattypeselector1host").outerHeight();
                                            }
                                            var ph = $("#scrollrootdatSingleEditor1").outerHeight();
                                            var dh = ph - xh;
                                            //$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                            pnl.panelprops()["responsiveheight"](dh + 'px');
                                        },
                                        post: function () {
                                            pnl.panelprops()["responsiveheight"](minheight);
                                            var xh1 = $("#datsingleeditorpostinghost").height();// negative margin 0.75..padding bottom 0.75
                                            var xh2 = $("#datsingleeditorpostoptionshost").innerHeight();
                                            var xh = xh1 + xh2;
                                            var ph = $("#scrollrootdatSingleEditor1").outerHeight();
                                            var dh = ph - xh;
                                            //$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                            pnl.panelprops()["responsiveheight"](dh + 'px');
                                        },
                                        hide: function () {
                                            var issomethingvisible = false;
                                            var xh = $("#dattypeselector1host").height();
                                            var ph = $("#scrollrootdatSingleEditor1").height();
                                            var dh = ph + xh;
                                            //pnl.panelprops()["commententrycolxn"]([]);
                                            //pnl.panelprops()["commententryhtml"]("");
                                            //$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                            pnl.panelprops()["responsiveheight"](dh + 'px');
                                        },
                                        hidedattypeselector: function () {
                                            //pnl.panelprops()["responsiveheight"](minheight);
                                            var xh = $("#dattypeselector1host").height();
                                            var ph = $("#scrollrootdatSingleEditor1").height();
                                            var dh = ph - xh;
                                            pnl.panelprops()["responsiveheight"](dh + 'px');
                                            //pnlMgr.appPositionRefresh();
                                        },
                                        showdattypeselector: function () {
                                            //pnl.panelprops()["responsiveheight"](minheight);
                                            var xh = $("#dattypeselector1host").height();
                                            var ph = $("#scrollrootdatSingleEditor1").height();
                                            var dh = ph - xh;
                                            pnl.panelprops()["responsiveheight"](dh + 'px');
                                            //pnlMgr.appPositionRefresh();
                                        }
                                    };

                                    methods[action]();
                                    //var resetWindow = function () {
                                    //    $('html').animate({ scrollTop: 0 }, 'slow');
                                    //    var xh = $('body')[0].scrollHeight;
                                    //    $('body').animate({ scrollTop: ($('body')[0].scrollHeight) }, 'slow');
                                    //};
                                    //resetWindow();
                                    
                                };
                                pnl["onShow"] = function () {
                                    //if (pnl["datSingleEditSvc"].isEdit()) {
                                    //    pnl["reviseHeight"]("init");
                                    //    pnlMgr.appPositionRefresh();
                                    //};
                                };
                                
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var dc = bindingContext.$data.datacontext() || false;
                            if (dc != false) {
                                try {
                                    var methodsDxnry = {
                                        addNew: function () {
                                            try {

                                                //cntrlMgr.control(prweb.datControlsSingleEditor1).panelprops()['username']("Create 'dat");
                                                var pnl = bindingContext.$data;//is equiv to pnlMgr.panel(prweb.datSingleEditor1);
                                                pnl["datSingleEditSvc"] = datSingleEditSvc(bindingContext);
                                                if (dc["resetUniverse"]) {
                                                    pnl["datUniverse"] = pnl["dattypeSelectorsvc"].datTypeUniverse();
                                                    pnl["currentDatUniverseMember"] = pnl["dattypeSelectorsvc"].defaultDatType();//pnl["datUniverse"][1];
                                                    pnl["mainImage"](prweb.pCElemHtmlDxnry["datPhotoVideoIcon1"].resourceFile.url());
                                                    pnl["mainImageObject"] = { url: false, datImgId: false };
                                                    pnl["isimagepopulated"](false);
                                                    pnl["islinkedmediapopulated"](false);
                                                    pnl["linkedMediaObject"]();
                                                    pnl["exposeLinkPasteArea"](false);
                                                    dc["resetUniverse"] = false;

                                                };
                                                pnl["displayHeaderText"](pnl["currentDatUniverseMember"]["showHeaderQuestion"] || false);
                                                pnl["datEditBehaviorSvc"] = datEditBehaviorSvc();
                                                var dbo = pnl["datEditBehaviorSvc"]["datBehaviorsObject"]();
                                                bindingContext.$data["datBehaviorsObject"](dbo);
                                                var newdc = pnl["datSingleEditSvc"].addNewDataContext(bindingContext);
                                                var xcolxn = newdc.newxcolxn;//is created by datSingleEditSvc...called from datControls2 addNew
                                                pnl["datSingleEditSvc"].addEditorVmx(bindingContext.$data, {}, xcolxn);
                                                bindingContext.$data.contentmodelcolxn(xcolxn);
                                                pnl["datSingleEditSvc"]["pnlcontxt"] = bindingContext;
                                                pnl["datSingleEditSvc"].init();
                                                pnl["datSingleEditSvc"].resetDonePostControl("Create 'dat");
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        },
                                        editDat: function () {
                                            try {
                                                var singlepnl = dc["editDatDc"];
                                                var singlepnldc = ko.unwrap(singlepnl["datacontext"]);
                                                var datcountableitemVmx = ko.unwrap(singlepnldc["datcountableitemVmx"]);
                                                var pnl = bindingContext.$data;//is equiv to pnlMgr.panel(prweb.datSingleEditor1);
                                                var djmodel = JSON.parse(dc["editDatDc"]["datcomplete"]["jsonModel"]) || false;
                                                pnl["datEditBehaviorSvc"] = datEditBehaviorSvc(djmodel);
                                                var dbo = pnl["datEditBehaviorSvc"]["datBehaviorsObject"]();
                                                bindingContext.$data["datBehaviorsObject"](dbo);
                                                var newdc = pnl["datSingleEditSvc"].addEditDataContext(bindingContext);
                                                pnl["displayHeaderText"](pnl["currentDatUniverseMember"]["showHeaderQuestion"] || false);
                                                var xcolxn = newdc.newxcolxn;
                                                var toXsource = function () {
                                                    var rslt = {};
                                                    try {
                                                        rslt["titleText"] = ko.unwrap(singlepnldc["headerText"]);//"is this what you want?";
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    return rslt;
                                                };
                                                var xsource = toXsource();
                                                pnl["datSingleEditSvc"].addEditorVmx(pnl, xsource, xcolxn);
                                                var populateMainImageandMedia = function () {
                                                    try {
                                                        if (singlepnldc["datJsonModel"]) {
                                                            if (singlepnldc["datJsonModel"]["datType"] == 1 || singlepnldc["datJsonModel"]["datType"] == 12) {
                                                                if (singlepnldc["datJsonModel"]["mainImageObject"]) {
                                                                    pnl["mainImage"](singlepnldc["datJsonModel"]["mainImageObject"].url);
                                                                    pnl["isimagepopulated"](true);
                                                                }
                                                                if (singlepnldc["datJsonModel"]["linkedMediaObject"]) {
                                                                    pnl["linkedMediaObject"](singlepnldc["datJsonModel"]["linkedMediaObject"]);
                                                                    pnl["islinkedmediapopulated"](true);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                };
                                                populateMainImageandMedia();
                                                bindingContext.$data.contentmodelcolxn(xcolxn);
                                                pnl["datSingleEditSvc"]["pnlcontxt"] = bindingContext;
                                                pnl["datSingleEditSvc"].init();
                                                pnl["dattypeSelectorsvc"].hide();
                                                pnl["datSingleEditSvc"].resetDonePostControl("Edit 'dat");
                                                //pnl["dattypeSelectorsvc"].hide();
                                                dc["editInit"] = false;
                                                pnl["datSingleEditSvc"].toPersistedParams();//creates an object for deltas...

                                                var yes = true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            
                                        }
                                    };
                                    if (dc["addNew"]) {
                                        methodsDxnry["addNew"]();
                                        
                                    } else if (dc["editDat"] && dc["editInit"]) {
                                        try {
                                            methodsDxnry["editDat"]();
                                            var yes = true;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    }
                                    setTimeout(function () {
                                        var pnl = bindingContext.$data;
                                        pnl["reviseHeight"]("init");
                                        pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                        //pnlMgr.appPositionRefresh();
                                    }, 100);
                                    
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            } else {
                                bindingContext.$data.contentmodelcolxn([]);
                            }
                        }
                    };
                };
                //#endregion datSingleEditor1


                //#region datRateEdit1
                if (!ko.bindingHandlers.datRateEdit1) {
                    ko.bindingHandlers.datRateEdit1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$data.pnl;//pnlMgr.panel(prweb.datSingleEditor1);
                                pnl["datSingleEditSvc"].applyEDITOBJVmx(bindingContext);
                            var drx = bindingContext.$data;
                            var crx = true;
                            //#region IsClosed/IsUserVotable
                            var IsClosedUserVotableMgr = function () {
                                var me = {
                                    isPermitted: function(){},
                                    dispose: false
                                };
                                return me;
                            };
                            bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;
                            //#endregion
                            //#region ENHANCED vMx/DataContext
                            var cc = bindingContext.$data["countableColxn"];//.datcomplete.countables;//();???? observable
                            var rc = ko.unwrap(bindingContext.$data.responseCount);//();???? observable
                            
                            //#region propsColxn
                            var propsColxn = [
                                'datElementText',
                            'emoji',
                            'responsePercent',
                            'isWinner',
                            'imgVisible',
                            'isStar',
                            'isStarWinner',
                            'isStarEmpty',
                            'isCircle',
                            'isCircleWinner',
                            'circleBackground',
                            'circleNumber',
                            'isFace',
                            'isFaceWinner',
                            'is3column',
                            'is5or10column',
                            'is10column',
                            'is5column']
                            //#endregion
                            var xcc = [];
                            Enumerable.From(cc).ForEach(function (x) {
                                var cmodel = {
                                    objectId: x.objectId,
                                    datElementText: ko.observable(x.datElementText),
                                    emoji: ko.observable(x.emoji),
                                    responsePercent: ko.observable(x.responsePercent),
                                    isWinner: ko.observable(x.isWinner),
                                    imgVisible: ko.observable(x.imgVisible),
                                    isStar: ko.observable(x.isStar),
                                    isStarWinner: ko.observable(x.isStarWinner),
                                    isStarEmpty: ko.observable(x.isStarEmpty),
                                    isCircle: ko.observable(x.isCircle),
                                    isCircleWinner: ko.observable(x.isCircleWinner),
                                    circleBackground: ko.observable(x.circleBackground),
                                    circleNumber: ko.observable(x.circleNumber),
                                    isFace: ko.observable(x.isFace),
                                    isFaceWinner: ko.observable(x.isFaceWinner),
                                    is3column: ko.observable(bindingContext.$data.is3column),
                                    is5or10column: ko.observable(bindingContext.$data.is5or10column),
                                    is10column: ko.observable(bindingContext.$data.is10column),
                                    is5column: ko.observable(bindingContext.$data.is5column),
                                    xhasUserVoted: ko.observable(false)
                                };
                                return xcc.push(cmodel)
                            });
                            bindingContext.$data["xcountableColxn"] = ko.observableArray(xcc);

                            //#region ratecaption props
                            var rccprops = ['colmx',
                                    'alignment',
                                    'datElementText',
                                    'isFaceWinner',
                                'responsePercent']
                            //#endregions
                            var xrcc = [];
                            var fieldDxnry = {
                                "datElementText": {
                                    captiontext: "",
                                    placeholdertext: "caption?",
                                    "default": "captionx?..."
                                }
                            };
                            var captioncolxn = ko.unwrap(bindingContext.$data.rateeditcaptioncolxn);//is already observable
                            Enumerable.From(captioncolxn).ForEach(function (x) {
                                var that = {};
                                var toEditObj = function (p) {
                                    try {
                                        var xrslt = that;
                                        var xsource = x;
                                        var xdeflt = fieldDxnry[p]["default"] || false;
                                        var valordflt = ko.unwrap(xsource[p]) || xdeflt;
                                        xrslt[p] = ko.observable(valordflt);

                                        var xeditobj = {
                                            fieldName: p,
                                            fieldValue: ko.unwrap(xsource[p])
                                        };
                                        xeditobj[p] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p];
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                        });
                                        xrslt["EDITOBJ" + p] = ko.observable(xeditobj);
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    
                                };
                                var xpnl = bindingContext.$data.pnl;
                                Enumerable.From(rccprops).ForEach(function (p) {
                                    if (p == "datElementText") {
                                        toEditObj(p);
                                    }
                                    that[p] = ko.observable(ko.unwrap(x[p]));
                                    return;
                                });
                                return xrcc.push(that);
                            });
                            bindingContext.$data["rateeditcaptioncolxn"] = ko.observableArray(xrcc);
                            bindingContext.$data["responseCount"] = ko.observable(rc);
                            
                            IsClosedUserVotableMgr().isPermitted(true);
                            //#endregion
                            var isseestory = bindingContext.$data["seeStoryUrl"] || true;//false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            
                            //#region BUTTON HANDLER tapdatSelector VOTE
                            bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                }
                                catch (ex) {
                                    var no = true;
                                }

                                var yes = true;
                            };
                                //#endregion

                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datRateEdit1
                //#region datSentimentEdit1
                if (!ko.bindingHandlers.datSentimentEdit1) {
                    ko.bindingHandlers.datSentimentEdit1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$data.pnl;//pnlMgr.panel(prweb.datSingleEditor1);
                                pnl["datSingleEditSvc"].applyEDITOBJVmx(bindingContext);
                                var drx = bindingContext.$data;
                                var crx = true;
                                //#region Enhanced vMx/DataContext
                                //#region IsClosed/IsUserVotable
                                var IsClosedUserVotableMgr = function () {
                                    var me = {
                                        isPermitted: function(){},
                                        dispose: false
                                    };
                                    return me;
                                };
                                bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;//is a function...not executed here...
                                //#endregion

                                bindingContext.$data["wtfistheproblem"] = function (x1, x2) {
                                    var yes = true;
                                };

                                var cc = bindingContext.$data.countableColxn();
                                var rc = bindingContext.$data.responseCount;//();
                                bindingContext.$data["localis3column"] = ko.observable(bindingContext.$data.is3column);
                                bindingContext.$data["localis5column"] = ko.observable(bindingContext.$data.is5column);
                                var xcc = [];
                                var toEmojiObject = function (xemojobj) {
                                    var rslt = {};
                                    Enumerable.From(["emoji", "caption", "universeKey"]).ForEach(function (p) {
                                        rslt[p] = xemojobj[p];
                                    });
                                    Enumerable.From(["selected", "isnotselected"]).ForEach(function (p) {
                                        rslt[p] = ko.observable(ko.unwrap(xemojobj[p]));
                                    });
                                    return rslt;
                                };
                                Enumerable.From(cc).ForEach(function (x) {
                                    var xemojiobj = toEmojiObject(ko.unwrap(x['emojiObj']));
                                    if (xemojiobj.emoji !== "") {
                                        xemojiobj.selected(true);
                                        xemojiobj.isnotselected(false);
                                    }
                                    var datelementtext = xemojiobj['caption'];
                                    var cmodel = {
                                        emojiObj: xemojiobj,
                                        objectId: x.objectId,
                                        xdatElementText: ko.observable(datelementtext),
                                        xemoji: ko.observable(xemojiobj.emoji),
                                        xobsresponsePercent: ko.observable(x.responsePercent),
                                        xisWinner: ko.observable(x.isWinner),
                                        xis3column: ko.observable(bindingContext.$data.is3column),
                                        xis5column: ko.observable(bindingContext.$data.is5column),
                                        xhasUserVoted: ko.observable(false)
                                    };
                                    return xcc.push(cmodel)
                                });
                                bindingContext.$data["localCountableColxn"] = ko.observableArray(xcc);
                                bindingContext.$data["localresponseCount"] = ko.observable(rc);
                                //#endregion

                                var isseestory = bindingContext.$data["seeStoryUrl"] || true;//false;
                                bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                                //#region BUTTON HANDLER tapdatSelector ScrollTo Emoji...
                                bindingContext.$data["tapdatSelector"] = function (root, selectedCntble, e) {
                                    try {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        bindingContext.$data.pnl["ShowHideEmojiPanel"](e, { show: true });
                                        var isr = "#" + "scrollrootdatEmojiSelector1";
                                        var xtargettag ="#" + selectedCntble["emojiObj"]["universeKey"];
                                        var xtarget = $(xtargettag);
                                        $(isr).mCustomScrollbar('scrollTo', xtarget);
                                        //unselect the emoji...
                                    }
                                    catch (ex) {
                                        var no = true;
                                    }

                                    var yes = true;
                                };
                                //#endregion
                                $("#datEmojiSelector1").addClass('dathide');
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            try {
                                
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        }
                    };
                };
                //#endregion datSentimentEdit1
                //#region datFiveEdit1
                if (!ko.bindingHandlers.datFiveEdit1) {
                    ko.bindingHandlers.datFiveEdit1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                bindingContext.$data["pnl"] = pnl;
                                //#region fieldDxnry
                                var fieldDxnry = {
                                    "seeStoryUrl": {
                                        captiontext: "LINK ...See Story",
                                        placeholdertext: "paste a link...",
                                        "default": ""
                                    },
                                    "titleText": {
                                        captiontext: "",
                                        placeholdertext: "a caption...",
                                        "default": ""
                                    },
                                    "datElementText": {
                                        captiontext: "",
                                        placeholdertext: "datElementText...",
                                        "default": ""
                                    }
                                };
                                //#endregion fieldDxnry
                                if (pnl["currentDatUniverseMember"]["textEditables"]) {
                                    fieldDxnry = pnl["currentDatUniverseMember"]["textEditables"];
                                };
                                var toEditObj = function (p) {
                                    try {
                                        var xrslt = bindingContext.$data;
                                        var xsource = bindingContext.$data;
                                        var xdeflt = fieldDxnry[p]["default"];//|| fieldDxnry[p]["placeholdertext"];
                                        var valordflt = ko.unwrap(xsource["modelcore"][p]) || xdeflt;
                                        xrslt[p] = ko.observable(valordflt);

                                        var xeditobj = {
                                            fieldName: p,
                                            fieldValue: ko.unwrap(xsource["modelcore"][p])
                                        };
                                        xeditobj[p] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p];
                                        xeditobj["placeholdertext"] = ko.observable(fieldDxnry[p]["placeholdertext"]);
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                        });
                                        xrslt["EDITOBJ" + p] = ko.observable(xeditobj);
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                };
                                Enumerable.From(fieldDxnry).ForEach(function (prop) {
                                    return toEditObj(prop.Key);
                                });
                                
                                
                            
                            bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                            bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                //var mymodel = ko.dataFor(elem[1]);
                                //var T = "." + "datFiveResponseFeed1";
                                //var echild = $(T, $(elem[1]));
                                //ko.applyBindings(mymodel, echild[0]);
                                return;
                            },
                            bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                            bindingContext.$data["responsefeedhtml"] = ko.observable();

                            
                            //#region TAP ADDNEW BUTTON
                                //"tapaddnewdatfivebtn"

                            bindingContext.$data["tapdatresponsesbtn"] = function (kodata, e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    kodata["toTextAreasColxn"] = function () {
                                        var rslt = false;
                                        try {
                                            kodata["textAreasColxn"] = [];
                                            var txtareacolxn = Enumerable.From($('.singleedittextareaeditable', $(elem))).Select(function (txtarea) {
                                                try {
                                                    var xkodata = ko.dataFor(txtarea);
                                                    kodata["textAreasColxn"].push({ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) });
                                                    xkodata["$textarea"] = txtarea;
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return txtarea;
                                            }).ToArray();
                                            rslt = true;
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return rslt;
                                    };
                                    //addNewItem is a method in datwebPlayersvc in the makedefault for this dattype(1)...
                                    kodata.addNewItem(kodata, pnl, false);//false is isautoadded parameter...used by multipleimages create....
                                    //this ends up calling datSingleEditSvc.addNewDatFive(kodata, newitem)
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                var yes = true;
                            };
                            //#endregion
                            //#region BUTTON HANDLER tapdatSelector VOTE
                            bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    //var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                }
                                catch (ex) {
                                    var no = true;
                                }
                            };
                            //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datFiveEdit1
                //#region dat115Edit1
                if (!ko.bindingHandlers.dat115Edit1) {
                    ko.bindingHandlers.dat115Edit1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                bindingContext.$data["pnl"] = pnl;
                                //#region fieldDxnry
                                var fieldDxnry = {
                                    "seeStoryUrl": {
                                        captiontext: "LINK ...See Story",
                                        placeholdertext: "paste a link...",
                                        "default": ""
                                    },
                                    "titleText": {
                                        captiontext: "",
                                        placeholdertext: "Ask a Question?",
                                        "default": ""
                                    },
                                    "datElementText": {
                                        captiontext: "",
                                        placeholdertext: "datElementText...",
                                        "default": ""
                                    }
                                };
                                //#endregion fieldDxnry
                                if (pnl["currentDatUniverseMember"]["textEditables"]) {
                                    fieldDxnry = pnl["currentDatUniverseMember"]["textEditables"];
                                };
                                var toEditObj = function (p) {
                                    try {
                                        var xrslt = bindingContext.$data;
                                        var xsource = bindingContext.$data;
                                        var xdeflt = fieldDxnry[p]["default"];//|| fieldDxnry[p]["placeholdertext"];
                                        var valordflt = ko.unwrap(xsource["modelcore"][p]) || xdeflt;
                                        xrslt[p] = ko.observable(valordflt);

                                        var xeditobj = {
                                            fieldName: p,
                                            fieldValue: ko.unwrap(xsource["modelcore"][p])
                                        };
                                        xeditobj[p] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p];
                                        xeditobj["placeholdertext"] = ko.observable(fieldDxnry[p]["placeholdertext"]);
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                        });
                                        xrslt["EDITOBJ" + p] = ko.observable(xeditobj);
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                };
                                Enumerable.From(fieldDxnry).ForEach(function (prop) {
                                    return toEditObj(prop.Key);
                                });

                                bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                                bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                    //var mymodel = ko.dataFor(elem[1]);
                                    //var T = "." + "datFiveResponseFeed1";
                                    //var echild = $(T, $(elem[1]));
                                    //ko.applyBindings(mymodel, echild[0]);
                                    return;
                                },
                                bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                                bindingContext.$data["responsefeedhtml"] = ko.observable();


                                //#region TAP ADDNEW BUTTON
                                //"tapaddnewdatfivebtn"

                                bindingContext.$data["tapdatresponsesbtn"] = function (kodata, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        kodata["toTextAreasColxn"] = function () {
                                            var rslt = false;
                                            try {
                                                kodata["textAreasColxn"] = [];
                                                var txtareacolxn = Enumerable.From($('.singleedittextareaeditable', $(elem))).Select(function (txtarea) {
                                                    try {
                                                        var xkodata = ko.dataFor(txtarea);
                                                        kodata["textAreasColxn"].push({ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) });
                                                        xkodata["$textarea"] = txtarea;
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    return txtarea;
                                                }).ToArray();
                                                rslt = true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        //addNewItem is a method in datwebPlayersvc in the makedefault for this dattype(1)...
                                        kodata.addNewItem(kodata, pnl, false);//false is isautoadded parameter...used by multipleimages create....
                                        //this ends up calling datSingleEditSvc.addNewDatFive(kodata, newitem)
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    var yes = true;
                                };
                                //#endregion
                                //#region BUTTON HANDLER tapdatSelector VOTE
                                bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                    try {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        //var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                    }
                                    catch (ex) {
                                        var no = true;
                                    }
                                };
                                //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion dat115Edit1
                //#region dat125Edit1
                if (!ko.bindingHandlers.dat125Edit1) {
                    ko.bindingHandlers.dat125Edit1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                bindingContext.$data["pnl"] = pnl;
                                //#region fieldDxnry
                                var fieldDxnry = {
                                    "seeStoryUrl": {
                                        captiontext: "LINK ...See Story",
                                        placeholdertext: "paste a link...",
                                        "default": ""
                                    },
                                    "titleText": {
                                        captiontext: "",
                                        placeholdertext: "a caption...",
                                        "default": ""
                                    },
                                    "datElementText": {
                                        captiontext: "",
                                        placeholdertext: "datElementText...",
                                        "default": ""
                                    }
                                };
                                //#endregion fieldDxnry
                                if (pnl["currentDatUniverseMember"]["textEditables"]) {
                                    fieldDxnry = pnl["currentDatUniverseMember"]["textEditables"];
                                };
                                var toEditObj = function (p) {
                                    try {
                                        var xrslt = bindingContext.$data;
                                        var xsource = bindingContext.$data;
                                        var xdeflt = fieldDxnry[p]["default"];// || fieldDxnry[p]["placeholdertext"];
                                        var valordflt = ko.unwrap(xsource["modelcore"][p]) || xdeflt;
                                        xrslt[p] = ko.observable(valordflt);

                                        var xeditobj = {
                                            fieldName: p,
                                            fieldValue: ko.unwrap(xsource["modelcore"][p])
                                        };
                                        xeditobj[p] = ko.observable(valordflt);
                                        xeditobj["vanillaValue"] = xeditobj[p];
                                        xeditobj["placeholdertext"] = ko.observable(fieldDxnry[p]["placeholdertext"]);
                                        xeditobj["submitHandler"] = function (x, y, e) {
                                            alert("Submit YES");
                                        };
                                        Enumerable.From(fieldDxnry[p]).ForEach(function (frow) {
                                            xeditobj[frow.Key] = frow.Value;
                                        });
                                        xrslt["EDITOBJ" + p] = ko.observable(xeditobj);
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                };
                                Enumerable.From(fieldDxnry).ForEach(function (prop) {
                                    return toEditObj(prop.Key);
                                });


                                
                                bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                                bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                    //var mymodel = ko.dataFor(elem[1]);
                                    //var T = "." + "datFiveResponseFeed1";
                                    //var echild = $(T, $(elem[1]));
                                    //ko.applyBindings(mymodel, echild[0]);
                                    return;
                                },
                                bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                                bindingContext.$data["responsefeedhtml"] = ko.observable();


                                //#region TAP ADDNEW BUTTON
                                //"tapaddnewdatfivebtn"

                                bindingContext.$data["tapdatresponsesbtn"] = function (kodata, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        kodata["toTextAreasColxn"] = function () {
                                            var rslt = false;
                                            try {
                                                kodata["textAreasColxn"] =[]; 
                                               var txtareacolxn = Enumerable.From($('.singleedittextareaeditable', $(elem))).Select(function (txtarea) {
                                                   try {
                                                       var xkodata = ko.dataFor(txtarea);
                                                       kodata["textAreasColxn"].push({ txtarea: txtarea, datafor: xkodata, presenter$Elem: $(elem) });
                                                       xkodata["$textarea"] = txtarea;
                                                   }
                                                   catch (ex) {
                                                       var wtf = true;
                                                   }
                                                   return txtarea;
                                               }).ToArray();
                                               rslt = true;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        //addNewItem is a method in datwebPlayersvc in the makedefault for this dattype(1)...
                                        kodata.addNewItem(kodata, pnl, false);//false is isautoadded parameter...used by multipleimages create....
                                        //this ends up calling datSingleEditSvc.addNewDatFive(kodata, newitem)
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    var yes = true;
                                };
                                //#endregion
                                //#region BUTTON HANDLER tapdatSelector VOTE
                                bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                    try {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        //var pnl = pnlMgr.panel(prweb.datSingleEditor1);
                                    }
                                    catch (ex) {
                                        var no = true;
                                    }
                                };
                                //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion dat115Edit1

                //#region datControlsSingleDat1
                if (!ko.bindingHandlers.datControlsSingleDat1) {
                    ko.bindingHandlers.datControlsSingleDat1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var user = self.mydatappVmx.parseuser();
                            //self.mydatappVmx.manageAnonymousUser(self.mydatappVmx.parseuser());
                            if (user != false) {
                                //var username = user.getUsername();
                                //cntrlMgr.control(prweb.datControlsSingleDat1).panelprops()['username'](username);
                                var url = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datNotifyIcon1"].resourceFile);
                                cntrlMgr.control(prweb.datControlsSingleDat1).panelprops()['elementImage'](url);
                                $("#datcontrolsinglebackbtn").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        var backtoObj = navMgr.me(prweb.datSingle1).returnfromlast(true);
                                        var backto = backtoObj["T"] || false;
                                        //var backto = pnlMgr.panel(prweb.datSingle1).backtoT();
                                        if (backto == prweb.datInviteMember1) {
                                            try {
                                                pnl.datacontext(false);
                                                cntrlMgr.showControl(prweb.datControls2);
                                                pnlMgr.hide(300);
                                                pnlMgr.show(300, prweb.datFeed1);
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        } else if (backto == prweb.datSingle1) {

                                            //var fromT = pnlMgr.hide(300)["presenterT"];
                                            var hiddenT = pnlMgr.hide(300) || false;
                                            if (hiddenT) {
                                                var fromT = hiddenT["presenterT"];
                                                var toT = navMgr.me(fromT).returnfromlast();
                                                pnlMgr.show(200, toT);
                                            } else {
                                                var wtf = true;
                                            }
                                            //var toT = navMgr.me(fromT).to(prweb.datSingle1);
                                            //pnlMgr.show(200, toT);//.backtoT(false);
                                            pnl.datacontext(false);
                                            //$(".datCommentFoot1").addClass(datpanelvisible).css('display', "");
                                        } else if (backto == prweb.datUserProfile1) {
                                            var tocntrlT = navMgr.me(prweb.datControlsSingleDat1).returnfromlast();
                                            cntrlMgr.showControl(tocntrlT);
                                            pnlMgr.hide(300) || false;
                                            var returnToPnl = pnlMgr.show(200, backto);
                                            if (backtoObj["properties"]) {
                                                try {
                                                    var dc = backtoObj["properties"]["datacontext"];
                                                    //var userid = dc["profile"]()["userPointer"]["objectId"];
                                                    returnToPnl.datacontext(dc);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                
                                            }
                                            pnl.datacontext(false);
                                        } else {
                                            //$(".datCommentFoot1").addClass(datpanelhidden).css('display', "none");
                                            var tocntrlT = navMgr.me(prweb.datControlsSingleDat1).returnfromlast();
                                            
                                            pnl.datacontext(false);
                                            pnlMgr.hide(300);
                                            if (backto == prweb.datRightMenu1) {
                                                pnlMgr.show(300, prweb.datFeed1);
                                            } else {
                                                if (backto) {
                                                    pnlMgr.show(300, backto);
                                                } else {
                                                    pnlMgr.show(300, prweb.datFeed1);
                                                }
                                            }
                                            
                                            cntrlMgr.showControl(tocntrlT);
                                            
                                            
                                            //pnlMgr.hide(300);
                                            //pnlMgr.show(200, prweb.datFeed1);
                                           

                                        }
                                        pnl.panelprops()["clearcontents"]();
                                        pnl.panelprops()['hidecommententry']();
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }

                                });
                                $("#datcontrolsingleprofileimage").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var tocntrlT = navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsUserProfile);
                                    cntrlMgr.showControl(tocntrlT);
                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    var user = Parse.User.current();//or some other user_id we have!!!! gotta get user_id in dataContext somehow!!!
                                    var userid = user.id || false;
                                    if (userid != false) {
                                        //pnlMgr.addPanel(prweb.datUserProfile1, userid);
                                        
                                        var hiddenpnl = pnlMgr.hide(300);
                                        var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                        hiddenpnl.datacontext(false);
                                        var toT = navMgr.me(prweb.datSingle1).to(prweb.datUserProfile1, sourceproperties);
                                        var topnl = pnlMgr.show(200, toT);//.backtoT(prweb.datSingle1);
                                        topnl.datacontext(userid);
                                        
                                    }
                                    //#endregion
                                });
                                $("#datcontrolsinglenotifybutton").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var tocntrlT = navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsNotify);
                                    cntrlMgr.showControl(prweb.datControlsNotify);
                                    //#region Navigate to datNotify1 uses pnlMgr
                                    var hiddenpnl = pnlMgr.hide(300);
                                    var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                    hiddenpnl.datacontext(false);
                                    var toT = navMgr.me(prweb.datSingle1).to(prweb.datNotify1, sourceproperties);
                                    pnlMgr.addPanel(toT);
                                    pnlMgr.show(200, toT);//.backtoT();

                                    //#endregion
                                });
                                $("#datcontrolsignlerigthmenubutton").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsRightMenu1);
                                    //cntrlMgr.showControl(prweb.datControlsRightMenu1);IS IN RIGHTMENU OnShow method
                                    //#region Navigate to datRightMenu1 uses pnlMgr
                                    pnlMgr.hide(300);
                                    navMgr.me(prweb.datSingle1).to(prweb.datRightMenu1);
                                    var pnl = pnlMgr.show(200, prweb.datRightMenu1);//.backtoT(prweb.datSingle1);
                                    var singlepnl = pnlMgr.panel(prweb.datSingle1);

                                    pnl["datacontext"](singlepnl);

                                    //#endregion
                                });
                                $("#datcontrolsinglefeedfilterbutton").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    cntrlMgr.showControl(prweb.datControlsFeedFilter);
                                    //#region Navigate to datFeedFilter1 uses pnlMgr
                                    try {
                                        pnlMgr.panel(prweb.datFeed1)["lastNavFromDatFeedElem"] = false;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                    pnlMgr.addPanel(prweb.datFeedFilter1);
                                    pnlMgr.hide(300);
                                    var pnl = pnlMgr.show(200, prweb.datFeedFilter1).backtoT();

                                    //#endregion
                                });
                                
                                var userid = self.mydatappVmx.parseuser().id;
                                var user = self.mydatappVmx.parseuser();
                                //var juser = user.toJSON();
                                //if (juser.user_photo) {
                                //    var xurl =prweb.toImgUrl(juser.user_photo);
                                //    cntrlMgr.control(prweb.datControlsSingleDat1).panelprops()['userphoto'](xurl);
                                //}
                                var userphoto = user.get('user_photo') || false;
                                if (userphoto) {
                                    var xurl = userphoto.url() || userphoto.url;
                                    //juser.user_photo.url;//tojson makes sure url is here...
                                    cntrlMgr.control(prweb.datControlsSingleDat1).panelprops()['userphoto'](xurl);
                                } else {
                                    var xr = self["userProfile"] || false;
                                    if (xr) {
                                        var xurl = prweb.toOwnerImgUrl(xr.userOwner.owner);
                                        cntrlMgr.control(prweb.datControlsSingleDat1).panelprops()['userphoto'](xurl);
                                    }
                                }
                                bindingContext.$data.dispose = function () {
                                    $("#datcontrolsinglebackbtn").off(self.xevent);
                                    $("#datcontrolsingleprofileimage").off(self.xevent);
                                    $("#datcontrolsinglenotifybutton").off(self.xevent);
                                    $("#datcontrolsignlerigthmenubutton").off(self.xevent);
                                    $("#datcontrolsinglefeedfilterbutton").off(self.xevent);
                                };
                            }

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datControlsSingleDat1
                //#region datSingle1
                if (!ko.bindingHandlers.datSingle1) {
                    ko.bindingHandlers.datSingle1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.initSize(prweb.datSingle1, elem).hide(0, prweb.datSingle1);
                                var minheight = pnl.panelprops()["minheight"];
                                pnl.panelprops()["responsiveheight"](minheight);
                                pnl.panelprops()['initScrollRoot'] = "#scrollrootdatSingle1";
                                self._initiateMalihuScroll("scrollrootdatSingle1");
                                pnl.panelprops()["datviewedobject"] = ko.observable();//this object is in pnl.datacontext['datviewedobject']...update observable from that property whenever you want to use whats in it...
                                
                                pnl.panelprops()["commententrycolxn"] = ko.observableArray();
                                pnl.panelprops()["commententryhtml"] = ko.observable();
                                pnl.panelprops()["responsefeedcolxn"] = ko.observableArray();//this hosts the Vmx for the datResponseFeed1 control..
                                //the datResponseFeed1 control...in its init binding...adds a panel prop for the responsefeedelements...
                                pnl.panelprops()["responsefeedhtml"] = ko.observable();
                                //bindingContext.$data.panelprops()['initScrollRoot'] = "#scrollrootdatSingle1";
                                
                                var iscommententryvisible = false;
                                pnl.panelprops()['hidecommententry'] = function () {
                                    pnl["IsCommentEdit"] = false;
                                    iscommententryvisible = false;
                                    var xh = $("#datcommententryholder").height();
                                    var ph = $("#scrollrootdatSingle1").height();
                                    var dh = ph + xh;
                                    pnl.panelprops()["commententrycolxn"]([]);
                                    pnl.panelprops()["responsiveheight"](pnl.panelprops()["minheight"]);//(minheight);//(dh + 'px');
                                    pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                    pnlMgr.appPositionRefresh();
                                };
                                pnl.panelprops()['hideresponsefeedcolxn'] = function () { };

                                pnl.panelprops()['clearcontents'] = function () {
                                    iscommententryvisible = false;
                                    pnl.panelprops()["commententrycolxn"]([]);
                                    pnl.panelprops()["responsefeedcolxn"]([]);
                                    pnl.panelprops()['commentFeedColxn']([]);
                                    pnl.panelprops()['commentCount']("loading comments...");
                                    $(".datcommentfeedgadget").show();
                                };
                                pnl["onHide"] = function () {
                                    try {
                                        minheight = pnl.panelprops()["minheight"];
                                        pnl.datacontext()["fromT"] = false;
                                        pnl.panelprops()['hidecommententry']();
                                        //bindingContext.$data.contentmodelcolxn([]);
                                        //pnl.datacontext(false);
                                    }
                                    catch (ex) { var wtf = true;}
                                };
                                pnl.controlT = prweb.datControlsSingleDat1;
                                pnl["datPageEntry"] = false;
                                pnl["toUserProfile"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var tocntrlT = navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsUserProfile);
                                    cntrlMgr.showControl(tocntrlT);
                                    //#region Navigate to datUserProfile1 uses pnlMgr
                                    var dc = false;
                                    if (data.presenterT == "datResponseFeedElem1") {
                                        dc = data.userOwner.userId;
                                    } else if (data.presenterT == "datCommentElem1") {
                                        dc = data.commentUserId;
                                    }
                                    else if (data.presenterT == "datFiveResponseFeedElem1") {
                                        dc = data.userOwner.userId;
                                    } else {
                                        dc = xroot.datcomplete.userId;//establish datacontext for the addedPanel...
                                    }
                                    
                                    //pnlMgr.addPanel(prweb.datUserProfile1, dc);
                                    var hiddenpnl = pnlMgr.hide(300);
                                    var sourceproperties = { datacontext: hiddenpnl.datacontext() };
                                    var toT = navMgr.me(prweb.datSingle1).to(prweb.datUserProfile1, sourceproperties);
                                    hiddenpnl.datacontext(false);
                                    var topnl = pnlMgr.show(200, toT);//.backtoT(prweb.datSingle1);
                                    topnl.datacontext(dc);
                                    //pnlMgr.hide(300, prweb.datFeed1);
                                    //#endregion
                                };
                                pnl["toFollowUnFollow"] = function (xroot, data, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                };
                                
                                //#region tocommentsbtns
                                //Hey...this is complex because it is adding an anchored container...and scroolroot needs its size changed..
                                //if not for that, this method would be very simple...populate some datacontext for displaying the control..
                                pnl["showCommentEdit"] = function (xcomment$data) {
                                    //navMgr.me(prweb.datControlsSingleDat1).returnfromlast();
                                    iscommententryvisible = true;
                                    pnl["IsCommentEdit"] = true;
                                    pnl["EditCommentText"] = xcomment$data.commentText();
                                    pnl["EditCommentObject"] = xcomment$data;
                                    //pnl.panelprops()["commententryhtml"](prweb.pCElemHtmlDxnry["datCommentEntry1"].resourceModel);
                                    var newVmx = {
                                        html: ko.observable(prweb.pCElemHtmlDxnry["datCommentEntry1"].resourceModel),
                                        pnl: pnl
                                    }
                                    pnl.panelprops()["commententrycolxn"]([newVmx]);
                                    pnl.panelprops()["responsiveheight"](pnl.panelprops()["minheight"]);
                                    $("#commenttextarea").css("height", "8em");
                                    
                                    //pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                    var xh = $("#datcommententryholder").height();
                                    var ph = $("#scrollrootdatSingle1").height();
                                    var dh = ph - xh;
                                    ////$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                    pnl.panelprops()["responsiveheight"](dh + 'px');
                                    
                                    setTimeout(function () {
                                        pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                        pnlMgr.appPositionRefresh();
                                        $("#commenttextarea").focus().blur(function () {
                                            pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                            pnlMgr.appPositionRefresh();
                                        });
                                    }, 200);
                                    
                                };

                                pnl["showCommentEntry"] = function () {
                                    if (!iscommententryvisible) {
                                        iscommententryvisible = true;
                                        //pnl.panelprops()["commententryhtml"](prweb.pCElemHtmlDxnry["datCommentEntry1"].resourceModel);
                                        var newVmx = {
                                            html: ko.observable(prweb.pCElemHtmlDxnry["datCommentEntry1"].resourceModel),
                                            pnl: pnl
                                        }
                                        pnl.panelprops()["commententrycolxn"]([newVmx]);
                                        pnl.panelprops()["responsiveheight"](pnl.panelprops()["minheight"]);
                                        $("#commenttextarea").css("height", "8em");
                                        var xh = $("#datcommententryholder").height();
                                        var ph = $("#scrollrootdatSingle1").height();
                                        var dh = ph - xh;
                                        //$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                        pnl.panelprops()["responsiveheight"](dh + 'px');
                                        setTimeout(function () {
                                            pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                            pnlMgr.appPositionRefresh();
                                            $("#commenttextarea").focus().blur(function () {
                                                pnlMgr.resizeWindowSvc().onPanelShow(pnl, true);
                                                pnlMgr.appPositionRefresh();
                                            });
                                        }, 200);
                                    } else {
                                        //this function is also in pnl.panelprops()['hidecommententry'] above!!!!!!
                                        //it is used by the binding/button handlers in the datCommentEntry1 binding to hide this control...
                                        //if you change this, make sure you change it above...or finish the work i didnt do....lol...
                                        iscommententryvisible = false;
                                        var xh = $("#datcommententryholder").height();
                                        var ph = $("#scrollrootdatSingle1").height();
                                        var dh = ph + xh;
                                        pnl.panelprops()["commententrycolxn"]([]);
                                        //pnl.panelprops()["commententryhtml"]("");
                                        //$("#datsinglenewcommentcontainer").removeClass('dathide').css('display', 'none');
                                        pnl.panelprops()["responsiveheight"](dh + 'px');
                                        $("#commenttextarea").off('blur');
                                    }
                                };

                                $("#datsinglecommententrybutton").on(self.xevent, function (e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.cancelBubble = true;
                                    pnl["showCommentEntry"]();
                                });
                                //#endregion
                                
                                
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datSingle1.init catch exception " + ex.Message);
                            } 
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            //MORE GENERALLY: This creates DataContext for datSingle1
                            //this needs to put dat model in the contentmodels for the datSingle1 panel
                            var dc = bindingContext.$data.datacontext() || false;
                            if (dc == false) {
                                try {
                                    bindingContext.$data.contentmodelcolxn([]);
                                    var pnl = pnlMgr.panel(prweb.datSingle1);
                                    if (pnl.panelprops()["commentFeedColxn"]) {
                                        pnl.panelprops()["commentFeedColxn"]([]);
                                    }
                                    if (pnl.panelprops()["responseFeedElemColxn"]) {
                                        pnl.panelprops()["responseFeedElemColxn"]([]);
                                    }
                                    //pnl.panelprops()["datviewedobject"](false);
                                    //if (bindingContext.$data["datPageEntry"]) {
                                    //    bindingContext.$data["datPageEntry"]["contentelements"] = [];
                                    //    bindingContext.$data["datPageEntry"]["datObjectJs"] = null;
                                    //    bindingContext.$data["datPageEntry"] = null;
                                    //    //bindingContext.$data["datPageEntry"]["dispose"];
                                    //}
                                    //if (bindingContext.$data["datcomplete"]) {
                                    //    bindingContext.$data["datcomplete"] = null;
                                    //}
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                
                            }
                            //the contentmodel inserted here needs to be from datplayersvc...
                            if (dc != false) {
                                try {
                                    if (dc.datcomplete["jsonModel"]) {
                                        dc["datJsonModel"] = JSON.parse(dc.datcomplete["jsonModel"]) || false;
                                        dc.datcomplete["datJsonModel"] = dc["datJsonModel"];
                                    }
                                    bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                                    var xcolxn = bindingContext.$data["datPageEntry"].init(dc.datcomplete);
                                    //bindingContext.$data.contentmodelcolxn(xcolxn);
                                    var populateMainImageandMedia = function () {
                                        try { 
                                            dc["mainImage"] = ko.observable();
                                            dc["mainImageObject"] = { url: false, datImgId: false };
                                            dc["isimagepopulated"] = ko.observable(false);
                                            dc["islinkedmediapopulated"] = ko.observable(false);
                                            dc["seeStoryUrl"] = ko.observable();
                                            dc["linkedMediaIcon"] = ko.observable(prweb.pCElemHtmlDxnry["datLinkedMediaIcon1"].resourceFile.url());
                                            dc["linkedMediaObject"] = false;
                                            if (dc["datJsonModel"]) {
                                                if (dc["datJsonModel"]["datType"] == 1 || dc["datJsonModel"]["datType"] == 12) {
                                                    if (dc["datJsonModel"]["mainImageObject"]) {
                                                        dc["mainImage"](dc["datJsonModel"]["mainImageObject"].url);
                                                        dc["isimagepopulated"](dc["datJsonModel"]["mainImageObject"].datImgId);
                                                    }
                                                    if (dc["datJsonModel"]["linkedMediaObject"]) {
                                                        dc["linkedMediaObject"] = dc["datJsonModel"]["linkedMediaObject"];
                                                        dc["seeStoryUrl"](dc["datJsonModel"]["linkedMediaObject"]["url"]);
                                                        dc["islinkedmediapopulated"](true);
                                                    }
                                                } 
                                            }
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                    };
                                    populateMainImageandMedia();
                                    dc["userName"] = dc.dat.datUsername || "";
                                    dc["updatedAt"] = ko.observable("Updated " + prweb.timeAgoFromParseTime(dc.dat.updatedAt));
                                    dc["createdAt"] = ko.observable("Created " + prweb.timeAgoFromParseTime(dc.dat.createdAt));
                                    dc["isFollowingText"] = ko.observable("Follow");
                                    dc["titleText"] = dc.dat.headerText || "";
                                    dc["captionText"] = "caption text goes here";//dc.dat.headerText || "";
                                    var toIsShareable = function () {
                                        var rslt = {
                                            "isShareable": false,
                                            "publicPrivate": "Private",
                                            "isOwnerVIEWING": false
                                        };
                                        try {
                                            var status = dc.datcomplete.statusObject || false;
                                            var so = dc.datcomplete.shareOptions || false;
                                            if (so && status) {
                                                Enumerable.From(status).ForEach(function (prop) {
                                                    rslt[prop.Key] = prop.Value;
                                                });
                                                Enumerable.From(so).ForEach(function (prop) {
                                                    rslt[prop.Key] = prop.Value;
                                                });
                                                var userid = Parse.User.current()["id"] || false;
                                                rslt["isOwnerVIEWING"] = (userid == dc.datcomplete.userId);
                                                rslt["isShareable"] = status["IsPublic"] || rslt["isOwnerVIEWING"];
                                                if(status["IsPublic"]){
                                                    rslt["publicPrivate"] = "";
                                                }
                                                //if (status["IsUserFollowing"]) {// dc.datviewedobject[1].isFollowingOwner
                                                //    rslt["isFollowingText"] = "UnFollow";
                                                //}
                                            }
                                        }
                                        catch (ex) { var wtf = true;}
                                        return rslt;
                                    };
                                    Enumerable.From(toIsShareable()).ForEach(function (prop) {
                                        dc[prop.Key] = prop.Value;
                                    });
                                    dc["sharePhoto"] = prweb.toImgUrl(prweb.pCElemHtmlDxnry["datSharedat1"].resourceFile);

                                    //This should populate the datSingle1.datComplete property
                                    bindingContext.$data.datcomplete = dc.datcomplete;
                                    xcolxn[0]["datacontext"] = dc;
                                    
                                    
                                    
                                    if (!(dc["shareTapHandler"])) {
                                        dc["shareTapHandler"] = function (xpnl, ydata, e) {
                                            e.preventDefault();
                                            e.cancelBubble = true;
                                            navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsShare1);
                                            cntrlMgr.showControl(prweb.datControlsShare1).backtoT(prweb.datControlsSingleDat1);
                                            pnlMgr.hide(300);
                                            var toT = navMgr.me(prweb.datSingle1).to(prweb.datShare1);
                                            var pnl = pnlMgr.show(200, toT).backtoT(prweb.datSingle1);
                                            //bindingContext.$data["rightmenueventsource"] = xpnl;
                                            pnl["datacontext"](bindingContext);
                                        };
                                    }
                                    //FYI...the responses button event handler is in rate and sentiment bindings
                                    bindingContext.$data.contentmodelcolxn(xcolxn);
                                    
                                    return prweb.parseManager.datViewed({ limit: 6, skip: 0, datid: dc.dat.objectId, datownerid: dc.dat.userId }).then(function (xr) {
                                        try {
                                            var rslt = xr;//presumably this could update observables in datacontext or pnl.panelprops...
                                            xr[0]["datId"] = dc.dat.objectId;
                                            var toCurrentUserResponse = function () {
                                                var rslt = false;
                                                try {
                                                    var cu = xr[0].currentUser || false;
                                                    if (cu.responsesummary) {
                                                        var last = cu.responsesummary.length || false;
                                                        if (last) {
                                                            last = cu.responsesummary[0];
                                                            rslt = {
                                                                lastVoteID: last.dceid,
                                                                summary: cu.responsesummary,
                                                                kodata: false,
                                                                allResponses: cu.allResponses || []
                                                            };
                                                            if (dc.dat.datType == 1 || dc.dat.datType == 11 || dc.dat.datType == 12) {
                                                                if (rslt) {
                                                                    dc.datcomplete.statusObject["IsUserHasVoted"] = true;
                                                                }
                                                                var colxn = bindingContext.$data.contentmodelcolxn();
                                                                var allDceIds = Enumerable.From(rslt.allResponses)
                                                                    .Select(function (r) { return r.dceid; }).ToArray();
                                                                Enumerable.From(colxn).ForEach(function (r) {
                                                                    rslt.kodata = r;
                                                                    var voted = Enumerable.From(allDceIds).Contains(r.modelcore.dcelementId);
                                                                    r.xhasUserVoted(r.modelcore.dcelementId == rslt.lastVoteID || voted);
                                                                    r["IsClosedUserVotableMgr"]().updateWithDatViewedObject(rslt);
                                                                });
                                                            } else {
                                                                var xobject = bindingContext.$data.contentmodelcolxn()[0] || false;
                                                                if (xobject) {

                                                                    var colxn = [];
                                                                    if (xobject.localCountableColxn) {
                                                                        colxn = xobject.localCountableColxn();
                                                                    } else {
                                                                        colxn = xobject.countableColxn();
                                                                    }
                                                                    Enumerable.From(colxn).ForEach(function (r) {
                                                                        r.xhasUserVoted(r.objectId == rslt.lastVoteID);
                                                                    });
                                                                    xobject["IsClosedUserVotableMgr"]().updateWithDatViewedObject(rslt);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }

                                                return rslt;
                                            };
                                            if (dc["CurrentUserResponse"]) {
                                                dc["CurrentUserResponse"](toCurrentUserResponse());
                                            } else {
                                                dc["CurrentUserResponse"] = ko.observable(toCurrentUserResponse());
                                            }

                                            var feedpnl = pnlMgr.panel(prweb.datFeed1) || false;
                                            if (feedpnl) {
                                                feedpnl.feedElementUpdate(false, xr[0]);
                                            }
                                            var toIsFollowingText = function () {
                                                var rslt = "Follow";
                                                var isfollowing = xr[1]["IsFollowingOwner"] || false;
                                                if (isfollowing) {
                                                    rslt = "UnFollow";
                                                }
                                                return rslt;
                                            };
                                            dc["isFollowingText"](toIsFollowingText());
                                            dc["datviewedobject"] = xr;
                                            var xpnl = pnlMgr.panel(prweb.datSingle1);//dc["isresponsefeedvisible"] && 
                                            var isr = xpnl.panelprops()['initScrollRoot'] || false;
                                            var xtarget = $("#datsinglecontentmodel");// datsinglecontentmodel tapdatresponsesbutton
                                            $(isr).mCustomScrollbar('scrollTo', xtarget);
                                            //if (dc["datviewedobject"]) {
                                            //    var newVmx = {
                                            //        html: ko.observable(prweb.pCElemHtmlDxnry["datResponseFeed1"].resourceModel),
                                            //        pnl: pnl
                                            //    }
                                            //    pnl.panelprops()["responsefeedcolxn"]([newVmx]);
                                            //}
                                            //$("#scrollrootdatSingle1").animate({
                                            //    scrollTop: $("#datsinglecontentmodel").offset().top
                                            //}, 2000);
                                        }
                                        catch (ex) {
                                            var wtf = true;
                                        }
                                        return dc["datviewedobject"] || xr;
                                        //FYI...the responses button event handler move to rate and sentiment bindings

                                    }).fail(function (ex) {
                                        dc["datviewedobject"] = false;
                                        var oops = true;
                                    });
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                
                            }
                            
                        }
                    };
                };
                //#endregion datSingle1

                //#region datRate1
                if (!ko.bindingHandlers.datRate1) {
                    ko.bindingHandlers.datRate1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            var drx = bindingContext.$data;
                            var crx = true;
                            //#region IsClosed/IsUserVotable
                            var IsClosedUserVotableMgr = function () {
                                var isUserAllowedToVote = function () {
                                    var rslt = true;
                                    try {
                                        var toIsVotable = function () {
                                            var rslt = {
                                                "isVotable": false
                                            };
                                            try {
                                                var pnl = pnlMgr.panel(prweb.datSingle1);
                                                var status = pnl.datcomplete.statusObject || false;
                                                var so = pnl.datcomplete.shareOptions || false;
                                                if (so && status) {
                                                    Enumerable.From(status).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    Enumerable.From(so).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    if (!(rslt["IsClosed"])) {
                                                        rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                    } else {
                                                        alert("This 'dat is closed.");
                                                    }

                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt["isVotable"];
                                        };
                                        rslt = toIsVotable();
                                    }
                                    catch (ex) { }
                                    return rslt;
                                };
                                var me = {
                                    isPermitted: function (displayui) {
                                        var rslt = isUserAllowedToVote();
                                        if (displayui) {
                                            me.displayUI(rslt);
                                        }
                                        return rslt;
                                    },
                                    displayUI: function (xispermitted) {

                                        if (!xispermitted) {
                                            $(".datselectoritem", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                        }
                                    },
                                    updateWithDatViewedObject: function (xrslt) {
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        var status = pnl.datcomplete.statusObject || false;
                                        if (status) {
                                            var isvoted = xrslt || false;
                                            pnl.datcomplete.statusObject["IsUserHasVoted"] = (isvoted !== false);
                                        }
                                        me.isPermitted(true);
                                    },
                                    dispose: false
                                };
                                return me;
                            };
                            bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;
                            //#endregion
                            //#region ENHANCED vMx/DataContext
                            var cc = bindingContext.$data.countableColxn;//();???? observable
                            var rc = bindingContext.$data.responseCount;//();???? observable
                            var captioncolxn = bindingContext.$data.ratecaptioncolxn;//is already observable
                            //#region propsColxn
                            var propsColxn = [
                                'datElementText',
                            'emoji',
                            'responsePercent',
                            'isWinner',
                            'imgVisible',
                            'isStar',
                            'isStarWinner',
                            'isStarEmpty',
                            'isCircle',
                            'isCircleWinner',
                            'circleBackground',
                            'circleNumber',
                            'isFace',
                            'isFaceWinner',
                            'is3column',
                            'is5or10column',
                            'is10column',
                            'is5column']
                            //#endregion
                            var xcc = [];
                            Enumerable.From(cc).ForEach(function (x) {
                                var cmodel = {
                                    objectId: x.objectId,
                                    datElementText: ko.observable(x.datElementText),
                                    emoji: ko.observable(x.emoji),
                                    responsePercent: ko.observable(x.responsePercent),
                                    isWinner: ko.observable(x.isWinner),
                                    imgVisible: ko.observable(x.imgVisible),
                                    isStar: ko.observable(x.isStar),
                                    isStarWinner: ko.observable(x.isStarWinner),
                                    isStarEmpty: ko.observable(x.isStarEmpty),
                                    isCircle: ko.observable(x.isCircle),
                                    isCircleWinner: ko.observable(x.isCircleWinner),
                                    circleBackground: ko.observable(x.circleBackground),
                                    circleNumber: ko.observable(x.circleNumber),
                                    isFace: ko.observable(x.isFace),
                                    isFaceWinner: ko.observable(x.isFaceWinner),
                                    is3column: ko.observable(bindingContext.$data.is3column),
                                    is5or10column: ko.observable(bindingContext.$data.is5or10column),
                                    is10column: ko.observable(bindingContext.$data.is10column),
                                    is5column: ko.observable(bindingContext.$data.is5column),
                                    xhasUserVoted: ko.observable(false)
                                };
                                return xcc.push(cmodel)
                            });
                            bindingContext.$data["countableColxn"] = ko.observableArray(xcc);
                            //#region ratecaption props
                            var rccprops = ['colmx',
                                    'alignment',
                                    'datElementText',
                                'responsePercent']
                            //#endregions
                            var xrcc = [];
                            Enumerable.From(captioncolxn).ForEach(function (x) {
                                var that = {};
                                Enumerable.From(rccprops).ForEach(function (p) {
                                    that[p] = ko.observable(x[p]());
                                    return;
                                });
                                return xrcc.push(that);
                            });
                            bindingContext.$data["ratecaptioncolxn"] = ko.observableArray(xrcc);
                            bindingContext.$data["responseCount"] = ko.observable(rc);
                            var toUserHasVotedUI = function () {
                                var selectorDxnry = {
                                    is3Column: ".datselectoritem img",
                                    is5Column: ".datselectoritem .glyphicon",
                                    is10Column: ".datselectoritem"
                                };
                                var toSelector = function () {
                                    var rslt = "";
                                    if (bindingContext.$data.is5column) {
                                        rslt = selectorDxnry["is5Column"];
                                    }
                                    if (bindingContext.$data.is10column) {
                                        rslt = selectorDxnry["is10Column"];
                                    }
                                    if (bindingContext.$data.is3column) {
                                        rslt = selectorDxnry["is3Column"];
                                    }
                                    return rslt;
                                };
                                $(toSelector(), $(elem)).removeClass("hasuservoted");
                                //$(".datselectoritem .imagebackgroundforface", $(elem)).removeClass("hasuservoted");
                                //$(".datselectoritem .ratecircle", $(elem)).removeClass("hasuservoted");
                            };
                            toUserHasVotedUI();
                            IsClosedUserVotableMgr().isPermitted(true);
                            //#endregion
                            var isseestory = bindingContext.$data["seeStoryUrl"] || false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            //#region TAP RESPONSES BUTTON
                            var pnl = pnlMgr.panel(prweb.datSingle1) || pnlMgr.panel(prweb.datInvite1) || false;
                            var isresponsefeedvisible = false;//pnl.datacontext()["isresponsefeedvisible"] || false;
                            if (pnl) {
                                pnl.datacontext()["isresponsefeedvisible"] = isresponsefeedvisible;
                            }
                            bindingContext.$data["tapdatResponsesBtn"] = function (root, xxx, e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                try {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    var animspeed = 200;
                                    if (!isresponsefeedvisible) {
                                        var xvmx = pnl.panelprops()["responsefeedcolxn"]() || false;
                                        if (xvmx.length > 0) {
                                            $("#datresponsefeedcontainer").show(0);
                                            var xtarget = $("#tapdatresponsesbutton");
                                            $(isr).mCustomScrollbar('scrollTo', xtarget);
                                            $(".datcommentfeedgadget").hide(0);
                                        } else {
                                            var newVmx = {
                                                html: ko.observable(prweb.pCElemHtmlDxnry["datResponseFeed1"].resourceModel),
                                                pnl: pnl
                                            }
                                            pnl.panelprops()["responsefeedcolxn"]([newVmx]);
                                        }
                                        //hide the commentfeed...
                                    } else {
                                        $(isr).mCustomScrollbar('update');
                                        var target = $("#datsinglecontentmodel");//tapdatresponsesbutton datCommentFeed1colxn
                                        $(isr).mCustomScrollbar('scrollTo', target);
                                        $("#datresponsefeedcontainer").hide(0);
                                        $(".datcommentfeedgadget").show(0);
                                        //show the commentfeed
                                    }
                                    isresponsefeedvisible = !isresponsefeedvisible;
                                    pnl.datacontext()["isresponsefeedvisible"] = isresponsefeedvisible;
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                var yes = true;
                            };
                            //#endregion
                            //#region BUTTON HANDLER tapdatSelector VOTE
                            bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var pnl = pnlMgr.panel(prweb.datSingle1);
                                    var isUserAllowedToVote = function () {
                                        var rslt = true;
                                        try {
                                            var toIsVotable = function () {
                                                var rslt = {
                                                    "isVotable": false
                                                };
                                                try {
                                                    var status = pnl.datcomplete.statusObject || false;
                                                    var so = pnl.datcomplete.shareOptions || false;
                                                    if (so && status) {
                                                        Enumerable.From(status).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        Enumerable.From(so).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        if (!(rslt["IsClosed"])) {
                                                            rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                        } else {
                                                            alert("This 'dat is closed.");
                                                        }

                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt["isVotable"];
                                            };
                                            rslt = toIsVotable();
                                        }
                                        catch (ex) { }
                                        return rslt;
                                    };
                                    var isPermitted = isUserAllowedToVote();
                                    if (isPermitted) {
                                        var parms = {};
                                        parms["datobjectId"] = pnl.datcomplete.objectId;
                                        parms["responseCount"] = 1;
                                        parms["dceid"] = selectedCountable.objectId;
                                        var xvoterslt = pnl["datPageEntry"].voteHandler(selectedCountable);

                                        var displaydatrslts = function (voterslt) {
                                            try {
                                                var rc = voterslt[0].responseCount;//??? observable
                                                root.responseCount(rc);//????? observable
                                                var cc = voterslt[0].countableColxn;//???? observable
                                                var xcc = root.countableColxn();//???? observable
                                                //we just change the observable properties on the objects here...otherwise safari flashes...
                                                //these are emojis and faces right now...we are swapping out urls for images but they should be cached anyway...free UX...
                                                Enumerable.From(xcc).ForEach(function (x, index) {
                                                    var row = cc[index];
                                                    x['objectId'] = row['objectId'];
                                                    Enumerable.From(propsColxn).ForEach(function (p) {
                                                        x[p](row[p]);
                                                        return;
                                                    });
                                                });
                                                var rcc = voterslt[0].ratecaptioncolxn;
                                                //root.ratecaptioncolxn = rcc;
                                                var xrcc = root.ratecaptioncolxn();

                                                Enumerable.From(xrcc).ForEach(function (x, index) {
                                                    var row = rcc[index];
                                                    //x['objectId'] = row['objectId'];
                                                    Enumerable.From(rccprops).ForEach(function (p) {
                                                        x[p](row[p]());
                                                        return;
                                                    });
                                                });
                                            }
                                            catch (ex) {
                                                var no = true;
                                            }
                                        };
                                        displaydatrslts(xvoterslt);
                                        toUserHasVotedUI();
                                        var setVotedUi = function () {
                                            var selectorDxnry = {
                                                is5Column: function () {
                                                    var $e = $(e.target);
                                                    $e.addClass("hasuservoted").addClass("datrounded");
                                                },
                                                is10Column: function () {
                                                    var $e = $(e.target);
                                                    var x = $e.parents(".datselectoritem");
                                                    $e.parents(".datselectoritem").addClass("hasuservoted");
                                                },
                                                is3Column: function () {
                                                    var $e = $(e.target);
                                                    $e.addClass("hasuservoted").addClass("datrounded");
                                                }
                                            };
                                            var toSelector = function () {
                                                if (bindingContext.$data.is5column) {
                                                    selectorDxnry["is5Column"]();
                                                }
                                                if (bindingContext.$data.is10column) {
                                                    selectorDxnry["is10Column"]();
                                                }
                                                if (bindingContext.$data.is3column) {
                                                    selectorDxnry["is3Column"]();
                                                }
                                            };
                                            toSelector();

                                            //var ech = $e.children();
                                            //$e.children().addClass("hasuservoted");
                                            //$e.find("img").css({"border": "2px solid red" });
                                            //var img = $("img", $e);
                                            //img.addClass("hasuservoted");
                                            var x = 2;
                                        };
                                        setVotedUi();
                                        IsClosedUserVotableMgr().displayUI(false);
                                        var xdc = pnl.datacontext();
                                        xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                        return prweb.parseManager.updateDatResults(parms).then(function (rslt) {
                                            try {
                                                //rslt is a datfeedelement...
                                                var newrslt = pnl["datPageEntry"].makepgobj(rslt);
                                                //could then put the return from makepageobj back through the above...
                                                displaydatrslts(newrslt);
                                                var dc = pnl.datacontext();
                                                dc["updatedAt"]("Updated " + prweb.timeAgoFromParseTime(rslt.updatedAt));
                                                toUserHasVotedUI();
                                                setVotedUi();
                                                IsClosedUserVotableMgr().displayUI(false);
                                                pnlMgr.panel(prweb.datFeed1)["feedElementUpdate"](rslt);//feedElement
                                                var hellyes = true;
                                            }
                                            catch (ex) {
                                                var no = true;
                                            }

                                            return true;
                                        }).fail(function (ex) {
                                            var no = true
                                        });
                                    } else {
                                        alert("This 'dat permits one vote only.");
                                    }


                                }
                                catch (ex) {
                                    var no = true;
                                }

                                var yes = true;
                            };
                            //#endregion
                            //#region NOT USED OLD HANDLER
                            //$('.datselectoritem', $(elem)).bind(self.xevent, function (e) {
                            //    e.preventDefault();
                            //    e.cancelBubble = true;
                            //    //viewModel.votehandler(viewModel.modelcore.dcelementId);
                            //    bindingContext.$data.votehandler(viewModel.modelcore.dcelementId);
                            //    //this is trying to find the pnl that displays the feed...or invite...
                            //    var singlebacktoT = pnlMgr.panel(prweb.datSingle1).backtoTprop;
                            //    var pnl = pnlMgr.panel(singlebacktoT);
                            //    //this finds the model for the datFeedElem1 or datInviteElem1 that displays the dat that has this datContenElement/datFive in its colxn...
                            //    var cmcolxn = Enumerable.From(pnl.contentmodelcolxn());
                            //    var xcmodel = Enumerable.From(pnl.contentmodelcolxn()).Where(function (cm) { return cm.datId == viewModel.datid }).FirstOrDefault();
                            //    if (xcmodel) {
                            //        xcmodel.updateSelected(new Date(Date.now()).toISOString());
                            //    }
                            //});
                            //#endregion
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion
                //#region datSentiment1
                if (!ko.bindingHandlers.datSentiment1) {
                    ko.bindingHandlers.datSentiment1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {


                                var drx = bindingContext.$data;
                                var crx = true;
                                //this whole thing creates an enhanced viewModel/datacontext for this control...
                                //the idea was to make any special ui requirements for this control...kept isolated to here...
                                //#region Enhanced vMx/DataContext
                                //#region IsClosed/IsUserVotable
                                var IsClosedUserVotableMgr = function () {
                                    var isUserAllowedToVote = function () {
                                        var rslt = true;
                                        try {
                                            var toIsVotable = function () {
                                                var rslt = {
                                                    "isVotable": false
                                                };
                                                try {
                                                    var pnl = pnlMgr.panel(prweb.datSingle1);
                                                    var status = pnl.datcomplete.statusObject || false;
                                                    var so = pnl.datcomplete.shareOptions || false;
                                                    if (so && status) {
                                                        Enumerable.From(status).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        Enumerable.From(so).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        if (!(rslt["IsClosed"])) {
                                                            rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                        } else {
                                                            alert("This 'dat is closed.");
                                                        }

                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt["isVotable"];
                                            };
                                            rslt = toIsVotable();
                                        }
                                        catch (ex) { }
                                        return rslt;
                                    };
                                    var me = {
                                        isPermitted: function (displayui) {
                                            var rslt = isUserAllowedToVote();
                                            if (displayui) {
                                                me.displayUI(rslt);
                                            }
                                            return rslt;
                                        },
                                        displayUI: function (xispermitted) {

                                            if (!xispermitted) {
                                                $(".datselectoritem img", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                            }
                                        },
                                        updateWithDatViewedObject: function (xrslt) {
                                            var pnl = pnlMgr.panel(prweb.datSingle1);
                                            var status = pnl.datcomplete.statusObject || false;
                                            if (status) {
                                                var isvoted = xrslt || false;
                                                pnl.datcomplete.statusObject["IsUserHasVoted"] = (isvoted !== false);
                                            }
                                            me.isPermitted(true);
                                        },
                                        toCurrentUserResponse: function (xobject, lastvoteid) {
                                            var colxn = [];
                                            if (xobject.localCountableColxn) {
                                                colxn = xobject.localCountableColxn();
                                            } else {
                                                colxn = xobject.countableColxn();
                                            }
                                            Enumerable.From(colxn).ForEach(function (r) {
                                                r.xhasUserVoted(r.objectId == lastvoteid);
                                            });
                                        },
                                        dispose: false
                                    };
                                    return me;
                                };
                                bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;//is a function...not executed here...
                                //#endregion

                                bindingContext.$data["wtfistheproblem"] = function (x1, x2) {
                                    var yes = true;
                                };

                                var cc = bindingContext.$data.countableColxn();
                                var rc = bindingContext.$data.responseCount();
                                bindingContext.$data["localis3column"] = ko.observable(bindingContext.$data.is3column);
                                bindingContext.$data["localis5column"] = ko.observable(bindingContext.$data.is5column);
                                var xcc = [];
                                Enumerable.From(cc).ForEach(function (x) {
                                    var cmodel = {
                                        objectId: x.objectId,
                                        xdatElementText: ko.observable(x.datElementText),
                                        xemoji: ko.observable(x.emoji),
                                        xobsresponsePercent: ko.observable(x.responsePercent),
                                        xisWinner: ko.observable(x.isWinner),
                                        xis3column: ko.observable(bindingContext.$data.is3column),
                                        xis5column: ko.observable(bindingContext.$data.is5column),
                                        xhasUserVoted: ko.observable(false)
                                    };
                                    return xcc.push(cmodel)
                                });
                                bindingContext.$data["localCountableColxn"] = ko.observableArray(xcc);
                                bindingContext.$data["localresponseCount"] = ko.observable(rc);
                                var toUserHasVotedUI = function () {
                                    $(".datselectoritem img", $(elem)).removeClass("hasuservoted");
                                };
                                //#endregion

                                IsClosedUserVotableMgr().isPermitted(true);
                                //#region TAP RESPONSES BUTTON
                                //var isresponsefeedvisible = false;
                                var isresponsefeedvisible = false;
                                var toPnl = function () {
                                    return Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                                        var isone = (p.presenterT == prweb.datSingle1 || p.presenterT == prweb.datInvite1);
                                        return p.iscurrent == true && isone
                                    }).FirstOrDefault();
                                };
                                var pnl = toPnl() || false;
                                if (pnl) {
                                    pnl.datacontext()["isresponsefeedvisible"] = isresponsefeedvisible;
                                }
                                bindingContext.$data["tapdatResponsesBtn"] = function (root, xxx, e) {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    try {;
                                        var isr = pnl.panelprops()['initScrollRoot'] || false;

                                        var animspeed = 200;
                                        if (!isresponsefeedvisible) {
                                            var xvmx = pnl.panelprops()["responsefeedcolxn"]() || false;
                                            if (xvmx.length > 0) {
                                                $("#datresponsefeedcontainer").show(0);
                                                var xtarget = $("#tapdatresponsesbutton");
                                                $(isr).mCustomScrollbar('scrollTo', xtarget);
                                                $(".datcommentfeedgadget").hide(0);

                                            }
                                            else {
                                                try {
                                                    var newVmx = {
                                                        html: ko.observable(prweb.pCElemHtmlDxnry["datResponseFeed1"].resourceModel),
                                                        pnl: pnl
                                                    }
                                                    pnl.panelprops()["responsefeedcolxn"]([newVmx]);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                            }
                                        } else {
                                            $(isr).mCustomScrollbar('update');
                                            var target = $("#datsinglecontentmodel");//tapdatresponsesbutton datCommentFeed1colxn
                                            $(isr).mCustomScrollbar('scrollTo', target);
                                            $("#datresponsefeedcontainer").hide(0);
                                            $(".datcommentfeedgadget").show(0);
                                            //pnl.panelprops()["responsefeedcolxn"]([]);//removes html...
                                            //show the commentfeed

                                        }
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        pnl.datacontext()["isresponsefeedvisible"] = isresponsefeedvisible;
                                        var yes = true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                    }
                                };
                                //#endregion
                                
                                var isseestory = bindingContext.$data["seeStoryUrl"] || false;
                                bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                                //#region TAP SEE STORY BUTTON NOT USED
                                //bindingContext.$data["tapdatSeeStoryBtn"] = function (root, xxx, e) {
                                //e.preventDefault();
                                //e.cancelBubble = true;
                                ////var pnl = pnlMgr.panel(prweb.datSingle1) || pnlMgr.panel(prweb.datInvite1);
                                //pnlMgr.addPanel(prweb.datWebView1, isseestory);
                                //self.appManager.toFullScreen();
                                //pnlMgr.hide(300);
                                //pnlMgr.show(0, prweb.datWebView1);
                                //var url = root.seeStoryUrl || false;//"http://datmoments.com";
                                //if (url) {
                                //    try {
                                //        window.open(url, "_blank");
                                //    }
                                //    catch (ex) {
                                //    }
                                //}
                                //};
                                //#endregion
                                //#region THIS IS THE BUTTON HANDLER FOR WHAN AN EMOJI IS TAPPED...
                                bindingContext.$data["tapdatSelector"] = function (root, selectedCntble, e) {
                                    try {
                                        e.preventDefault();
                                        e.cancelBubble = true;
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        var isUserAllowedToVote = function () {
                                            var rslt = true;
                                            try {
                                                var toIsVotable = function () {
                                                    var rslt = {
                                                        "isVotable": false
                                                    };
                                                    try {
                                                        var status = pnl.datcomplete.statusObject || false;
                                                        var so = pnl.datcomplete.shareOptions || false;
                                                        if (so && status) {
                                                            Enumerable.From(status).ForEach(function (prop) {
                                                                rslt[prop.Key] = prop.Value;
                                                            });
                                                            Enumerable.From(so).ForEach(function (prop) {
                                                                rslt[prop.Key] = prop.Value;
                                                            });
                                                            if (!(rslt["IsClosed"])) {
                                                                rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                            } else {
                                                                alert("This 'dat is closed.");
                                                            }

                                                        }
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    return rslt["isVotable"];
                                                };
                                                rslt = toIsVotable();
                                            }
                                            catch (ex) { }
                                            return rslt;
                                        };
                                        var isPermitted = isUserAllowedToVote();
                                        if (isPermitted) {
                                            var xvoterslt = pnl["datPageEntry"].voteHandler(selectedCntble);
                                            var parms = {};
                                            parms["datobjectId"] = pnl.datcomplete.objectId;
                                            parms["responseCount"] = 1;
                                            parms["dceid"] = selectedCntble.objectId;
                                            var displaydatrslts = function (voterslt) {
                                                try {
                                                    var rc = voterslt[0].responseCount();
                                                    root.localresponseCount(rc);
                                                    var cc = voterslt[0].countableColxn();
                                                    var xcc = root.localCountableColxn();//[];
                                                    //we just change the observable properties on the objects here...otherwise safari flashes...
                                                    //these are emojis and faces right now...we are swapping out urls for images but they should be cached anyway...free UX...
                                                    Enumerable.From(xcc).ForEach(function (x, index) {
                                                        var row = cc[index];
                                                        x.objectId = row.objectId;
                                                        x.xdatElementText(row.datElementText);
                                                        x.xemoji(row.emoji);
                                                        x.xobsresponsePercent(row.responsePercent);
                                                        x.xisWinner(row.isWinner);
                                                        x.xhasUserVoted(x.objectId == parms["dceid"]);
                                                    });
                                                }
                                                catch (ex) {
                                                    var no = true;
                                                }

                                            };
                                            displaydatrslts(xvoterslt);
                                            //toUserHasVotedUI();
                                            var setVotedUi = function () {
                                                var $e = $(e.target);
                                                $e.addClass("hasuservoted").addClass("datrounded");
                                                var x = 2;
                                            };
                                            //setVotedUi();
                                            IsClosedUserVotableMgr().displayUI(false);
                                            var xdc = pnl.datacontext();
                                            xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                            return prweb.parseManager.updateDatResults(parms).then(function (rslt) {
                                                try {
                                                    //rslt is a datfeedelement...
                                                    var newrslt = pnl["datPageEntry"].makepgobj(rslt);
                                                    //could then put the return from makepageobj back through the above...
                                                    //toUserHasVotedUI();
                                                    displaydatrslts(newrslt);
                                                    var dc = pnl.datacontext();
                                                    dc["updatedAt"]("Updated " + prweb.timeAgoFromParseTime(rslt.updatedAt));
                                                    IsClosedUserVotableMgr().toCurrentUserResponse(root, parms["dceid"]);
                                                    pnlMgr.panel(prweb.datFeed1)["feedElementUpdate"](rslt);//feedElement
                                                    var hellyes = true;
                                                }
                                                catch (ex) {
                                                    var no = true;
                                                }

                                                return true;
                                            }).fail(function (ex) {
                                                var no = true
                                            });
                                        } else {
                                            alert("This 'dat permits one vote only.");
                                        }


                                    }
                                    catch (ex) {
                                        var no = true;
                                    }

                                    var yes = true;
                                };
                                //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }

                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            try {
                                //var toPnl = function () {
                                //    return Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                                //        var isone = (p.presenterT == prweb.datSingle1 || p.presenterT == prweb.datInvite1);
                                //        return p.iscurrent == true && isone
                                //    }).FirstOrDefault();
                                //};
                                //var pnl = toPnl() || false;
                                //var isr = pnl.panelprops()['initScrollRoot'] || false;
                                //$(isr).mCustomScrollbar('update');
                                //var target = $("#datsinglecontentmodel");
                                ////$(isr).mCustomScrollbar('scrollTo', '+=20');
                                //$(isr).mCustomScrollbar('scrollTo', target);
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                        }
                    };
                };
                //#endregion
                //#region datfive
                if (!ko.bindingHandlers.datfive) {
                    ko.bindingHandlers.datfive = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingle1);//toPnl();//pnlMgr.panel(prweb.datSingle1) || pnlMgr.panel(prweb.datInvite1);
                            bindingContext.$data["pnl"] = pnl;
                            bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                            bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                var mymodel = ko.dataFor(elem[1]);
                                var T = "." + "datFiveResponseFeed1";
                                var echild = $(T, $(elem[1]));
                                ko.applyBindings(mymodel, echild[0]);
                                return;
                            },
                            bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                            bindingContext.$data["responsefeedhtml"] = ko.observable();
                            var isseestory = bindingContext.$data["seeStoryUrl"] || false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            //#region IsClosed/IsUserVotable
                            var IsClosedUserVotableMgr = function () {
                                var isUserAllowedToVote = function () {
                                    var rslt = true;
                                    try {
                                        var toIsVotable = function () {
                                            var rslt = {
                                                "isVotable": false
                                            };
                                            try {
                                                var pnl = pnlMgr.panel(prweb.datSingle1);
                                                var status = pnl.datcomplete.statusObject || false;
                                                var so = pnl.datcomplete.shareOptions || false;
                                                if (so && status) {
                                                    Enumerable.From(status).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    Enumerable.From(so).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    if (!(rslt["IsClosed"])) {
                                                        rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                    } else {
                                                        alert("This 'dat is closed.");
                                                    }

                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt["isVotable"];
                                        };
                                        rslt = toIsVotable();
                                    }
                                    catch (ex) { }
                                    return rslt;
                                };
                                var me = {
                                    isPermitted: function (displayui) {
                                        var rslt = isUserAllowedToVote();
                                        if (displayui) {
                                            me.displayUI(rslt);
                                        }
                                        return rslt;
                                    },
                                    displayUI: function (xispermitted) {

                                        if (!xispermitted) {
                                            $(".datselectoritem img", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                            $(".dat5selectorglpyh", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                        }
                                    },
                                    updateWithDatViewedObject: function (responsesummary) {
                                        //this is called by datSingle datViewed...
                                        if (ko.unwrap(responsesummary.kodata.xhasUserVoted)) {
                                            $(".dat5selectorglpyh", $(elem)).removeClass('glyphicon-unchecked').addClass('glyphicon-check');
                                        } else {

                                        }
                                        me.isPermitted(true);
                                    },
                                    dispose: false
                                };
                                return me;
                            };
                            bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;//is a function...not executed here...
                            IsClosedUserVotableMgr().isPermitted(true);
                            //#endregion
                            var toUserHasVotedUI = function () {
                                var xx = $(".img-circle", $(elem));
                                xx.removeClass("hasuservoted");
                            };
                            //#region TAP RESPONSES BUTTON
                            var isresponsefeedvisible = false;
                            var ismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                            isresponsefeedvisible = pnl.datacontext()["datfiveresponsefeedid"] == ismevisible;
                            var refreshResponses = function (isaftervote) {
                                var animspeed = 200;
                                var newVmx = {
                                    html: ko.observable(prweb.pCElemHtmlDxnry["datFiveResponseFeed1"].resourceModel),
                                    dceId: ismevisible,
                                    pnl: pnl//getdatRespondentsList is updateTarget for server...could query by dceid
                                }
                                bindingContext.$data["responsefeedcolxn"]([newVmx]);

                                $(".dat5responsefeedcontainer", $(elem)).show(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        //$(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        //$(isr).mCustomScrollbar('scrollTo', '-=200');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });
                                $(".datcommentfeedgadget").hide(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        $(isr).mCustomScrollbar('scrollTo', '-=100');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });

                            };
                            if (pnl.datacontext()["fromT"] !== prweb.datFeed1) {
                                if (isresponsefeedvisible && pnl.datacontext()["datviewedobject"]) {
                                    refreshResponses();
                                }
                            }
                            bindingContext.$data["tapdatresponsesbtn"] = function (root, xxx, e) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.cancelBubble = true;
                                
                                    var animspeed = 200;
                                    if (!isresponsefeedvisible) {
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        ismevisible = root.modelcore.dcelementId;
                                        refreshResponses();
                                    } else {
                                        $(".datcommentfeedgadget").show(animspeed, function () {
                                            var isr = pnl.panelprops()['initScrollRoot'] || false;
                                            if (isr != false) {
                                                $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                                $(isr).mCustomScrollbar('scrollTo', '-=100');
                                                //$(isr).mCustomScrollbar("update");
                                                var yes = true;
                                            }
                                        });
                                        $(".datresponsefeedcontainer", e).hide(animspeed);
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        bindingContext.$data["responsefeedcolxn"]([]);//removes html...
                                        //show the commentfeed

                                    }
                                    if (isresponsefeedvisible) {
                                        var xismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                                        pnl.datacontext()["datfiveresponsefeedid"] = xismevisible;
                                    }
                                
                            };
                            //#endregion
                            //#region BUTTON HANDLER tapdatSelector VOTE
                            bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    var pnl = pnlMgr.panel(prweb.datSingle1);
                                    var isUserAllowedToVote = function () {
                                        var rslt = true;
                                        try {
                                            var toIsVotable = function () {
                                                var rslt = {
                                                    "isVotable": false
                                                };
                                                try {
                                                    var status = pnl.datcomplete.statusObject || false;
                                                    var so = pnl.datcomplete.shareOptions || false;
                                                    if (so && status) {
                                                        Enumerable.From(status).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        Enumerable.From(so).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        if (!(rslt["IsClosed"])) {
                                                            rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                        } else {
                                                            alert("This 'dat is closed.");
                                                        }

                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt["isVotable"];
                                            };
                                            rslt = toIsVotable();
                                        }
                                        catch (ex) { }
                                        return rslt;
                                    };
                                    var isPermitted = isUserAllowedToVote();
                                    if (isPermitted) {
                                        var parms = {};
                                        parms["datobjectId"] = pnl.datcomplete.objectId;
                                        parms["responseCount"] = 1;
                                        parms["dceid"] = selectedCountable.modelcore.dcelementId;
                                        toUserHasVotedUI();
                                        var setVotedUi = function () {
                                            var $e = $(e.target);
                                            //if ($e.hasClass("datselectoritem")) {
                                            //    $(".img-circle", $e).addClass("hasuservoted").addClass("datrounded");
                                            //} else {
                                            //    $e.addClass("hasuservoted").addClass("datrounded");
                                            //}
                                            var xxx = $(".dat5selectorglpyh", $(elem));
                                            if (xxx.hasClass('glyphicon-check')) {
                                                parms["responseCount"] = -1;
                                                xxx.removeClass('glyphicon-check').addClass('glyphicon-unchecked');
                                                $e.removeClass("hasuservoted").removeClass("datrounded");
                                            } else {
                                                parms["responseCount"] = 1;
                                                xxx.removeClass('glyphicon-unchecked').addClass('glyphicon-check');
                                                $e.addClass("hasuservoted").addClass("datrounded");
                                            }
                                            var x = 2;
                                        };
                                        setVotedUi();
                                        IsClosedUserVotableMgr().displayUI(false);
                                        var updateResponses = function (cntbles) {
                                            try {
                                                var pnlcntbles = bindingContext.$data.pnl.contentmodelcolxn();
                                                var xcntbles = cntbles || [];
                                                var rslt = 0;
                                                Enumerable.From(xcntbles).ForEach(function (c) {
                                                    Enumerable.From(pnlcntbles)
                                                        .Where(function (wc) {
                                                            return wc.objectId == c.objectId;
                                                        })
                                                        .ForEach(function (pc) {
                                                            var rc = ko.unwrap(c.modelcore.responseCount);
                                                            var rp = ko.unwrap(c.modelcore.responsePercent);
                                                            pc.modelcore.responseCount(rc);
                                                            pc.modelcore.responsePercent(rp);
                                                        });
                                                    rslt += ko.unwrap(c.modelcore.responseCount);
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        var xvoterslt = pnl["datPageEntry"].voteHandler(selectedCountable, selectedCountable.modelcore.dcelementId);
                                        var totalresponses = updateResponses(xvoterslt);
                                        var xdc = pnl.datacontext();
                                        xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                        return prweb.parseManager.updateDatResults(parms).then(function (rslt) {
                                            try {
                                                //rslt is a datfeedelement...
                                                //var newrslt = pnl["datPageEntry"].makepgobj(rslt);
                                                //could then put the return from makepageobj back through the above...
                                                //displaydatrslts(newrslt);  THIS UPDATES ENTIRE COUNTABLES DISPLAYED HERE(datSingle1) VIA OBSERVABLES....
                                                var dc = pnl.datacontext();
                                                dc["updatedAt"]("Updated " + prweb.timeAgoFromParseTime(rslt.updatedAt));
                                                if (rslt.totalResponses != totalresponses) {
                                                    updateResponses(pnl["datPageEntry"].makepgobj(rslt));
                                                }
                                                pnlMgr.panel(prweb.datFeed1)["feedElementUpdate"](rslt, false);//feedElement
                                                if (isresponsefeedvisible) {
                                                    refreshResponses(true);
                                                }
                                                setTimeout(function () {
                                                    tapinProgress = false;
                                                }, 3000);
                                            }
                                            catch (ex) {
                                                var no = true;
                                            }

                                            return true;
                                        }).fail(function (ex) {
                                            var no = true
                                        });
                                    } else {

                                    }
                                }
                                catch (ex) {
                                    var no = true;
                                }
                            };
                                //#endregion
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion datfive
                //#region datFiveResponseFeed1
                var datFiveResponseFeedSvc = {
                    ReponsesVisibilityMgr: function (xbndngCntxt) {
                        var me = {
                            shareOptions:{},
                            isUserHasVoted: function () {
                                var rslt = false;
                                try {
                                    var responses = xbndngCntxt.$data.pnl.datacontext().CurrentUserResponse().allResponses || [];
                                    var dattype = xbndngCntxt.$data.pnl.datcomplete.datType;
                                    if (dattype == 11) {
                                        var dceid = xbndngCntxt.$data.dceId;
                                        var matched = Enumerable.From(responses)
                                            .Where(function (r) { return r.dceid == dceid })
                                            .Select(function (xr) { return xr; }).ToArray();
                                        if (matched.length > 0) {
                                            rslt = true;
                                        }
                                    } else {
                                        var summary = [];
                                        var curUserResp = xbndngCntxt.$data.pnl.datacontext().CurrentUserResponse() || false;
                                        if(curUserResp){
                                            summary = curUserResp.summary || [];
                                        }
                                        rslt = responses.length > 0 || summary.length > 0;
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                return rslt;
                            },
                            isAllRespondents: function () {
                                var xxtest = me.isUserHasVoted();
                                return me.shareOptions.allrespondents || false;
                            },
                            isOnlyMe: function () {
                                return me.shareOptions.onlyme || false;
                            },
                            isDatOwner:function () {
                                var rslt = false;
                                var puser = Parse.User.current() || false;
                                if (puser) {
                                    if (xbndngCntxt.$data.pnl.datcomplete) {
                                        rslt = (puser.id == xbndngCntxt.$data.pnl.datcomplete["userId"]);
                                    }
                                }
                                return rslt;
                            },
                            setResponsesVisible: function (xrslt) {
                                datFiveResponseFeedSvc.responsesVisible = xrslt;
                            },
                            init: function () {
                                var rslt = true;
                                try {
                                    me.shareOptions = xbndngCntxt.$data.pnl.datcomplete.datJsonModel.shareOptions || {};
                                    if (me.isOnlyMe()) {
                                        rslt = false;
                                        datFiveResponseFeedSvc.responsesVisibleTextOnFalse = "Responses are visible only to the author of this dat...";
                                        if (me.isDatOwner()) {
                                            rslt = true;
                                        }
                                    } else if (me.isAllRespondents()) {
                                        rslt = false;
                                        datFiveResponseFeedSvc.responsesVisibleTextOnFalse = "The author requests that responses are visible only to respondents...";
                                        if (me.isUserHasVoted()) {
                                            rslt = true;
                                        }
                                    }
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                                me.setResponsesVisible(rslt);
                                return me;
                            },
                            dispose: false
                        };
                        return me.init();
                    },
                    responsesVisibleTextOnFalse: "The author requests that responses are visible only to respondents...",
                    responsesVisible: false,
                    replyKodata: false,
                    newcontentmodel: false,
                    pnl: false,
                    datcomplete: false,
                    makedatCommentableItemHolder: function () { },
                    retrieveComments: function (replykodata) {
                        try {
                            if (replykodata) {
                                datFiveResponseFeedSvc.replyKodata = replykodata;
                            }
                            if (datFiveResponseFeedSvc.replyKodata) {
                                var replyid = datFiveResponseFeedSvc.replyKodata.replyId;
                                return prweb.parseManager.getReplyComments(replyid).then(function (xr) {
                                    var cmodelarray = [];//replyKodata["commentFeedColxn"]();
                                    try {
                                        var populatecontentmodelcolxn = function (dcmntscolxn) {
                                            var makecomment = function (dcmt) {
                                                try {
                                                    var xcm = datFiveResponseFeedSvc.newcontentmodel();
                                                    xcm.IsReplyComment = true;
                                                    xcm.replyId = replyid;
                                                    xcm.pnl = datFiveResponseFeedSvc.pnl;
                                                    xcm.datcomplete = datFiveResponseFeedSvc.datcomplete;
                                                    xcm.elementImage(prweb.toOwnerImgUrl(dcmt.commentOwner));
                                                    xcm.commentId = dcmt.objectId;
                                                    xcm.commentUser(dcmt.commentUser.username);
                                                    xcm.commentUserId = dcmt.commentUser.objectId;
                                                    xcm.commentText(dcmt.comment);
                                                    xcm.commentDate(prweb.timeAgoFromParseTime(dcmt.updatedAt));
                                                    xcm.sortabledate = prweb.dateTime(dcmt.updatedAt);
                                                    xcm.anotherdate = prweb.dateTime(dcmt.updatedAt);
                                                    xcm.updatedat = dcmt.updatedAt;
                                                    xcm.dfe = dcmt.datFeedElement || false;
                                                    xcm.clickHandler = datFiveResponseFeedSvc.replyKodata["clickHandler"];
                                                    cmodelarray.push(xcm);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }

                                                return true;
                                            };
                                            //populate cmodelarray using datcomplete.commentcolxn
                                            Enumerable.From(dcmntscolxn).OrderByDescending(function (x) { return x.updatedAt }).ForEach(function (dcmt) { return makecomment(dcmt) });
                                        };
                                        populatecontentmodelcolxn(xr.dcmntscolxn);
                                        var btntext = prweb.toPluralText(cmodelarray.length, 'Reply', true, "Replies");
                                        datFiveResponseFeedSvc.replyKodata.commentsbtntext(btntext);
                                        datFiveResponseFeedSvc.replyKodata['commentCount'](btntext);
                                        datFiveResponseFeedSvc.replyKodata["commentFeedColxn"](cmodelarray);
                                        datFiveResponseFeedSvc.replyKodata["showCommentFeedHost"]();
                                        return true;
                                    }
                                    catch (ex) {
                                        var wtf = true;
                                        return Parse.Promise.as(ex);
                                    }

                                });
                            } else {
                                return Parse.Promise.as(false);
                            }
                        }
                        catch (ex) {
                            var wtf = true;
                            return Parse.Promise.as(false);
                        }
                    },
                    verbatimReplyPostHandler: function (xmsg, bindingContext) {
                        datFiveResponseFeedSvc.pnl["IsVerbatimReply"] = false;
                        var replyKodata = datFiveResponseFeedSvc.replyKodata;
                        if (replyKodata) {
                            var addcomment = function (msg) {
                                try {
                                    //var xcm = bindingContext.$data.pnl.newcontentmodel();//added in CommentFeed1 binding...we can use it for this...
                                    //xcm.pnl = bindingContext.$data.pnl;
                                    //xcm.datcomplete = bindingContext.$data.pnl.datcomplete;
                                    //xcm.clickHandler = replyKodata["clickHandler"];
                                    //xcm.commentText(msg);
                                    //var url = self.mydatappVmx.parseuserphotourl();
                                    //xcm.elementImage(url);
                                    //var user = Parse.User.current().toJSON();
                                    //var xuser = self["userProfile"];
                                    //if (!(undefined == xuser)) {

                                    //    xcm.commentUser(xuser.userOwner.userName || user.username);
                                    //    xcm.commentUserId = user.objectId;
                                    //} else {
                                    //    xcm.commentUser(user.username);
                                    //    xcm.commentUserId = user.objectId;
                                    //}
                                    //dt = prweb.dateTime(Date.now());
                                    //xcm.anotherdate = dt;
                                    //xcm.sortabledate = new Date(Date.now());

                                    //xcm.updatedat = new Date(Date.now()).toISOString();
                                    //xcm.commentDate(prweb.timeAgoFromParseTime(xcm.updatedat));
                                    //TODO:this commentFeedColxn needs to be associated with the response/reply kodata....
                                    //TODO: the response/reply needs a commentFeedColxn displayed underneath it...
                                    //var cmodelarray = replyKodata["commentFeedColxn"]();
                                    //cmodelarray.push(xcm);
                                    //var xcmarray = Enumerable.From(cmodelarray).OrderByDescending(function (x) {
                                    //    return x.anotherdate;
                                    //}).ToArray();
                                    //replyKodata['commentCount'](prweb.toPluralText(xcmarray.length, 'Reply', true, "Replies"));
                                    //replyKodata["commentFeedColxn"](xcmarray);

                                    var replyid = ko.unwrap(datFiveResponseFeedSvc.replyKodata.replyId);
                                    return prweb.parseManager.addReplyComment(replyid, msg).then(function (xr) {
                                        return xr;
                                    });
                                    //return Parse.Promise.as(xcm);
                                }
                                catch (ex) {
                                    var wtf = true;
                                    return Parse.Promise.as(ex.message);
                                }

                            };
                            return addcomment(xmsg).then(function (xr) {
                                datFiveResponseFeedSvc.retrieveComments(replyKodata);
                                //replyKodata["showCommentFeedHost"]();
                                
                                return xr;
                            });
                        } else {
                            return Parse.Promise.as(false);
                        }
                        
                    },
                    verbatimReplyEditPostHandler: function (xmsg, bindingContext) {
                        //alert("this feature coming soon!");
                        var updatecomment = function () {
                            //var xmsg = $("#commenttextarea").val();
                            datFiveResponseFeedSvc.pnl["IsVerbatimReplyEdit"] = false;
                            var dc = datFiveResponseFeedSvc.pnl["EditCommentObject"];
                            var parms = {
                                IsReplyComment: true,
                                replyId: dc.replyId,
                                objectId: dc.commentId,
                                commentOwnerId: dc.commentUserId,
                                commentmsg: xmsg//datid: pnl.datcomplete.objectId,
                            };
                            return prweb.parseManager.postEditDatComment(parms).then(function (xr) {
                                //pnl["retrieveComments"]();
                                return xr;
                            }).fail(function (ex) {
                                var wtf = true;
                            });
                        };
                        return updatecomment().then(function (xr) {
                            return xr;
                        });
                    },
                    replyClick: function (x, e) {
                        e.preventDefault();
                        e.stopPropagation();
                        e.cancelBubble = true;
                        datFiveResponseFeedSvc.replyKodata = x;
                        //datFiveResponseFeedSvc.replyKodata["showCommentFeedHost"]();
                        var pnl = pnlMgr.panel(prweb.datSingle1);
                        pnl["IsVerbatimReply"] = true;
                        pnl["showCommentEntry"]();
                        //alert("reply feature coming soon!");
                    },
                    showReplyCommentsClick:function (x, e) {
                        e.preventDefault();
                        e.stopPropagation();
                        e.cancelBubble = true;
                        return datFiveResponseFeedSvc.retrieveComments(x);
                    },
                    showMoreClick: function (x, e) {
                        e.preventDefault();
                        e.stopPropagation();
                        e.cancelBubble = true;
                        x.showmorebtntext(x.showMoreOrLess());
                    }
                };

                if (!ko.bindingHandlers.datFiveResponseFeed1) {
                    ko.bindingHandlers.datFiveResponseFeed1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = pnlMgr.panel(prweb.datSingle1);//bindingContext.$root.pnl;
                                datFiveResponseFeedSvc.newcontentmodel = bindingContext.$data.pnl.newcontentmodel;
                                datFiveResponseFeedSvc.pnl = bindingContext.$data.pnl;
                                datFiveResponseFeedSvc.datcomplete = bindingContext.$data.pnl.datcomplete;
                                bindingContext.$data["seeMe"] = ko.observable("This is seeMe test");
                                bindingContext.$data["responseFeedElemColxn"] = ko.observableArray();//["test1", "test2"]
                                bindingContext.$data['responseCount'] = ko.observable(0);
                                bindingContext.$data['respondentsUniqueCount'] = ko.observable("loading respondents...");
                                //pnl.panelprops()['initScrollRoot']("scrollTo", $(elem), {scrollInertia:3000})
                                bindingContext.$data["datableImage"] = ko.observable(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url());
                                var yes = true;

                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datFiveResponseFeed1.init catch exception " + ex.Message);
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            //MORE GENERALLY: This creates DataContext for datSingle1
                            //this needs to put dat model in the contentmodels for the datSingle1 panel
                            var dc = bindingContext.$root.pnl.datacontext() || false;
                            datFiveResponseFeedSvc.ReponsesVisibilityMgr(bindingContext);
                            if (dc != false && datFiveResponseFeedSvc.responsesVisible) {
                                try {

                                    var pnl = bindingContext.$root.pnl;

                                    //MORE GENERALLY: This creates DataContext for somepanel.responsefeedcolxn
                                    var cmodelarray = [];
                                    var cmodel = function () {
                                        var that = {
                                            dat: null,
                                            //datcomplete: null,
                                            datId: null,
                                            presenterT: "datFiveResponseFeedElem1",
                                            datableImage: ko.observable(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()),
                                            isCircle: ko.observable(false),
                                            isNotCircle: ko.observable(true),
                                            updatedat: null,
                                            //sortabledate: null,
                                            anotherdate: null,
                                            userOwner: false,
                                            responseObjectId: ko.observable(),
                                            responseDate: ko.observable(),
                                            respondentFollowersCount: ko.observable(),
                                            respondentFollowersText: ko.observable(" Followers"),
                                            elementImage: ko.observable(),
                                            responseImage: ko.observable(),
                                            respondentUser: ko.observable("Guest"),
                                            respondentsUniqueCount: ko.observable(),
                                            verbatimText: ko.observable(),
                                            hasVerbatimText: ko.observable(false),
                                            showVebatimText: ko.observable(false),
                                            verbatimTextReplyHandler: datFiveResponseFeedSvc.replyClick,
                                            verbatimTextShowMoreHandler: datFiveResponseFeedSvc.showMoreClick,
                                            verbatimTextShowReplyCommentsHandler: datFiveResponseFeedSvc.showReplyCommentsClick,
                                            replybtntext: ko.observable("Reply"),
                                            showmorebtntext: ko.observable(""),
                                            commentsbtntext: ko.observable(),
                                            replyMetadata: ko.observable(),
                                            dispose: false
                                        };
                                        return that;
                                    };
                                    var populatecontentmodelcolxn = function (drespcolxn) {
                                        var rateiscircle = pnl.datcomplete.countables[0].isCircle;
                                        var toVerbatimVmx = function (xcm, dresprow) {
                                            try {
                                                if (dresprow.responsesummary[0].verbatimText[0]) {
                                                    xcm.replyId = dresprow.responsesummary[0].verbatimText[0].id;

                                                    var toCommentsCount = function () {
                                                        var rslt = 0;
                                                        try {
                                                            xcm.replyMetadata(dresprow.responsesummary[0].verbatimText[0].replyMetadata);
                                                            rslt = dresprow.responsesummary[0].verbatimText[0].replyMetadata.comments || 0;
                                                        }
                                                        catch (ex) {
                                                            var wtf = true;
                                                        }
                                                        return rslt;
                                                    }
                                                    xcm.commentsbtntext(prweb.toPluralText(toCommentsCount(), "Reply", true, "Replies"));
                                                    xcm.showmorebtntext();
                                                    xcm.verbatimText(dresprow.responsesummary[0].verbatimText[0].verbatimText);
                                                    xcm.hasVerbatimText(true);
                                                    if (xcm.verbatimText() || false) {
                                                        xcm.showmorebtntext("Show more...");
                                                    }
                                                } else {
                                                    xcm.showmorebtntext("");
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                        };
                                        var makeresponse = function (dresprow) {
                                            var xcm = cmodel();
                                            
                                            var lastresponse = dresprow.responsesummary[0];
                                            var lastrespdate = lastresponse.dates[0];
                                            xcm.responseObjectId(lastresponse.dceid);

                                            xcm.isCircle(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                                            xcm.isNotCircle(!rateiscircle)
                                            //xcm.datcountableitemholder(makedatcountableitemholder(xcm, dresprow));

                                            xcm.responseDate(prweb.timeAgoFromParseTime(lastrespdate));
                                            xcm.elementImage(prweb.toOwnerImgUrl(dresprow.userOwner.owner));
                                            //();
                                            xcm.respondentFollowersCount(dresprow.userOwner.followers);
                                            if (dresprow.userOwner.followers == 1) {
                                                xcm.respondentFollowersText(" Follower");
                                            }
                                            xcm.respondentUser(dresprow.userOwner.userName);
                                            xcm.userOwner = dresprow.userOwner;
                                            toVerbatimVmx(xcm, dresprow);
                                            //xcm.anotherdate = prweb.dateTime(dresprow.updatedAt);
                                            //xcm.updatedat = dresprow.updatedAt;
                                            cmodelarray.push(xcm);
                                            return true;
                                        };
                                        //populate cmodelarray using datcomplete.commentcolxn
                                        Enumerable.From(drespcolxn).Where(function (wx) {
                                            var lastresponse = wx.responsesummary[0];
                                            var lastrespdate = lastresponse.dates[0];
                                            var rslt = (lastresponse.dceid == bindingContext.$data.dceId);
                                            return rslt;
                                        })
                                            .OrderByDescending(function (x) {

                                            return x.updatedAt
                                            })
                                            .ForEach(function (dresp) { return makeresponse(dresp) });

                                        return cmodelarray;
                                    };
                                    //var firstfew = dc["datviewedobject"][0];//this was populated by datViewed cloud call in datSingle binding..
                                    var bc = bindingContext.$data;
                                    var datid = dc["datId"];
                                    var parms = {
                                        datid: datid,
                                        dceid: bc.dceId,
                                        limit: 20,
                                        skip: 0
                                    };
                                    return prweb.parseManager.getdatRepondentsList(parms).then(function (rxr) {
                                        var allrespondents = [];
                                        var xr = rxr[0];
                                        if (xr.currentUser.hasOwnProperty('responsesummary')) {
                                            var cuarray = [];
                                            cuarray.push(xr.currentUser);
                                            allrespondents = Enumerable.From(cuarray).Union(xr.otherRespondents).OrderBy(function (x) {
                                                var rs = x.responsesummary[0];
                                                return new Date(rs.dates[0]);
                                            }).ToArray();
                                        } else {
                                            allrespondents = Enumerable.From(xr.otherRespondents).OrderBy(function (x) {
                                                var rs = x.responsesummary[0];
                                                return new Date(rs.dates[0]);
                                            }).ToArray(); //firstfew.otherRespondents;
                                        }

                                        var cmdlcolxn = populatecontentmodelcolxn(allrespondents);//firstfew.otherRespondents);
                                        bindingContext.$data["responseFeedElemColxn"](cmdlcolxn);
                                        bindingContext.$data['respondentsUniqueCount'](cmdlcolxn.length + ' unique respondents');
                                        return true;
                                    });
                                    //var allrespondents = Enumerable.From(cuarray).Union(firstfew.otherRespondents).ToArray();

                                    //var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    //if (isr != false) {
                                    //    $(isr).mCustomScrollbar('scrollTo', '-=100');
                                    //    //$(isr).mCustomScrollbar("update");
                                    //    var yes = true;
                                    //}


                                    //TODO: ALL THIS BELOW NEEDS TO GO IN THE SCROLLABLE ON SCROLL HANDLER FOR RESPONSES...
                                    //set SKIP to ["responseFeedElemColxn"]().length...
                                    //prweb.parseManager.getdatRepondentsList({limit: 6, skip: 0, datid: dc.dat.objectId}).then(function (dresponses) {
                                    //    var cmdlcolxn = populatecontentmodelcolxn(dresponses[0].otherRespondents);
                                    //    pnl.panelprops()["responseFeedElemColxn"](cmdlcolxn);
                                    //    pnl.panelprops()['respondentsUniqueCount'](cmdlcolxn.length + ' unique respondents');
                                    //}).fail(function (ex) {
                                    //    pnl.contentmodelcolxn(cmodelarray);
                                    //    prweb.log("prweb.datwebappmain.datSingle1.init parseManager.getdatRepondentsList error callback... " + ex.toString());
                                    //});
                                }
                                catch (ex) {
                                    prweb.log("prweb.datwebappmain.datSingle1.init catch exception... " + ex.Message);
                                }
                            } else if (dc != false && !datFiveResponseFeedSvc.responsesVisible) {
                                bindingContext.$data['respondentsUniqueCount'](datFiveResponseFeedSvc.responsesVisibleTextOnFalse);
                            }

                        }
                    };
                };
                if (!ko.bindingHandlers.datFiveResponseFeedElem1) {
                    ko.bindingHandlers.datFiveResponseFeedElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            //bindingContext.$data.pnl.newcontentmodel
                            bindingContext.$data["commentFeedColxn"] = ko.observableArray();
                            bindingContext.$data['commentCount'] = ko.observableArray();
                            bindingContext.$data["showReplyCommentFeed"] = ko.observable(false);
                                                                       
                            bindingContext.$data["showHideHandler"] = function (x, e) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.cancelBubble = true;
                                bindingContext.$data["hideCommentFeedHost"]();
                            }
                            bindingContext.$data["clickHandler"] = function (x, y, z) {

                            }
                            bindingContext.$data["showCommentFeedHost"] = function () {
                                bindingContext.$data["showReplyCommentFeed"](true);
                                $(".showreplycommentsbtn", $(elem)).hide(300);
                                $(".datFiveResponseFeedElem1commentfeedhost", $(elem)).show(300);
                                
                                
                            };
                            bindingContext.$data["hideCommentFeedHost"] = function () {
                                $(".showreplycommentsbtn", $(elem)).show(300);
                                $(".datFiveResponseFeedElem1commentfeedhost", $(elem)).hide(300, function () {
                                    bindingContext.$data["showReplyCommentFeed"](false);
                                    
                                });
                            };

                            bindingContext.$data["showMoreOrLess"] = function () {
                                var verbtxt = $(".verbatimText", $(elem));
                                var rslt = "";
                                if (bindingContext.$data.verbatimText() || false) {
                                    if (verbtxt.hasClass('datellipsis')) {
                                        rslt = "Show less...";
                                    } else {
                                        rslt = "Show more...";
                                    }
                                }
                                verbtxt.hide(100, function () {
                                    if (verbtxt.hasClass('datellipsis')) {
                                        verbtxt.removeClass('datellipsis').addClass('dattextbold').addClass('dattextsmall').show(100);
                                        return "Show less...";
                                    } else {
                                        verbtxt.addClass('datellipsis').show(100);
                                        return "Show more...";
                                    }
                                });
                                return rslt;
                                
                            };
                            
                            
                            
                            return;//you gonna have a handler for showing userprofile...for the user your $data says you are...
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#endregion datFiveResponseFeed1
                //#region dat115
                if (!ko.bindingHandlers.dat115) {
                    ko.bindingHandlers.dat115 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var toPnl = function () {
                            //    return Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                            //        var isone = (p.presenterT == prweb.datSingle1 || p.presenterT == prweb.datInvite1 || p.presenterT == prweb.datInviteMember1);
                            //        return p.iscurrent == true && isone
                            //    }).FirstOrDefault();
                            //};
                            var pnl = pnlMgr.panel(prweb.datSingle1);// toPnl();//pnlMgr.panel(prweb.datSingle1) || pnlMgr.panel(prweb.datInvite1);
                            bindingContext.$data["pnl"] = pnl;
                            bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                            bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                var mymodel = ko.dataFor(elem[1]);
                                var T = "." + "datFiveResponseFeed1";
                                var echild = $(T, $(elem[1]));
                                ko.applyBindings(mymodel, echild[0]);
                                return;
                            },
                            bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                            bindingContext.$data["responsefeedhtml"] = ko.observable();
                            var isseestory = bindingContext.$data["seeStoryUrl"] || false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            
                            //#region IsClosedUserVotableMgr
                            var isUserHasVoted = false;
                            var IsClosedUserVotableMgr = function () {
                                var isUserAllowedToVote = function () {
                                    var rslt = true;
                                    try {
                                        var toIsVotable = function () {
                                            var rslt = {
                                                "isVotable": false
                                            };
                                            try {
                                                var pnl = pnlMgr.panel(prweb.datSingle1);
                                                var status = pnl.datcomplete.statusObject || false;
                                                var so = pnl.datcomplete.shareOptions || false;
                                                if (so && status) {
                                                    Enumerable.From(status).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    Enumerable.From(so).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    if (!(rslt["IsClosed"])) {
                                                        rslt["isVotable"] = true;//!(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                    } else {
                                                        alert("This 'dat is closed.");
                                                    }

                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt["isVotable"];
                                        };
                                        rslt = toIsVotable();
                                    }
                                    catch (ex) { }
                                    return rslt;
                                };
                                var me = {
                                    isPermitted: function (displayui) {
                                        var rslt = isUserAllowedToVote();
                                        if (displayui) {
                                            me.displayUI(rslt);
                                        }
                                        return rslt;
                                    },
                                    displayUI: function (xispermitted) {

                                        if (!xispermitted) {
                                            $(".datselectoritem img", $(elem)).addClass("uservotingisnotpermited");
                                        }
                                    },
                                    updateWithDatViewedObject: function (responsesummary) {
                                        //this is called by datSingle datViewed...
                                        if (ko.unwrap(responsesummary.kodata.xhasUserVoted)) {
                                            var dceid = bindingContext.$data.modelcore.dcelementId;
                                            var matched = Enumerable.From(responsesummary.allResponses)
                                                .Where(function (r) { return r.dceid == dceid })
                                                .Select(function (xr) { return xr; }).ToArray();
                                            if (matched.length > 0) {
                                                isUserHasVoted = true;
                                                bindingContext.$data["lastReplyObject"] = matched[0];
                                                bindingContext.$data["replyId"] = matched[0].verbatimText[0].id;
                                                var verbtext = matched[0].verbatimText[0].verbatimText;
                                                $(".dat115textareaeditable", $(elem)).first().val(verbtext);
                                            }
                                            bindingContext.$data["ownerReplyObjectColxn"] = matched || 0;
                                        }
                                        me.isPermitted(true);
                                    },
                                    dispose: false
                                };
                                return me;
                            };
                            bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;//is a function...not executed here...
                            IsClosedUserVotableMgr().isPermitted(true);
                            //#endregion
                            var toUserHasVotedUI = function () {
                                var xx = $(".img-circle", $(elem));
                                xx.removeClass("hasuservoted");
                            };
                            //#region TAP RESPONSES BUTTON
                            var isresponsefeedvisible = false;
                            var ismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                            isresponsefeedvisible = pnl.datacontext()["datfiveresponsefeedid"] == ismevisible;
                            var refreshResponses = function (isaftervote) {
                                var animspeed = 200;
                                var newVmx = {
                                    html: ko.observable(prweb.pCElemHtmlDxnry["datFiveResponseFeed1"].resourceModel),
                                    dceId: ismevisible,
                                    pnl: pnl//getdatRespondentsList is updateTarget for server...could query by dceid
                                }
                                bindingContext.$data["responsefeedcolxn"]([newVmx]);

                                $(".dat5responsefeedcontainer", $(elem)).show(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        //$(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        //$(isr).mCustomScrollbar('scrollTo', '-=200');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });
                                $(".datcommentfeedgadget").hide(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        $(isr).mCustomScrollbar('scrollTo', '-=100');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });
                            };
                            if (pnl.datacontext()["fromT"] !== prweb.datFeed1) {
                                if (isresponsefeedvisible && pnl.datacontext()["datviewedobject"]) {
                                    refreshResponses();
                                }
                            }

                            bindingContext.$data["tapdatresponsesbtn"] = function (root, xxx, e) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.cancelBubble = true;
                                
                                    var animspeed = 200;
                                    if (!isresponsefeedvisible) {
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        ismevisible = root.modelcore.dcelementId;
                                        refreshResponses();
                                    } else {
                                        $(".datcommentfeedgadget").show(animspeed, function () {
                                            var isr = pnl.panelprops()['initScrollRoot'] || false;
                                            if (isr != false) {
                                                $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                                $(isr).mCustomScrollbar('scrollTo', '-=100');
                                                //$(isr).mCustomScrollbar("update");
                                                var yes = true;
                                            }
                                        });
                                        $(".datresponsefeedcontainer", e).hide(animspeed);
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        bindingContext.$data["responsefeedcolxn"]([]);//removes html...
                                        //show the commentfeed

                                    }
                                    if (isresponsefeedvisible) {
                                        var xismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                                        pnl.datacontext()["datfiveresponsefeedid"] = xismevisible;
                                    }
                                
                                
                            };
                            //#endregion
                            //#region BUTTON HANDLER tapdatSelector POST 
                            bindingContext.$data["tapdatSelector"] = function (xdata, e) {
                                try {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.cancelBubble = true;
                                    var pnl = pnlMgr.panel(prweb.datSingle1);
                                    var isUserAllowedToVote = function () {
                                        var rslt = true;
                                        try {
                                            var toIsVotable = function () {
                                                var rslt = {
                                                    "isVotable": false
                                                };
                                                try {
                                                    var status = pnl.datcomplete.statusObject || false;
                                                    var so = pnl.datcomplete.shareOptions || false;
                                                    if (so && status) {
                                                        Enumerable.From(status).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        Enumerable.From(so).ForEach(function (prop) {
                                                            rslt[prop.Key] = prop.Value;
                                                        });
                                                        //isUserHasVoted = rslt["IsUserHasVoted"];
                                                        if (!(rslt["IsClosed"])) {
                                                            rslt["isVotable"] = true;// !(rslt["IsUserHasVoted"]);// && rslt["isSingleVote"]
                                                        } else {
                                                            alert("This 'dat is closed.");
                                                        }
                                                    }
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt["isVotable"];
                                            };
                                            rslt = toIsVotable();
                                        }
                                        catch (ex) { }
                                        return rslt;
                                    };
                                    var isPermitted = isUserAllowedToVote();
                                    if (isPermitted) {
                                        var parms = {};
                                        parms["datobjectId"] = pnl.datcomplete.objectId;
                                        if (isUserHasVoted) {
                                            parms["replyId"] = bindingContext.$data["replyId"]
                                            parms["responseCount"] = 0;
                                            parms["isRevision"] = true;
                                        } else {
                                            parms["responseCount"] = 1;
                                        }
                                        parms["dceid"] = xdata.modelcore.dcelementId;
                                        parms["verbatimText"] = $(".dat115textareaeditable", $(elem)).first().val();
                                        toUserHasVotedUI();
                                        var setVotedUi = function () {
                                            var $e = $(this);
                                            if ($e.hasClass("datselectoritem")) {
                                                //$(".img-circle", $e).addClass("hasuservoted");
                                            } else {
                                                //$e.addClass("hasuservoted");
                                            }

                                            var x = 2;
                                        };
                                        setVotedUi();
                                        IsClosedUserVotableMgr().displayUI(false);
                                        var updateResponses = function (cntbles) {
                                            try {
                                                var pnlcntbles = bindingContext.$data.pnl.contentmodelcolxn();
                                                var xcntbles = cntbles || [];
                                                var rslt = 0;
                                                Enumerable.From(xcntbles).ForEach(function (c) {
                                                    Enumerable.From(pnlcntbles)
                                                        .Where(function (wc) {
                                                            return wc.objectId == c.objectId;
                                                        })
                                                        .ForEach(function (pc) {
                                                            var rc = ko.unwrap(c.modelcore.responseCount);
                                                            var rp = ko.unwrap(c.modelcore.responsePercent);
                                                            pc.modelcore.responseCount(rc);
                                                            pc.modelcore.responsePercent(rp);
                                                        });
                                                    rslt += ko.unwrap(c.modelcore.responseCount);
                                                });
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt;
                                        };
                                        var xvoterslt = pnl["datPageEntry"].voteHandler(xdata, xdata.modelcore.dcelementId);
                                        var totalresponses = updateResponses(xvoterslt);
                                        var xdc = pnl.datacontext();
                                        xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                        return prweb.parseManager.updateDatResults(parms).then(function (rslt) {
                                            try {
                                                //rslt is a datfeedelement...
                                                var dc = pnl.datacontext();
                                                dc["updatedAt"]("Updated " + prweb.timeAgoFromParseTime(rslt.updatedAt));
                                                $('.dat115answerhost', $(elem)).hide(500);
                                                pnlMgr.appPositionRefresh();
                                                if (rslt.totalResponses != totalresponses) {
                                                    updateResponses(pnl["datPageEntry"].makepgobj(rslt));
                                                }
                                                pnlMgr.panel(prweb.datFeed1)["feedElementUpdate"](rslt, false);//feedElement
                                                if (isresponsefeedvisible) {
                                                    refreshResponses(true);
                                                }
                                            }
                                            catch (ex) {
                                                var no = true;
                                                pnlMgr.appPositionRefresh();
                                            }

                                            return true;
                                        }).fail(function (ex) {
                                            var no = true;
                                            pnlMgr.appPositionRefresh();
                                        });
                                    } else {

                                    }
                                }
                                catch (ex) {
                                    var no = true;
                                    pnlMgr.appPositionRefresh();
                                }
                            };
                            //#endregion
                            bindingContext.$data["tapdatCancel"] = function (xdata, e) {
                                try {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.cancelBubble = true;
                                    $(".dat115textareaeditable", $(elem)).first().val("");
                                }
                                catch (ex) { }
                            };
                            bindingContext.$data["hideShowVerbatimBox"] = function (xdata, e) {
                                try {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.cancelBubble = true;
                                    if ($(e.currentTarget).hasClass("hideShowVerbatimbtn")) {
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        $(".dat115answerhost .dat115answerholder", $(elem)).children().hide(300);
                                        $(".dat115answerhost", $(elem)).css('padding-left', '2em').css('padding-right', '2em');
                                    }
                                    if ($(e.currentTarget).hasClass("dat115answerhost")) {
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        $(".dat115answerhost .dat115answerholder", $(elem)).children().show(300);
                                        $(".dat115answerhost", $(elem)).css('padding', '0.5em');
                                    }
                                    
                                }
                                catch (ex) {
                                    var wtf = true;
                                }
                            };
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion dat115
                //#region dat125
                if (!ko.bindingHandlers.dat125) {
                    ko.bindingHandlers.dat125 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var toPnl = function () {
                            //    return Enumerable.From(self.mydatappVmx.apppanelcolxn()).Where(function (p) {
                            //        var isone = (p.presenterT == prweb.datSingle1 || p.presenterT == prweb.datInvite1 || p.presenterT == prweb.datInviteMember1);
                            //        return p.iscurrent == true && isone
                            //    }).FirstOrDefault();
                            //};
                            var pnl = pnlMgr.panel(prweb.datSingle1);//toPnl();//pnlMgr.panel(prweb.datSingle1) || pnlMgr.panel(prweb.datInvite1);
                            bindingContext.$data["pnl"] = pnl;
                            bindingContext.$data["xhasUserVoted"] = ko.observable(false);
                            bindingContext.$data["widgetizedatFiveResponseFeed"] = function (elem, model) {
                                var mymodel = ko.dataFor(elem[1]);
                                var T = "." + "datFiveResponseFeed1";
                                var echild = $(T, $(elem[1]));
                                ko.applyBindings(mymodel, echild[0]);
                                return;
                            },
                            bindingContext.$data["responsefeedcolxn"] = ko.observableArray();
                            bindingContext.$data["responsefeedhtml"] = ko.observable();
                            var isseestory = bindingContext.$data["seeStoryUrl"] || false;
                            bindingContext.$data["isSeeStory"] = ko.observable((isseestory !== false));
                            //#region IsClosedUserVotableMgr
                            var isUserHasVoted = false;
                            var IsClosedUserVotableMgr = function () {
                                var isUserAllowedToVote = function () {
                                    var rslt = true;
                                    try {
                                        var toIsVotable = function () {
                                            var rslt = {
                                                "isVotable": false
                                            };
                                            try {
                                                var pnl = pnlMgr.panel(prweb.datSingle1);
                                                var status = pnl.datcomplete.statusObject || false;
                                                var so = pnl.datcomplete.shareOptions || false;
                                                if (so && status) {
                                                    Enumerable.From(status).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    Enumerable.From(so).ForEach(function (prop) {
                                                        rslt[prop.Key] = prop.Value;
                                                    });
                                                    if (!(rslt["IsClosed"])) {
                                                        rslt["isVotable"] = !(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                    } else {
                                                        alert("This 'dat is closed.");
                                                    }

                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return rslt["isVotable"];
                                        };
                                        rslt = toIsVotable();
                                    }
                                    catch (ex) { }
                                    return rslt;
                                };
                                var me = {
                                    isPermitted: function (displayui) {
                                        var rslt = isUserAllowedToVote();
                                        if (displayui) {
                                            me.displayUI(rslt);
                                        }
                                        return rslt;
                                    },
                                    displayUI: function (xispermitted) {

                                        if (!xispermitted) {
                                            $(".datselectoritem img", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                            $(".dat125selectorglpyh", $(elem)).addClass("uservotingisnotpermited").addClass("datrounded");
                                        }
                                    },
                                    updateWithDatViewedObject: function (responsesummary) {
                                        if (ko.unwrap(responsesummary.kodata.xhasUserVoted)) {
                                            isUserHasVoted = true;
                                            $(".dat125selectorglpyh", $(elem)).removeClass('glyphicon-unchecked').addClass('glyphicon-check');
                                        } else {
                                            
                                        }
                                        me.isPermitted(true);
                                    },
                                    dispose: false
                                };
                                return me;
                            };
                            bindingContext.$data["IsClosedUserVotableMgr"] = IsClosedUserVotableMgr;//is a function...not executed here...
                            IsClosedUserVotableMgr().isPermitted(true);
                            //#endregion
                            var toUserHasVotedUI = function () {
                                var xx = $(".img-circle", $(elem));
                                xx.removeClass("hasuservoted");
                                //var xx = $(".datsingle1elem .img-circle", $("#scrollrootdatSingle1"));
                                //$(".datsingle1elem .img-circle", $("#scrollrootdatSingle1")).removeClass("hasuservoted");
                            };
                            //#region TAP RESPONSES BUTTON
                            var isresponsefeedvisible = false;
                            var ismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                            isresponsefeedvisible = pnl.datacontext()["datfiveresponsefeedid"] == ismevisible;
                            var refreshResponses = function (isaftervote) {
                                var animspeed = 200;
                                var newVmx = {
                                    html: ko.observable(prweb.pCElemHtmlDxnry["datFiveResponseFeed1"].resourceModel),
                                    dceId: ismevisible,
                                    pnl: pnl//getdatRespondentsList is updateTarget for server...could query by dceid
                                }
                                bindingContext.$data["responsefeedcolxn"]([newVmx]);

                                $(".dat5responsefeedcontainer", $(elem)).show(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        //$(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        //$(isr).mCustomScrollbar('scrollTo', '-=200');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });
                                $(".datcommentfeedgadget").hide(animspeed, function () {
                                    var isr = pnl.panelprops()['initScrollRoot'] || false;
                                    if (isr != false) {
                                        $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                        $(isr).mCustomScrollbar('scrollTo', '-=100');
                                        //$(isr).mCustomScrollbar("update");
                                        var yes = true;
                                    }
                                });
                                
                            };
                            if (pnl.datacontext()["fromT"] !== prweb.datFeed1) {
                                if (isresponsefeedvisible && pnl.datacontext()["datviewedobject"]) {
                                    refreshResponses();
                                }
                            }
                            bindingContext.$data["tapdatresponsesbtn"] = function (root, xxx, e) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.cancelBubble = true;
                                
                                    var animspeed = 200;
                                    if (!isresponsefeedvisible) {
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        ismevisible = root.modelcore.dcelementId;
                                        refreshResponses();
                                    } else {
                                        $(".datcommentfeedgadget").show(animspeed, function () {
                                            var isr = pnl.panelprops()['initScrollRoot'] || false;
                                            if (isr != false) {
                                                $(isr).mCustomScrollbar('scrollTo', '#datresponsefeedholder');
                                                $(isr).mCustomScrollbar('scrollTo', '-=100');
                                                //$(isr).mCustomScrollbar("update");
                                                var yes = true;
                                            }
                                        });
                                        $(".datresponsefeedcontainer", e).hide(animspeed);
                                        isresponsefeedvisible = !isresponsefeedvisible;
                                        bindingContext.$data["responsefeedcolxn"]([]);//removes html...
                                        //show the commentfeed

                                    }
                                    if (isresponsefeedvisible) {
                                        var xismevisible = bindingContext.$data["modelcore"]["dcelementId"];
                                        pnl.datacontext()["datfiveresponsefeedid"] = xismevisible;
                                    }
                                
                            };
                            //#endregion
                            //#region BUTTON HANDLER tapdatSelector VOTE
                            var tapinProgress = false;
                            bindingContext.$data["tapdatSelector"] = function (root, selectedCountable, e) {
                                try {
                                    e.preventDefault();
                                    e.cancelBubble = true;
                                    if (!tapinProgress) {
                                        tapinProgress = true;
                                        var pnl = pnlMgr.panel(prweb.datSingle1);
                                        var isUserAllowedToVote = function () {
                                            var rslt = true;
                                            try {
                                                var toIsVotable = function () {
                                                    var rslt = {
                                                        "isVotable": false
                                                    };
                                                    try {
                                                        var status = pnl.datcomplete.statusObject || false;
                                                        var so = pnl.datcomplete.shareOptions || false;
                                                        if (so && status) {
                                                            Enumerable.From(status).ForEach(function (prop) {
                                                                rslt[prop.Key] = prop.Value;
                                                            });
                                                            Enumerable.From(so).ForEach(function (prop) {
                                                                rslt[prop.Key] = prop.Value;
                                                            });
                                                            if (!(rslt["IsClosed"])) {
                                                                rslt["isVotable"] = true;//!(rslt["IsUserHasVoted"] && rslt["isSingleVote"]);
                                                            } else {
                                                                alert("This 'dat is closed.");
                                                            }

                                                        }
                                                    }
                                                    catch (ex) {
                                                        var wtf = true;
                                                    }
                                                    return rslt["isVotable"];
                                                };
                                                rslt = toIsVotable();
                                            }
                                            catch (ex) { }
                                            return rslt;
                                        };
                                        var isPermitted = isUserAllowedToVote();
                                        if (isPermitted) {
                                            var parms = {};
                                            parms["datobjectId"] = pnl.datcomplete.objectId;
                                            
                                            parms["dceid"] = selectedCountable.modelcore.dcelementId;

                                            toUserHasVotedUI();
                                            var setVotedUi = function () {
                                                var $e = $(e.target);
                                                //if ($e.hasClass("datselectoritem")) {
                                                //    $(".img-circle", $e).addClass("hasuservoted").addClass("datrounded");
                                                //} else {
                                                //    $e.addClass("hasuservoted").addClass("datrounded");
                                                //}
                                                var xxx = $(".dat125selectorglpyh", $(elem));
                                                if (xxx.hasClass('glyphicon-check')) {
                                                    parms["responseCount"] = -1;
                                                    xxx.removeClass('glyphicon-check').addClass('glyphicon-unchecked');
                                                    $e.removeClass("hasuservoted").removeClass("datrounded");
                                                } else {
                                                    parms["responseCount"] = 1;
                                                    xxx.removeClass('glyphicon-unchecked').addClass('glyphicon-check');
                                                    $e.addClass("hasuservoted").addClass("datrounded");
                                                }
                                                
                                                var x = 2;
                                            };
                                            setVotedUi();
                                            IsClosedUserVotableMgr().displayUI(false);
                                            var updateResponses = function (cntbles) {
                                                try {
                                                    var pnlcntbles = bindingContext.$data.pnl.contentmodelcolxn();
                                                    var xcntbles = cntbles || [];
                                                    var rslt = 0;
                                                    Enumerable.From(xcntbles).ForEach(function (c) {
                                                        Enumerable.From(pnlcntbles)
                                                            .Where(function (wc) {
                                                                return wc.objectId == c.objectId;
                                                            })
                                                            .ForEach(function (pc) {
                                                                var rc = ko.unwrap(c.modelcore.responseCount);
                                                                var rp = ko.unwrap(c.modelcore.responsePercent);
                                                                pc.modelcore.responseCount(rc);
                                                                pc.modelcore.responsePercent(rp);
                                                            });
                                                        rslt += ko.unwrap(c.modelcore.responseCount);
                                                    });
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                return rslt;
                                            };
                                            var xvoterslt = pnl["datPageEntry"].voteHandler(selectedCountable, selectedCountable.modelcore.dcelementId);
                                            var totalresponses = updateResponses(xvoterslt);
                                            var xdc = pnl.datacontext();
                                            xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                            return prweb.parseManager.updateDatResults(parms).then(function (rslt) {
                                                try {
                                                    var dc = pnl.datacontext();
                                                    dc["updatedAt"]("Updated " + prweb.timeAgoFromParseTime(rslt.updatedAt));
                                                    if (rslt.totalResponses != totalresponses) {
                                                        updateResponses(pnl["datPageEntry"].makepgobj(rslt));
                                                    }
                                                    pnlMgr.panel(prweb.datFeed1)["feedElementUpdate"](rslt, false);//feedElement
                                                    if (isresponsefeedvisible) {
                                                        refreshResponses(true);
                                                    }
                                                    setTimeout(function () {
                                                        tapinProgress = false;
                                                    }, 1000);
                                                }
                                                catch (ex) {
                                                    var no = true;
                                                }

                                                return true;
                                            }).fail(function (ex) {
                                                var no = true
                                            });
                                        } else {
                                            setTimeout(function () {
                                                tapinProgress = false;
                                            }, 1000);
                                        }
                                    } else {
                                        setTimeout(function () {
                                            tapinProgress = false;
                                        }, 1000);
                                    }
                                }
                                catch (ex) {
                                    var no = true;
                                }
                            };
                            //#endregion
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var xxval = valueAccessor();
                        }
                    };
                };
                //#endregion dat125

                //#region datResponseFeed1
                if (!ko.bindingHandlers.datResponseFeed1) {
                    ko.bindingHandlers.datResponseFeed1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$root.pnl;
                                pnl.panelprops()["seeMe"] = ko.observable("This is seeMe test");
                                pnl.panelprops()["responseFeedElemColxn"] = ko.observableArray();//["test1", "test2"]
                                pnl.panelprops()['responseCount'] = ko.observable(0);
                                pnl.panelprops()['respondentsUniqueCount'] = ko.observable("loading respondents...");
                                //pnl.panelprops()['initScrollRoot']("scrollTo", $(elem), {scrollInertia:3000})
                                bindingContext.$data["datableImage"] = ko.observable(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url());
                                var yes = true;
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datResponseFeed1.init catch exception " + ex.Message);
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            //MORE GENERALLY: This creates DataContext for datSingle1
                            //this needs to put dat model in the contentmodels for the datSingle1 panel
                            var dc = bindingContext.$root.pnl.datacontext() || false;
                            
                            //the contentmodel inserted here needs to be from datplayersvc...
                            if (dc != false) {
                                var updateView = function () {
                                    try {
                                        //$("#datresponsefeedholder").show(500);
                                        
                                        var pnl = bindingContext.$root.pnl;

                                        //MORE GENERALLY: This creates DataContext for somepanel.responsefeedcolxn
                                        var cmodelarray = [];
                                        var cmodel = function () {
                                            var that = {
                                                dat: null,
                                                //datcomplete: null,
                                                datId: null,
                                                presenterT: "datResponseFeedElem1",
                                                datableImage: ko.observable(prweb.pCElemHtmlDxnry["datBlue1"].resourceFile.url()),
                                                datcountableitemholder: ko.observableArray(),
                                                isCircle: ko.observable(false),
                                                isNotCircle: ko.observable(true),
                                                updatedat: null,
                                                //sortabledate: null,
                                                anotherdate: null,
                                                userOwner: false,
                                                responseObjectId: ko.observable(),
                                                responseDate: ko.observable(),
                                                respondentFollowersCount: ko.observable(),
                                                respondentFollowersText: ko.observable(" Followers"),
                                                elementImage: ko.observable(),
                                                responseImage: ko.observable(),
                                                respondentUser: ko.observable("Guest"),
                                                respondentsUniqueCount: ko.observable()
                                            };
                                            return that;
                                        };
                                        var populatecontentmodelcolxn = function (drespcolxn) {
                                            var rateiscircle = pnl.datcomplete.countables[0].isCircle;
                                            var makedatcountableitemholder = function (cmdl, resprow) {

                                                var datable = pnl.contentmodelcolxn()[0];
                                                datable.datCountableItemRated1 = function () {
                                                    var rslt = false;
                                                    if (datable.modelcore.presenterT == "datRate1") {
                                                        rslt = datable.is5or10column;
                                                    }
                                                    return rslt;
                                                };
                                                var pnlpresenterT = datable.modelcore.presenterT;
                                                var lastresponse = resprow.responsesummary[0];
                                                var dce = Enumerable.From(pnl.datcomplete.countables).Where(function (r) {
                                                    return r.objectId == lastresponse.dceid;
                                                }).FirstOrDefault();
                                                //this viewmodel is ko.apply() in the panel panelentry... it is a method named widgetizeresponsecountable?
                                                var vmx = [{
                                                    presenterT: "",
                                                    responseImage: ko.observable(dce.emoji),
                                                    html: ko.observable(),
                                                    datCountableItemRated1: ko.observable(),
                                                    dce: dce,
                                                    wtfx: false,
                                                    isdatdatableVisible: false,
                                                    toDatableResponse: function (data, e) {
                                                        e.preventDefault();
                                                        e.cancelBubble = true;
                                                        var animspeed = 200;
                                                        if (vmx[0].isdatdatableVisible) {
                                                            $(".datable", $(e.target).parents()[0]).hide(animspeed);
                                                        } else {
                                                            $(".datable", $(e.target)).show(animspeed);
                                                        }
                                                        vmx[0].isdatdatableVisible = !vmx[0].isdatdatableVisible;
                                                    },
                                                    pnl: pnl
                                                }];
                                                if (datable.datCountableItemRated1()) {
                                                    var modeparams = {
                                                        countable: dce,
                                                        elementIndex: dce.elementIndex,
                                                        isDatCountableItemRated1: true
                                                    };
                                                    var newvmx = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage().init(dc.datcomplete, modeparams);
                                                    vmx[0].html(prweb.pCElemHtmlDxnry["datCountableItemRated1"].resourceModel);
                                                    vmx[0].datCountableItemRated1(newvmx[0]);
                                                    //newvmx[0]["debug"] = modeparams.elementIndex.toString() + resprow.userOwner.userName;
                                                    //var xxarray = newvmx[0].countableColxn
                                                    //var newarray  = Enumerable.From(xxarray).Select(function (c) {
                                                    //    if (c.elementIndex <= modeparams.elementIndex) {
                                                    //        c.isStarWinner = true;

                                                    //    }
                                                    //    c["dstarwinner"] = resprow.userOwner.userName;//modeparams.elementIndex;
                                                    //    return c;
                                                    //}).ToArray();
                                                    //newvmx[0].countableColxn = newarray;
                                                    //newvmx[0]["debugStarWinner"] = newvmx[0].countableColxn[modeparams.elementIndex].isStarWinner.toString();
                                                    //vmx[0].wtfx = ko.toJS(newvmx[0]);
                                                    //vmx[0]["params"] = modeparams.elementIndex;
                                                } else {
                                                    cmdl.responseImage(dce.emoji);
                                                    vmx[0].html(prweb.pCElemHtmlDxnry["datCountableItemEmoji1"].resourceModel);
                                                    var xyes = datable;// set the vmx so that classes attach to the html...in bindings...hide or show emoji etc...
                                                }
                                                return vmx;
                                            };
                                            var makeresponse = function (dresprow) {
                                                var xcm = cmodel();
                                                try { 
                                                var lastresponse = dresprow.responsesummary[0];
                                                var lastrespdate = lastresponse.dates[0];
                                                xcm.responseObjectId(lastresponse.dceid);
                                                xcm.isCircle(rateiscircle);//from pnl datcomplete countables...the host dat...has all the star circle rate model
                                                xcm.isNotCircle(!rateiscircle)
                                                xcm.datcountableitemholder(makedatcountableitemholder(xcm, dresprow));
                                                xcm["WTF"] = ko.toJS(xcm.datcountableitemholder);
                                                xcm.responseDate(prweb.timeAgoFromParseTime(lastrespdate));
                                                xcm.elementImage(prweb.toOwnerImgUrl(dresprow.userOwner.owner));
                                                //();
                                                xcm.respondentFollowersCount(dresprow.userOwner.followers);
                                                if (dresprow.userOwner.followers == 1) {
                                                    xcm.respondentFollowersText(" Follower");
                                                }
                                                xcm.respondentUser(dresprow.userOwner.userName);
                                                xcm.userOwner = dresprow.userOwner;
                                                cmodelarray.push(xcm);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                
                                                return true;
                                            };
                                            //populate cmodelarray using datcomplete.commentcolxn
                                            Enumerable.From(drespcolxn).OrderByDescending(function (x) {
                                                return x.updatedAt
                                            }).ForEach(function (dresp) { return makeresponse(dresp) });

                                            return cmodelarray;
                                        };
                                        //var firstfew = dc["datviewedobject"][0];//this was populated by datViewed cloud call in datSingle binding..
                                        var allrespondents = [];
                                        var datid = dc["datId"];
                                        var parms = {
                                            datid: datid,
                                            dceid: false,
                                            limit: 20,
                                            skip: 0
                                        };
                                        return prweb.parseManager.getdatRepondentsList(parms).then(function (rxr) {
                                            var allrespondents = [];
                                            var xr = rxr[0];
                                            if (xr.currentUser.hasOwnProperty('responsesummary')) {
                                                var cuarray = [];
                                                cuarray.push(xr.currentUser);
                                                allrespondents = Enumerable.From(cuarray).Union(xr.otherRespondents).OrderBy(function (x) {
                                                    var rs = x.responsesummary[0];
                                                    return new Date(rs.dates[0]);
                                                }).ToArray();
                                            } else {
                                                allrespondents = Enumerable.From(xr.otherRespondents).OrderBy(function (x) {
                                                    var rs = x.responsesummary[0];
                                                    return new Date(rs.dates[0]);
                                                }).ToArray(); //firstfew.otherRespondents;
                                            }
                                            
                                            var cmdlcolxn = populatecontentmodelcolxn(allrespondents);//firstfew.otherRespondents);
                                            $(".datcommentfeedgadget").hide(0);
                                            $("#datresponsefeedcontainer").show(0);
                                            pnl.panelprops()["responseFeedElemColxn"](cmdlcolxn);
                                            pnl.panelprops()['respondentsUniqueCount'](cmdlcolxn.length + ' unique respondents');
                                            return pnl;
                                        });



                                        //TODO: ALL THIS BELOW NEEDS TO GO IN THE SCROLLABLE ON SCROLL HANDLER FOR RESPONSES...
                                        //set SKIP to ["responseFeedElemColxn"]().length...
                                        //prweb.parseManager.getdatRepondentsList({limit: 6, skip: 0, datid: dc.dat.objectId}).then(function (dresponses) {
                                        //    var cmdlcolxn = populatecontentmodelcolxn(dresponses[0].otherRespondents);
                                        //    pnl.panelprops()["responseFeedElemColxn"](cmdlcolxn);
                                        //    pnl.panelprops()['respondentsUniqueCount'](cmdlcolxn.length + ' unique respondents');
                                        //}).fail(function (ex) {
                                        //    pnl.contentmodelcolxn(cmodelarray);
                                        //    prweb.log("prweb.datwebappmain.datSingle1.init parseManager.getdatRepondentsList error callback... " + ex.toString());
                                        //});
                                    }
                                    catch (ex) {
                                        prweb.log("prweb.datwebappmain.datSingle1.init catch exception... " + ex.Message);
                                    }
                                }
                                return updateView().then(function (xpnl) {
                                    //$(".datcommentfeedgadget").hide(0);
                                    //$("#datresponsefeedcontainer").show(0);
                                    //var isr = xpnl.panelprops()['initScrollRoot'] || false;
                                    //var xtarget = $("#tapdatresponsesbutton");// datsinglecontentmodel tapdatresponsesbutton
                                    //$(isr).mCustomScrollbar('scrollTo', xtarget);
                                });
                            } else {
                                var pnl = bindingContext.$root.pnl;
                            }

                        }
                    };
                };
                if (!ko.bindingHandlers.datResponseFeedElem1) {
                    ko.bindingHandlers.datResponseFeedElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            // you also gonna have a handler for clicking on the emoji...it will show datDatableCountable? or datDatableTypes
                            
                            return;//you gonna have a handler for showing userprofile...for the user your $data says you are...
                        },
                        update: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            return;
                        }
                    };
                };
                //#endregion datCommentFeed1

                //#region datCommentFeed1
                if (!ko.bindingHandlers.datCommentFeed1) {
                    ko.bindingHandlers.datCommentFeed1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var pnl = bindingContext.$root;
                                pnl.panelprops()["seeMe"] = ko.observable("This is seeMe test");
                                pnl.panelprops()["commentFeedColxn"] = ko.observableArray();//["test1", "test2"]
                                pnl.panelprops()['commentCount'] = ko.observable("loading comments...");
                            }
                            catch (ex) {
                                prweb.log("prweb.datwebappmain.setUpPanelTBindings.datCommentFeed1.init catch exception " + ex.Message);
                            }
                        },
                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            //MORE GENERALLY: This creates DataContext for datSingle1
                            //this needs to put dat model in the contentmodels for the datSingle1 panel
                            var dc = bindingContext.$data.datacontext() || false;
                            //the contentmodel inserted here needs to be from datplayersvc...
                            if (dc != false) {
                                try {
                                    var pnl = bindingContext.$root;
                                    pnl["retrieveComments"] = function () {
                                        //MORE GENERALLY: This creates DataContext for somepanel.commentFeedColxn
                                        var cmodelarray = [];
                                        var cmodel = function () {
                                            var rslt = {};
                                            try {
                                                var that = {
                                                    pnl: pnl,
                                                    dat: null,
                                                    datcomplete: null,
                                                    datId: null,
                                                    presenterT: "datCommentElem1",
                                                    updatedat: null,
                                                    sortabledate: null,
                                                    anotherdate: null,
                                                    elementImage: ko.observable(),
                                                    commentId: false,
                                                    commentUserId: false,
                                                    commentUser: ko.observable("Guest"),
                                                    commentText: ko.observable("Thanks for making this 'Dat"),
                                                    commentDate: ko.observable(),
                                                    dfe: false
                                                };
                                                rslt = that;
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                                alert("retrieveComments catch ..." + ex.message);
                                            }
                                            
                                            return rslt;
                                        };
                                        var populatecontentmodelcolxn = function (dcmntscolxn) {
                                            var makecomment = function (dcmt) {
                                                try {
                                                    var xcm = cmodel();
                                                    xcm.elementImage(prweb.toOwnerImgUrl(dcmt.commentOwner));
                                                    xcm.commentId = dcmt.objectId;
                                                    xcm.commentUser(dcmt.commentUser.username);
                                                    xcm.commentUserId = dcmt.commentUser.objectId;
                                                    xcm.commentText(dcmt.comment);
                                                    xcm.commentDate(prweb.timeAgoFromParseTime(dcmt.updatedAt));
                                                    xcm.sortabledate = prweb.dateTime(dcmt.updatedAt);
                                                    xcm.anotherdate = prweb.dateTime(dcmt.updatedAt);
                                                    xcm.updatedat = dcmt.updatedAt;
                                                    xcm.dfe = dcmt.datFeedElement || false;
                                                    cmodelarray.push(xcm);
                                                }
                                                catch (ex) {
                                                    var wtf = true;
                                                }
                                                
                                                return true;
                                            };
                                            //populate cmodelarray using datcomplete.commentcolxn
                                            Enumerable.From(dcmntscolxn).OrderByDescending(function (x) { return x.updatedAt }).ForEach(function (dcmt) { return makecomment(dcmt) });

                                            return cmodelarray;
                                        };
                                        pnl.newcontentmodel = cmodel;

                                        return prweb.parseManager.getDatComments(dc.datcomplete).then(function (xdcmnts) {
                                            var dcmnts = xdcmnts || false;
                                            try {
                                                if (dcmnts) {
                                                    var cmdlcolxn = populatecontentmodelcolxn(dcmnts.dcmntscolxn);
                                                    pnl.panelprops()["commentFeedColxn"](cmdlcolxn);
                                                    pnl.panelprops()['commentCount'](prweb.toPluralText(cmdlcolxn.length, 'Comment', true));
                                                    //pnl.panelprops()['commentCount'](cmdlcolxn.length + ' comments');
                                                    
                                                } else {
                                                    //var cmdlcolxn = populatecontentmodelcolxn(dcmnts.dcmntscolxn);
                                                    pnl.panelprops()["commentFeedColxn"]([]);

                                                    var cmntcount = dc.datcomplete.datMetadata.comments || 0;
                                                    pnl.panelprops()['commentCount'](prweb.toPluralText(cmntcount, 'Comment', true));
                                                    //pnl.panelprops()['commentCount'](cmntcount + ' comments');
                                                    
                                                }
                                            }
                                            catch (ex) {
                                                var wtf = true;
                                            }
                                            return pnl;
                                        }).fail(function (e) {
                                            pnl.contentmodelcolxn(cmodelarray);
                                            prweb.log("prweb.datwebappmain.datSingle1.init parseManager.getDatComments error callback... " + e.toString());
                                        });

                                    };
                                    return pnl["retrieveComments"]().then(function (xpnl) {
                                        //var isr = xpnl.panelprops()['initScrollRoot'] || false;
                                        //var xtarget = $("#datsinglecontentmodel");
                                        //$(isr).mCustomScrollbar('scrollTo', xtarget);
                                        //$("#scrollrootdatSingle1").animate({
                                        //    scrollTop: $("#datsinglecontentmodel").offset().top
                                        //}, 2000);
                                    });
                                    
                                }
                                catch (ex) {
                                    prweb.log("prweb.datwebappmain.datSingle1.init catch exception... " + ex.Message);
                                }
                            }

                        }
                    };
                };
                //#endregion datCommentFeed1
                //#region datCommentEntry1
                if (!ko.bindingHandlers.datCommentEntry1) {
                    ko.bindingHandlers.datCommentEntry1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var y = 2;
                            bindingContext.$data.pnl.panelprops()['seeMe'] = "";//this is a big deal...you could put stuff here...emoji's????
                            //bindingContext.$data.pnl is the panel that this is hosting this control...
                            //there are sizing functions that each panel uses to resize after adding or removing this control
                            //they are panelprops()['hidecommententry'] and panelprops()['showcommententry']
                            //in this area we are just interested in hiding the control based on Cancel or Post events...
                            var pnl = bindingContext.$data.pnl;
                            if (pnl["IsCommentEdit"] || pnl["IsVerbatimReplyEdit"]) {
                                if (pnl["IsVerbatimReplyEdit"]) {
                                    $("#commenttextarea").val(pnl["EditCommentText"]);
                                } else {
                                    $("#commenttextarea").val(pnl["EditCommentText"]);
                                }
                            }
                            $("#datsinglecommententrycancelbtn", $(element)).on(self.xevent, function (e) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.cancelBubble = true;
                                pnl["IsVerbatimReply"] = false;
                                pnl["IsCommentEdit"] = false;
                                pnl["IsVerbatimReplyEdit"] = false;
                                $("#commenttextarea").val('');
                                pnl.panelprops()['hidecommententry']();//it is a function...gotta execute it

                            });

                            var datCommentPostHandler = function () {
                                if (pnl["IsCommentEdit"]) {
                                    var updatecomment = function () {
                                        var xmsg = $("#commenttextarea").val();
                                        pnl["IsCommentEdit"] = false;
                                        var dc = pnl["EditCommentObject"];
                                        var parms = {
                                            objectId: dc.commentId,
                                            commentOwnerId: dc.commentUserId,
                                            datid: pnl.datcomplete.objectId,
                                            commentmsg: xmsg
                                        };
                                        var yes = true;
                                        $("#commenttextarea").val('');
                                        pnl.panelprops()['hidecommententry']();
                                        return prweb.parseManager.postEditDatComment(parms).then(function (xr) {
                                            pnl["retrieveComments"]();
                                        }).fail(function (ex) {
                                            var wtf = true;
                                        });
                                    };
                                    return updatecomment().then(function (xr) { return xr; });
                                } else {
                                    //var xta = $(".commenttextarea")[0];
                                    var xmsg = $("#commenttextarea").val();
                                    if (xmsg.length > 0) {
                                        $("#commenttextarea").val('');
                                        pnl.panelprops()['hidecommententry']();//it is a function...gotta execute it
                                        var addcomment = function (msg) {
                                            var xcm = bindingContext.$data.pnl.newcontentmodel();
                                            xcm.commentText(msg);
                                            var url = self.mydatappVmx.parseuserphotourl();
                                            xcm.elementImage(url);
                                            var user = Parse.User.current().toJSON();
                                            if (!(undefined == user.username)) { xcm.commentUser(user.username); }
                                            dt = prweb.dateTime(Date.now());
                                            xcm.anotherdate = dt;
                                            xcm.sortabledate = new Date(Date.now());

                                            xcm.updatedat = new Date(Date.now()).toISOString();
                                            xcm.commentDate(prweb.timeAgoFromParseTime(xcm.updatedat));
                                            var cmodelarray = bindingContext.$data.pnl.panelprops()["commentFeedColxn"]();
                                            cmodelarray.push(xcm);
                                            var xcmarray = Enumerable.From(cmodelarray).OrderByDescending(function (x) {
                                                //var s = x.sortabledate;
                                                //var a = x.anotherdate;
                                                //var z = x.updatedat;
                                                return x.anotherdate;
                                            }).ToArray();
                                            bindingContext.$data.pnl.panelprops()['commentCount'](xcmarray.length + ' comments');
                                            bindingContext.$data.pnl.panelprops()["commentFeedColxn"](xcmarray);

                                            var datid = bindingContext.$data.pnl.datcomplete.objectId;
                                            return prweb.parseManager.addDatComment(datid, msg).then(function (xr) {
                                                return xr;
                                            });
                                            //bindingContext.$data.datcomplete.commentcolxn.push(new datComment);
                                            //call parse add new datComment with xcm.commentText(msg)

                                        };
                                        return addcomment(xmsg).then(function (xr) { return xr; });
                                    }
                                }
                            };
                            $("#datsinglecommententrypostbtn", $(element)).on(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                if (pnl["IsVerbatimReply"]) {
                                    var xmsg = $("#commenttextarea").val();
                                    if (xmsg.length > 0) {
                                        $("#commenttextarea").val('');
                                        pnl.panelprops()['hidecommententry']();//it is a function...gotta execute it
                                        return datFiveResponseFeedSvc.verbatimReplyPostHandler(xmsg, bindingContext);
                                    }
                                } else if (pnl["IsVerbatimReplyEdit"]) {
                                    var xmsg = $("#commenttextarea").val();
                                    $("#commenttextarea").val('');
                                    pnl.panelprops()['hidecommententry']();
                                    return datFiveResponseFeedSvc.verbatimReplyEditPostHandler(xmsg, bindingContext);
                                } else {
                                    datCommentPostHandler();
                                }
                                
                            });
                            //so here we are handling an edit use case...gotto expose an edit button if the current user is the commentOwner....
                            //isCommentOwner should be populated in CommentFeed...comments current user isCommentOwner should have edit buttons....
                            //or handlers that if they tap on the event they get UI for edit/delete....
                            //maybe other users should get tappable ui to hide or block commentOwner... 
                            //need a bindingContext.$data["isCommentOwner"] = isCommentOwner();.....databind="if: isCommentOwner"...exposes edit button
                            //isCommentOwner = function(){};
                            
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var y = 2;
                        }
                    };
                };
                //#endregion datCommentEntry1
                //#region datComment1 datCommentElem1
                if (!ko.bindingHandlers.datComment1) {
                    ko.bindingHandlers.datComment1 = {
                        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            var pnl = pnlMgr.initSize(prweb.datComment1, element).hide(0, prweb.datComment1);
                            try { 
                            bindingContext.$data.panelprops()['commentCount'] = ko.observable(0);
                            
                            //attach scroll here?
                            self._initiateMalihuScroll("scrollrootdatComment1");
                            $(".datbacktosingle1btn", $(element)).bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                pnlMgr.hide(300, prweb.datComment1);
                                pnlMgr.show(200, prweb.datSingle1);

                            });
                            $(".dataddcommentbtn", $(element)).bind(self.xevent, function (e) {
                                e.preventDefault();
                                e.cancelBubble = true;
                                var addcomment = function () {
                                    var msg = $("#datnewcommenttextarea").val();
                                    if ($("#datnewcommenttextarea").val().length > 0) {
                                        $("#datnewcommenttextarea").val('');
                                        var xcm = bindingContext.$data.newcontentmodel();
                                        xcm.commentText(msg);
                                        var user = Parse.User.current().toJSON();
                                        if (!(undefined == user.username)) { xcm.commentUser(user.username); }
                                        dt = prweb.dateTime(Date.now());
                                        xcm.updatedat = new Date(Date.now()).toISOString();
                                        xcm.commentDate(dt);
                                        var cmodelarray = bindingContext.$data.contentmodelcolxn();
                                        cmodelarray.push(xcm);
                                        var xcmarray = Enumerable.From(cmodelarray).OrderByDescending(function (x) { return x.updatedat }).ToArray();
                                        bindingContext.$data.panelprops()['commentCount'](xcmarray.length);
                                        bindingContext.$data.contentmodelcolxn(xcmarray);
                                        prweb.parseManager.addDatComment(bindingContext.$data.datcomplete.parsedatobj, msg, {
                                            success: function (rslt) {
                                                return;
                                            },
                                            error: function (e) {
                                                var xx = 2;
                                            }
                                        });
                                        //bindingContext.$data.datcomplete.commentcolxn.push(new datComment);
                                        //call parse add new datComment with xcm.commentText(msg)
                                    };
                                };
                                addcomment();
                            });

                            //isCommentOwner should be populated in CommentFeed...comments current user isCommentOwner should have edit buttons....
                            //or handlers that if they tap on the event they get UI for edit/delete....
                            //maybe other users should get tappable ui to hide or block commentOwner... 
                            //need a bindingContext.$data["isCommentOwner"] = isCommentOwner();.....databind="if: isCommentOwner"...exposes edit button
                            //isCommentOwner = function(){}; or maybe this is a server populated property
                            var isCommentOwner = function () {
                                var rslt = false;
                                //examine bindingContext.$data for commentOwner and current UserId...
                                return rslt;
                            };
                            bindingContext.$data["isCommentOwner"] = isCommentOwner();
                            var isDatOwner = function () {
                                var rslt = false;
                                //examine bindingContext.$data for commentOwner and current UserId...
                                return rslt;
                            };
                            bindingContext.$data["isDatOwner"] = isDatOwner();
                            bindingContext.$data["commentOwnerTapUX"] = ko.observable(false);
                            bindingContext.$data["datOwnerTapUX"] = ko.observable(false);
                            bindingContext.$data["userTapUX"] = ko.observable(false);
                            bindingContext.$data["clickHandler"] = function (x, e) {
                                var isOwner = bindingContext.$data["isCommentOwner"];
                                if (bindingContext.$data["isCommentOwner"]) {
                                    //gotta make some UI appear...put in html for Comment1 via data-bind="if: isCommentOwner"
                                    //this should probably be its own binding and html resource...."datCommentDattableOwner1"
                                    bindingContext.$data["commentOwnerTapUX"](true);
                                }
                                else {
                                    if (bindingContext.$data["isDatOwner"]) {
                                        //gotta make some UI appear...
                                        bindingContext.$data["datOwnerTapUX"](true);
                                        //this should probably be its own binding and html resource...."datCommentDattableDatOwner1"
                                    } else {
                                        //gotta make some UI appear...
                                        bindingContext.$data["userTapUX"](true);
                                        //this should probably be its own binding and html resource...."datCommentDattableUser1"
                                    }
                                    
                                }
                            };//put in html for Comment1 via data-bind="if: isCommentOwner"
                            }
                            catch (ex) {
                                var wtf = true;
                            }

                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            //var xxval = valueAccessor();
                        }
                    };
                };
                if (!ko.bindingHandlers.datCommentElem1) {
                    ko.bindingHandlers.datCommentElem1 = {
                        init: function (elem, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                //isCommentOwner should be populated in CommentFeed...comments current user isCommentOwner should have edit buttons....
                                //or handlers that if they tap on the event they get UI for edit/delete....
                                //maybe other users should get tappable ui to hide or block commentOwner... 
                                //need a bindingContext.$data["isCommentOwner"] = isCommentOwner();.....databind="if: isCommentOwner"...exposes edit button
                                //isCommentOwner = function(){}; or maybe this is a server populated property
                                var isCommentOwner = function () {
                                    var rslt = true;
                                    var puser = Parse.User.current() || false;
                                    if (puser) {
                                        rslt = (puser.id == bindingContext.$data["commentUserId"]);
                                    }
                                    //examine bindingContext.$data for commentOwner and current UserId...
                                    return rslt;
                                };
                                bindingContext.$data["isCommentOwner"] = isCommentOwner();
                                var isDatOwner = function () {
                                    var rslt = true;
                                    var puser = Parse.User.current() || false;
                                    if (puser) {
                                        if (bindingContext.$data["datcomplete"]) {
                                            rslt = (puser.id == bindingContext.$data["datcomplete"]["userId"]);
                                        } else {
                                            rslt = (puser.id == bindingContext.$parent["datcomplete"]["userId"]);
                                        }
                                        
                                    }
                                    //examine bindingContext.$data for commentOwner and current UserId...
                                    return rslt;
                                };
                                bindingContext.$data["isDatOwner"] = isDatOwner();
                                bindingContext.$data["commentOwnerTapUX"] = ko.observable(false);
                                bindingContext.$data["datOwnerTapUX"] = ko.observable(false);
                                bindingContext.$data["userTapUX"] = ko.observable(false);
                                bindingContext.$data["clickHandler"] = function (xpnl, ydata, e) {
                                    if (bindingContext.$data["IsReplyComment"]) {
                                        bindingContext.$data.pnl["IsVerbatimReplyEdit"] = true;
                                    } else {
                                        bindingContext.$data.pnl["IsVerbatimReplyEdit"] = false;
                                    }
                                    var isOwner = bindingContext.$data["isCommentOwner"];
                                    bindingContext.$data["rightmenueventsource"] = xpnl;
                                    var navToRightMenu = function () {
                                        navMgr.me(prweb.datControlsSingleDat1).to(prweb.datControlsRightMenu1);
                                        //cntrlMgr.showControl(prweb.datControlsRightMenu1);IS IN RIGHTMENU OnShow method
                                        pnlMgr.hide(300);
                                        navMgr.me(prweb.datSingle1).to(prweb.datRightMenu1);
                                        pnlMgr.show(200, prweb.datRightMenu1)["datacontext"](bindingContext.$data);
                                    };
                                    if (bindingContext.$data["isCommentOwner"]) {
                                        //gotta make some UI appear...put in html for Comment1 via data-bind="if: isCommentOwner"
                                        bindingContext.$data["commentOwnerTapUX"](true);
                                    }
                                    else {
                                        if (bindingContext.$data["isDatOwner"]) {
                                            //gotta make some UI appear...
                                            bindingContext.$data["datOwnerTapUX"](true);
                                        } else {
                                            //gotta make some UI appear...
                                            bindingContext.$data["userTapUX"](true);
                                        }
                                    }
                                    navToRightMenu();
                                };//put in html for Comment1 via data-bind="if: isCommentOwner"
                                bindingContext.$data["showMoreOrLess"] = function (x, e) {
                                    if (e) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        e.cancelBubble = true;
                                    }
                                    var verbtxt = $(".replycommenttext", $(elem));
                                    var rslt = "";
                                    if (verbtxt.hasClass('datellipsis')) {
                                        rslt = "Show less...";
                                    } else {
                                        rslt = "Show more...";
                                    }
                                    verbtxt.hide(100, function () {
                                        if (verbtxt.hasClass('datellipsis')) {
                                            verbtxt.removeClass('datellipsis').addClass('dattextbold').addClass('dattextsmall').show(100);
                                            return "Show less...";
                                        } else {
                                            verbtxt.addClass('datellipsis').show(100);
                                            return "Show more...";
                                        }
                                    });
                                    return rslt;
                                };
                                bindingContext.$data["IsCommentdatcomplete"] = ko.observable(false);
                                bindingContext.$data["datcountableitemVmx"] = ko.observable();
                                bindingContext.$data["showHideDatCountables"] = function () {
                                    var datable = $(".datDatable1", $(elem));
                                    var datablecontent = $(".datDatable1content", $(elem));
                                    var rslt = "";
                                    if (datable.hasClass('datablehide')) {
                                        rslt = "Hidden";
                                    } else {
                                        rslt = "Visible";
                                    }
                                    datablecontent.hide(100, function () {
                                        if (datable.hasClass('datablehide')) {
                                            datable.removeClass('datablehide').css('padding','0');
                                            datablecontent.show(100);
                                        } else {
                                            datable.addClass('datablehide').css('padding', '0.15em');
                                        }
                                    });
                                    return rslt;
                                };
                                bindingContext.$data["showHideDatCountablesHandler"] = function (x, e) {
                                    if (e) {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        e.cancelBubble = true;
                                    }
                                    bindingContext.$data["showHideDatCountables"]();
                                };
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            return;
                        },
                        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                            try {
                                var dc = bindingContext.$data.pnl.datacontext() || false;
                                if (dc != false) {
                                    //this displays Sentiment Icons for a comments
                                    var toCommentdatcomplete = function () {
                                        var rslt = false;
                                        try {
                                            var dfe = bindingContext.$data.dfe || false;
                                            if (dfe) {
                                                var xrslt = {
                                                    datType: 3,
                                                    countables: [],
                                                    otherdcelems: [{ elementImage: false, datElementText: false }]
                                                };
                                                xrslt.countables = dfe.countables || [];
                                                if (xrslt.countables.length > 0) {
                                                    rslt = xrslt;
                                                }
                                            }
                                        }
                                        catch (ex) { }
                                        return rslt;
                                    };
                                    var IsCommentdatcomplete = toCommentdatcomplete();
                                    if (IsCommentdatcomplete) {
                                        bindingContext.$data["datPageEntry"] = prweb.datwebplayersvc.NewDatPlayerSvc().newDatPage();
                                        var xcolxn = bindingContext.$data["datPageEntry"].init(IsCommentdatcomplete);
                                        xcolxn[0]["timeAgo"] = ko.observable();
                                        xcolxn[0]["datcountableitemholder"] = ko.observableArray();
                                        xcolxn[0]["obsresponseCount"] = ko.observable(xcolxn[0]["responseCount"]());
                                        xcolxn[0]["widgetizedatCountableItemResults"] = function (elem, model) {
                                            var mymodel = ko.dataFor(elem[1]);
                                            var T = "." + "datcountableitem";
                                            var echild = $(T, $(elem[1]));
                                            ko.applyBindings(mymodel, echild[0]);
                                            bindingContext.$data["showHideDatCountables"]();
                                            return;
                                        };
                                        //#region THIS IS THE BUTTON HANDLER FOR WHAN AN EMOJI IS TAPPED...
                                        var respcx = 0;
                                        xcolxn[0]["VoteHandler"] = function (root, selectedCntble, e) {
                                            try {
                                                e.preventDefault();
                                                e.stopPropagation();
                                                e.cancelBubble = true;
                                                respcx += 1;
                                                selectedCntble.responseCount += 1;
                                                var updatedCountables = bindingContext.$data["datPageEntry"].updatePercents(root.countableColxn());
                                                root.countableColxn(updatedCountables[0]["countableColxn"]);
                                                xcolxn[0]["obsresponseCount"](updatedCountables[0]["responseCount"]);
                                                xcolxn[0]["timeAgo"]("Updated " + prweb.timeAgoFromParseTime(root.timeAgo()));
                                                var parms = {};
                                                if (bindingContext.$data["IsReplyComment"]) {
                                                    bindingContext.$data["datcomplete"]["objectId"];
                                                } else {
                                                    parms["datobjectId"] = bindingContext.$parent["datcomplete"]["objectId"];
                                                }
                                                parms["commentobjectId"] = bindingContext.$data["commentId"];
                                                parms["IsReplyComment"] = bindingContext.$data["IsReplyComment"];
                                                parms["replyId"] = bindingContext.$data["replyId"];
                                                parms["responseCount"] = 1;
                                                parms["dceid"] = selectedCntble.objectId;
                                                //var xdc = pnl.datacontext();
                                                //xdc["updatedAt"]("Updating...as of " + prweb.timeAgoFromParseTime(Date.now()));
                                                return prweb.parseManager.updateCommentResults(parms).then(function (rslt) {
                                                    try {
                                                        var dfe = rslt[0]["datFeedElement"];
                                                        var countablecolxn = dfe.countables || [];
                                                        Enumerable.From(root.countableColxn()).ForEach(function (rcntble) {
                                                            Enumerable.From(countablecolxn).Where(function (c) {
                                                                return c["objectId"] == rcntble["objectId"];
                                                            }).ForEach(function (rc) {
                                                                rcntble["responseCount"] = rc["responseCount"];
                                                            });
                                                        });
                                                        var updatedCountables = bindingContext.$data["datPageEntry"].updatePercents(root.countableColxn());
                                                        root.countableColxn(updatedCountables[0]["countableColxn"]);
                                                        xcolxn[0]["obsresponseCount"](updatedCountables[0]["responseCount"]);
                                                        xcolxn[0]["timeAgo"]("Updated " + prweb.timeAgoFromParseTime(dfe.updatedAt));
                                                        var hellyes = true;
                                                    }
                                                    catch (ex) {
                                                        var no = true;
                                                    }

                                                    return true;
                                                }).fail(function (ex) {
                                                    var no = true
                                                });
                                            }
                                            catch (ex) {
                                                var no = true;
                                            }

                                            var yes = true;
                                        };
                                        //#endregion
                                        bindingContext.$data["datcountableitemVmx"](xcolxn[0]);
                                        var datable = bindingContext.$data["datcountableitemVmx"]();
                                        var makedatcountableitemholder = function () {
                                            var vmx = [{
                                                presenterT: "",
                                                responseImage: ko.observable(),
                                                html: ko.observable(),
                                                datCommentSentiment1: ko.observable()
                                            }];
                                            vmx[0].html(prweb.pCElemHtmlDxnry["datCommentSentiment1"].resourceModel);
                                            vmx[0].datCommentSentiment1(xcolxn[0]);
                                            return vmx;
                                        };
                                        datable["datcountableitemholder"](makedatcountableitemholder());
                                        
                                        //bindingContext.$data["VoteHandler"] = function (x, e) {

                                        //};
                                        bindingContext.$data["IsCommentdatcomplete"](true);//this displays the comment sentiment stuff
                                        //bindingContext.$data["showHideDatCountables"]();
                                    }
                                }
                            }
                            catch (ex) {
                                var wtf = true;
                            }
                            
                            var xx = 2;
                        }
                    };
                };
                //#endregion datComment1 datCommentElem1

                return pnlMgr;
            }
            catch (ex) {
                prweb.log("prweb.datwebappmain.setUpPanelTBindings reports " + ex.Message);
            }
        },
        //#endregions

        //#region MalihuScroll
        //deferMalihuObject: {
        //    hasany: false,

        //},
        //deferMalihu: function (selector, scroptions) {
        //    if (prweb.isMobile.any()) {
        //        $("#primary").on("touchmove", function () {

        //        });
        //    }
        //},

        _initiateMalihuScroll: function (selector, scroptions) {
            var xslctor = "." + selector;
            //var elem = $(xslctor, "#primary");
            var soptions = scroptions || { theme: "minimal-dark" };
           return $(xslctor).mCustomScrollbar(soptions);
            //$("#mCSB_1_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_2_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_3_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_4_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_5_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_6_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
            //$("#mCSB_7_scrollbar_vertical").css('right', '1.1em').css("width", "0.25em");
        },
        _initiateMalihuScrollhoriz: function (selector, scroptions) {
            var xslctor = "." + selector;
            //var elem = $(xslctor, "#primary");
            var soptions = scroptions || { theme: "minimal-dark", axis: "x" };
            $(xslctor).mCustomScrollbar(soptions);
        },
        //#endregion

        //#region NotUsed
        _populateDatMessage: function (msg) {
            var $ix = $(".datmessage", this.element);
            $ix.html(msg);
        },

        _retrieveDatwithId: function () {
            try {
                var datId = this.options.myopts['objectId'];
                prweb.parseManager.getDatComplete(datId, {
                    success: function (data) {
                        var xdbg = 2;
                        rslt = data;
                        //attach the datplayerwidget 
                        var ydbg = 2;
                    },
                    error: function (ex) {
                        alert("prweb.datwebappmain.retrieveDats.getDats reports error..." + ex.Message);
                    }
                });
            }
            catch (ex) {
                alert("prweb.datwebappmain.retrieveDats reports error..." + ex.Message);
            }
        },


        _retrieveDats: function () {
            var rslt = {}
            try {
                prweb.parseManager.getDats({
                    success: function (data) {
                        var xdbg = 2;
                        rslt = data;
                        //load feed panel
                    },
                    error: function (ex) {
                        alert("prweb.datwebappmain.retrieveDats.getDats reports error..." + ex.Message);
                    }
                });
            }
            catch (ex) {
                alert("prweb.datwebappmain.retrieveDats reports error..." + ex.Message);
            }
            return rslt;
        },

        _retreiveUser: function () {
            var self = this;
            try {
                prweb.parseManager.getUser({
                    success: function (rslt) {
                        var username = "";
                        if (!(undefined == rslt)) {
                            username = rslt.getUsername();
                            self._populateDatMessage(username);
                            //Parse.Cloud.run('hello').then(function (results) {
                            //    self._populateDatMessage(username + "  " + results);
                            //}, function (badresults) {
                            //    self._populateDatMessage(badresults);
                            //});
                        } else {
                            self._populateDatMessage("Please go to SignUp/In. We are unable to connect you to 'Dat automatically.")
                        }
                    },
                    error: function (e) {
                        //alert("badlogin..." + e.message);
                        self._populateDatMessage(e.message);
                    }
                });
            }
            catch (ex) {
                alert("prweb.datwebappmain.retreiveUser reports error..." + ex.Message);
            }
        },
        //#endregion

        //#region Dispose Destroy

        dispose: function () {
            try {
                this.mydatappVmx.dispose();
                this.mydatappVmx.apppanelcolxn = null;
                this.mydatappVmx = null;
                $(".datwebappmain").unbind().html("").remove();
            }
            catch (e) {
                prweb.log("prweb.datwebappmain.dispose reports catch exception...");
            }
            finally {
                return true;
            }
        },

        destroy: function () {
            $.Widget.prototype.destroy.call(this);
        }

        //#endregion
    });
    try {
        prweb.launchDat();
    }
    catch (ex) {
        var wtf = true;
    }
    
}(this.prweb, jQuery));